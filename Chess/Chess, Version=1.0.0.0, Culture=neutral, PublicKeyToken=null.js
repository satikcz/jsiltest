/* Generated by JSIL v0.8.2 build 28081. See http://jsil.org/ for more information. */ 
'use strict';
var $asm00 = JSIL.DeclareAssembly("Chess, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null");

JSIL.SetEntryPoint($asm00, $asm00.TypeRef("Chess.Program"), "Main", JSIL.MethodSignature.Void);

JSIL.DeclareNamespace("Chess");
/* class Chess.Player */ 

(function Player$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Chess.ChessColor)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.System.Windows.Forms.Label)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.System.Windows.Forms.Control)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm06.System.Drawing.Color)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Object)) ();
  };


  function Player__ctor (name, color, human) {
    this.isHuman = human;
    this.$name = name;
    this.color = color;
  }; 

  function Player_Draw (label) {
    (label.ForeColor = (
        (((this.color).valueOf() | 0) === 0)
           ? $T05().get_White()
           : $T05().get_Black())
    );
    label.set_Text($T00().Format("{0}{1} {2}", this.$name, (
          this.isHuman
             ? ""
             : "(AI)")
        , (this.color).toString()));
    (label.BackColor = $T05().get_Transparent());
  }; 

  function Player_GetColor () {
    return this.color;
  }; 

  function Player_GetName () {
    return this.$name;
  }; 

  function Player_IsHuman () {
    return this.isHuman;
  }; 

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Chess.Player", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm00.TypeRef("Chess.ChessColor"), 
          $.Boolean
        ]), 
      Player__ctor
    );

    $.Method({Static:false, Public:true }, "Draw", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Windows.Forms.Label")), 
      Player_Draw
    );

    $.Method({Static:false, Public:true }, "GetColor", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Chess.ChessColor")), 
      Player_GetColor
    );

    $.Method({Static:false, Public:true }, "GetName", 
      JSIL.MethodSignature.Return($.String), 
      Player_GetName
    );

    $.Method({Static:false, Public:true }, "IsHuman", 
      JSIL.MethodSignature.Return($.Boolean), 
      Player_IsHuman
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "isHuman", $.Boolean);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "color", $asm00.TypeRef("Chess.ChessColor"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Chess.AI */ 

(function AI$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Chess.BoardState)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Chess.ChessColor)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Random)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize(System.Array.Of($asm01.System.Int32, JSIL.ArrayDimensionParameter(2)))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Chess.Player)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Chess.Move))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Chess.Move)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm04.System.Linq.Enumerable)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Chess.FigureType)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Console)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.DateTime)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm06.System.Drawing.Point)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm06.System.Drawing.Point))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm06.System.Drawing.Point))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Chess.Figure)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.System.Random, null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.System.Boolean, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.System.Collections.Generic.List$b1.Of($asm00.Chess.Move), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm01.System.TimeSpan, [$asm01.System.DateTime, $asm01.System.DateTime]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm06.System.Drawing.Point).GetEnumerator)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm06.System.Drawing.Point).get_Current)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };


  function AI__ctor (state, color) {
    this.random = false;
    this.r = $S00().Construct();
    this.maxDepth = 2;
    this.pawnHint = JSIL.MultidimensionalArray.New($T03(), [0, 8, 0, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, -16, -16, 0, 0, 0, 2, 2, 2, 8, 8, 0, 2, 2, 2, 2, 12, 16, 16, 12, 2, 2, 8, 8, 12, 20, 20, 6, 8, 8, 20, 20, 20, 30, 30, 20, 20, 20, 40, 40, 40, 40, 40, 40, 40, 40, 0, 0, 0, 0, 0, 0, 0, 0]);
    this.kingHint = JSIL.MultidimensionalArray.New($T03(), [0, 8, 0, 8], [20, 30, 26, -10, 0, -10, 34, 24, -10, -10, -20, -30, -30, -20, -10, -10, -30, -30, -36, -40, -40, -36, -30, -30, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60]);
    var array = JSIL.MultidimensionalArray.New($T03(), [0, 8, 0, 8]);
    array.Set(0, 3, 1);
    this.queenHint = array;
    this.knightHint = JSIL.MultidimensionalArray.New($T03(), [0, 8, 0, 8], [-20, -8, -6, -4, -4, -6, -8, -20, -10, -10, -6, 0, 0, -6, -10, -10, -6, 0, 6, 10, 10, 6, 0, -6, -4, 10, 10, 14, 14, 10, 10, -4, 0, 10, 12, 16, 16, 12, 10, 0, 10, 12, 14, 16, 16, 14, 12, 10, 0, 10, 12, 16, 16, 12, 10, 0, -20, -10, -4, 0, 0, -4, -10, -20]);
    this.bishopHint = JSIL.MultidimensionalArray.New($T03(), [0, 8, 0, 8], [-10, -8, -6, -4, -4, -6, -8, -10, -10, 12, -4, 10, 10, -4, 12, -10, 0, 0, 2, 10, 10, 2, 0, 0, 0, 4, 10, 10, 10, 10, 10, 0, 0, 10, 12, 16, 16, 12, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5, 0, 0, 0, 0, 0, 0, -5]);
    $T05().prototype._ctor.call(this, "Random computer", color, false);
    this.state = state;
  }; 

  function AI_alphaBeta (state, depth, alpha, beta) {
    var $temp00;
    var moves = state.GetAllowedMoves();
    if (!$S01().CallStatic($T08(), "Any$b1", [$asm00.Chess.Move], moves)) {
      var result = ((
        state.IsCheck()
           ? -1000000
           : 0)
       | 0);
    } else if ((depth | 0) <= 0) {
      result = (this.stateValue(state) | 0);
    } else {

      for (var a$0 = moves._items, i$0 = 0, l$0 = (moves._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var i = a$0[i$0];
        var scc = state.Clone();
        scc.PlayMove(i, $T09().Queen, false);
        var value = (-this.alphaBeta(
          scc, 
          (((depth | 0) - 1) | 0), 
          this.blizKMatu((-beta | 0)), 
          this.blizKMatu((-alpha | 0))
        ) | 0);
        value = (this.dalOdMatu(value) | 0);
        if (value > (alpha | 0)) {
          alpha = value;
          if (value >= (beta | 0)) {
            result = (beta | 0);
            return result;
          }
        }
      }
      result = (alpha | 0);
    }
    return result;
  }; 

  function AI_bestMoveAlphaBeta (state, depth) {
    var $temp00;
    var moves = state.GetAllowedMoves();
    var bestMoves = $S02().Construct();
    var alpha = -1000000000;

    for (var a$0 = moves._items, i$0 = 0, l$0 = (moves._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var i = a$0[i$0];
      var scc = state.Clone();
      scc.PlayMove(i, $T09().Queen, false);
      var value = (-this.alphaBeta(scc, depth, -1000000000, this.blizKMatu((-alpha | 0))) | 0);
      value = (this.dalOdMatu(value) | 0);
      if (value > alpha) {
        alpha = value;
        bestMoves.Clear();
        bestMoves.Add(i);
      }
    }
    $T0A().WriteLine("State rating: {0}", $T03().$Box(alpha));
    if ((bestMoves.get_Count() | 0) === 0) {
      var result = null;
    } else if (this.random) {
      $T0A().WriteLine("Best move count: {0}", $T03().$Box(bestMoves.get_Count()));
      result = bestMoves.get_Item((this.r).Next(bestMoves.get_Count()));
    } else {
      result = bestMoves.get_Item(0);
    }
    return result;
  }; 

  function AI_bestMoveMinMax (state, depth) {
    var $temp00;
    var moves = state.GetAllowedMoves();
    var bestValue = -2147483648;
    var bestMoves = $S02().Construct();

    for (var a$0 = moves._items, i$0 = 0, l$0 = (moves._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var i = a$0[i$0];
      var scc = state.Clone();
      scc.PlayMove(i, $T09().Queen, false);
      var value = (-this.minimax(scc, depth) | 0);
      if (value > bestValue) {
        bestValue = value;
        bestMoves.Clear();
        bestMoves.Add(i);
      } else if (value === bestValue) {
        bestMoves.Add(i);
      }
    }
    $T0A().WriteLine("State rating: {0}", $T03().$Box(bestValue));
    if ((bestMoves.get_Count() | 0) === 0) {
      var result = null;
    } else if (this.random) {
      $T0A().WriteLine("Best move count: {0}", $T03().$Box(bestMoves.get_Count()));
      result = bestMoves.get_Item((this.r).Next(bestMoves.get_Count()));
    } else {
      result = bestMoves.get_Item(0);
    }
    return result;
  }; 

  function AI_blizKMatu (value) {
    if ((value | 0) > 500000) {
      var result = (((value | 0) + 1) | 0);
    } else if ((value | 0) < -500000) {
      result = (((value | 0) - 1) | 0);
    } else {
      result = (value | 0);
    }
    return result;
  }; 

  function AI_dalOdMatu (value) {
    if ((value | 0) > 500000) {
      var result = (((value | 0) - 1) | 0);
    } else if ((value | 0) < -500000) {
      result = (((value | 0) + 1) | 0);
    } else {
      result = (value | 0);
    }
    return result;
  }; 

  function AI_LoadState (state) {
    this.state = state;
  }; 

  function AI_minimax (state, depth) {
    var $temp00;
    var moves = state.GetAllowedMoves();
    var bestValue = -1000000000;
    if (!$S01().CallStatic($T08(), "Any$b1", [$asm00.Chess.Move], moves)) {
      var result = ((
        state.IsCheck()
           ? -1000000
           : 0)
       | 0);
    } else if ((depth | 0) <= 0) {
      result = (this.stateValue(state) | 0);
    } else {

      for (var a$0 = moves._items, i$0 = 0, l$0 = (moves._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var i = a$0[i$0];
        var scc = state.Clone();
        scc.PlayMove(i, $T09().Queen, false);
        var value = (-this.minimax(scc, (((depth | 0) - 1) | 0)) | 0);
        if (value > bestValue) {
          bestValue = value;
        }
      }
      if (bestValue > 500000) {
        bestValue = ((bestValue - 1) | 0);
      }
      if (bestValue < -500000) {
        bestValue = ((bestValue + 1) | 0);
      }
      result = bestValue;
    }
    return result;
  }; 

  function AI_PlayMove () {
    this.ratedMoves = 0;
    var clock = $T0B().get_Now();
    var moves = (this.state).GetAllowedMoves();
    if (!$S01().CallStatic($T08(), "Any$b1", [$asm00.Chess.Move], moves)) {
      var result = null;
    } else {
      var move = this.bestMoveAlphaBeta(this.state, this.maxDepth);
      $T0A().WriteLine("Color: {2}, Length: {0}, Moves tested: {1}", $S03().CallStatic($T0B(), "op_Subtraction", null, $T0B().get_Now(), clock), $T03().$Box(this.ratedMoves), this.color);
      result = move;
    }
    return result;
  }; 

  function AI_Promote (pos) {
    return $T09().Queen;
  }; 

  function AI_stateValue (state) {
    this.ratedMoves = (((this.ratedMoves | 0) + 1) | 0);
    var ratingForCurrent = 0;
    var color = state.GetActiveColor();
    var enumerator = $IM00().Call(state.GetFigures(), null);
    try {

      while ($IM01().Call(enumerator, null)) {
        var p = $IM02().Call(enumerator, null);
        var f = state.GetFigureAt(p);
        if (f.Color === color) {
          ratingForCurrent = ((ratingForCurrent + Math.imul(f.GetFigurePrice(), 1000)) | 0);
        } else {
          ratingForCurrent = ((ratingForCurrent - Math.imul(f.GetFigurePrice(), 1000)) | 0);
        }
        if (f.Type === $T09().Pawn) {
          if (f.Color === color) {
            ratingForCurrent = ((ratingForCurrent + ((this.pawnHint).Get(
                (
                  (((f.Color).valueOf() | 0) === 0)
                     ? p.get_Y()
                     : ((7 - (p.get_Y() | 0)) | 0))
                , 
                p.get_X()
              ) | 0)) | 0);
          } else {
            ratingForCurrent = ((ratingForCurrent - ((this.pawnHint).Get(
                (
                  (((f.Color).valueOf() | 0) === 0)
                     ? p.get_Y()
                     : ((7 - (p.get_Y() | 0)) | 0))
                , 
                p.get_X()
              ) | 0)) | 0);
          }
        } else if (f.Type === $T09().King) {
          if (f.Color === color) {
            ratingForCurrent = ((ratingForCurrent + ((this.kingHint).Get(
                (
                  (((f.Color).valueOf() | 0) === 0)
                     ? p.get_Y()
                     : ((7 - (p.get_Y() | 0)) | 0))
                , 
                p.get_X()
              ) | 0)) | 0);
          } else {
            ratingForCurrent = ((ratingForCurrent - ((this.kingHint).Get(
                (
                  (((f.Color).valueOf() | 0) === 0)
                     ? p.get_Y()
                     : ((7 - (p.get_Y() | 0)) | 0))
                , 
                p.get_X()
              ) | 0)) | 0);
          }
        } else if (f.Type === $T09().Queen) {
          if (f.Color === color) {
            ratingForCurrent = ((ratingForCurrent + ((this.queenHint).Get(
                (
                  (((f.Color).valueOf() | 0) === 0)
                     ? p.get_Y()
                     : ((7 - (p.get_Y() | 0)) | 0))
                , 
                p.get_X()
              ) | 0)) | 0);
          } else {
            ratingForCurrent = ((ratingForCurrent - ((this.queenHint).Get(
                (
                  (((f.Color).valueOf() | 0) === 0)
                     ? p.get_Y()
                     : ((7 - (p.get_Y() | 0)) | 0))
                , 
                p.get_X()
              ) | 0)) | 0);
          }
        } else if (f.Type === $T09().Knight) {
          if (f.Color === color) {
            ratingForCurrent = ((ratingForCurrent + ((this.knightHint).Get(
                (
                  (((f.Color).valueOf() | 0) === 0)
                     ? p.get_Y()
                     : ((7 - (p.get_Y() | 0)) | 0))
                , 
                p.get_X()
              ) | 0)) | 0);
          } else {
            ratingForCurrent = ((ratingForCurrent - ((this.knightHint).Get(
                (
                  (((f.Color).valueOf() | 0) === 0)
                     ? p.get_Y()
                     : ((7 - (p.get_Y() | 0)) | 0))
                , 
                p.get_X()
              ) | 0)) | 0);
          }
        } else if (f.Type === $T09().Bishop) {
          if (f.Color === color) {
            ratingForCurrent = ((ratingForCurrent + ((this.bishopHint).Get(
                (
                  (((f.Color).valueOf() | 0) === 0)
                     ? p.get_Y()
                     : ((7 - (p.get_Y() | 0)) | 0))
                , 
                p.get_X()
              ) | 0)) | 0);
          } else {
            ratingForCurrent = ((ratingForCurrent - ((this.bishopHint).Get(
                (
                  (((f.Color).valueOf() | 0) === 0)
                     ? p.get_Y()
                     : ((7 - (p.get_Y() | 0)) | 0))
                , 
                p.get_X()
              ) | 0)) | 0);
          }
        }
      }
    } finally {
      if (enumerator !== null) {
        $IM03().Call(enumerator, null);
      }
    }
    return ratingForCurrent;
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Chess.Player"), 
      Name: "Chess.AI", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Chess.BoardState"), $asm00.TypeRef("Chess.ChessColor")]), 
      AI__ctor
    );

    $.Method({Static:false, Public:false}, "alphaBeta", 
      new JSIL.MethodSignature($.Int32, [
          $asm00.TypeRef("Chess.BoardState"), $.Int32, 
          $.Int32, $.Int32
        ]), 
      AI_alphaBeta
    );

    $.Method({Static:false, Public:false}, "bestMoveAlphaBeta", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Chess.Move")]), [$asm00.TypeRef("Chess.BoardState"), $.Int32]), 
      AI_bestMoveAlphaBeta
    );

    $.Method({Static:false, Public:false}, "bestMoveMinMax", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Chess.Move")]), [$asm00.TypeRef("Chess.BoardState"), $.Int32]), 
      AI_bestMoveMinMax
    );

    $.Method({Static:false, Public:false}, "blizKMatu", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      AI_blizKMatu
    );

    $.Method({Static:false, Public:false}, "dalOdMatu", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      AI_dalOdMatu
    );

    $.Method({Static:false, Public:true }, "LoadState", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Chess.BoardState")), 
      AI_LoadState
    );

    $.Method({Static:false, Public:false}, "minimax", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Chess.BoardState"), $.Int32]), 
      AI_minimax
    );

    $.Method({Static:false, Public:true }, "PlayMove", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Chess.Move")])), 
      AI_PlayMove
    );

    $.Method({Static:false, Public:true }, "Promote", 
      new JSIL.MethodSignature($asm00.TypeRef("Chess.FigureType"), [$asm06.TypeRef("System.Drawing.Point")]), 
      AI_Promote
    );

    $.Method({Static:false, Public:false}, "stateValue", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Chess.BoardState")]), 
      AI_stateValue
    );

    $.Field({Static:false, Public:false}, "state", $asm00.TypeRef("Chess.BoardState"));

    $.Field({Static:false, Public:false}, "random", $.Boolean);

    $.Field({Static:false, Public:false}, "r", $asm01.TypeRef("System.Random"));

    $.Field({Static:false, Public:false}, "maxDepth", $.Int32);

    $.Field({Static:false, Public:false}, "ratedMoves", $.Int32);

    $.Field({Static:false, Public:false}, "pawnHint", $jsilcore.TypeRef("System.Array", [$.Int32, JSIL.ArrayDimensionParameter(2)]));

    $.Field({Static:false, Public:false}, "kingHint", $jsilcore.TypeRef("System.Array", [$.Int32, JSIL.ArrayDimensionParameter(2)]));

    $.Field({Static:false, Public:false}, "queenHint", $jsilcore.TypeRef("System.Array", [$.Int32, JSIL.ArrayDimensionParameter(2)]));

    $.Field({Static:false, Public:false}, "knightHint", $jsilcore.TypeRef("System.Array", [$.Int32, JSIL.ArrayDimensionParameter(2)]));

    $.Field({Static:false, Public:false}, "bishopHint", $jsilcore.TypeRef("System.Array", [$.Int32, JSIL.ArrayDimensionParameter(2)]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Chess.BoardState */ 

(function BoardState$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.System.Drawing.Point)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Array)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Chess.Figure)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm06.System.Drawing.Point))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Chess.ChessColor)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm00.Chess.Figure, JSIL.ArrayDimensionParameter(2)))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Chess.FigureType)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.System.Drawing.Graphics)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.Tuple$b2.Of($asm00.Chess.FigureType, $asm00.Chess.ChessColor), $asm06.System.Drawing.Image))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Tuple$b2.Of($asm00.Chess.FigureType, $asm00.Chess.ChessColor))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm06.System.Drawing.SolidBrush)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm06.System.Drawing.Color)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Chess.Move))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Chess.Move)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm06.System.Drawing.Rectangle)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.NotImplementedException)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize(System.Array.Of($asm06.System.Drawing.Point))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm04.System.Linq.Enumerable)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm00.Chess.PromoteDialog)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm08.System.Windows.Forms.Form)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Drawing.Point, [$asm01.System.Int32, $asm01.System.Int32]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.System.Array, $asm01.System.Int32, 
        $asm01.System.Array, $asm01.System.Int32, 
        $asm01.System.Int32
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.System.Array, $asm01.System.Array, 
        $asm01.System.Int32
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.System.Collections.Generic.List$b1.Of($asm06.System.Drawing.Point), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Drawing.Point")])]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.System.Collections.Generic.List$b1.Of($asm06.System.Drawing.Point), null))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.Chess.BoardState, [$asm00.Chess.BoardState]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Drawing.SolidBrush, [$asm06.System.Drawing.Color]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.System.Collections.Generic.List$b1.Of($asm00.Chess.Move), null))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm06.System.Drawing.Point, $asm01.System.Collections.Generic.List$b1.Of($asm00.Chess.Move)]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm06.System.Drawing.Brush, $asm06.System.Drawing.Rectangle]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Drawing.Rectangle, [
        $asm01.System.Int32, $asm01.System.Int32, 
        $asm01.System.Int32, $asm01.System.Int32
      ]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature($asm01.System.Collections.Generic.List$b1.Of($asm00.Chess.Move), [$asm00.Chess.ChessColor, $asm01.System.Collections.Generic.List$b1.Of($asm06.System.Drawing.Point)]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.System.NotImplementedException, null))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.System.Exception, [$asm01.System.String]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.MethodSignature($asm01.System.Boolean, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"]))) ();
  };


  function BoardState__ctor$00 (state) {
    this.board = JSIL.MultidimensionalArray.New($T02(), [0, 8, 0, 8]);
    $S02().CallStatic($T01(), "Copy", null, state.board, this.board, 64);
    this.turnColor = state.turnColor;
    this.enPassant = state.enPassant;
    this.whiteKing = state.whiteKing.MemberwiseClone();
    this.blackKing = state.blackKing.MemberwiseClone();
    this.figures = $S03().Construct(state.figures);
  }; 

  function BoardState__ctor$01 () {
    var p = new ($T00())();
    this.board = JSIL.MultidimensionalArray.New($T02(), [0, 8, 0, 8]);
    this.figures = $S04().Construct();

    for (var i = 0; i < 8; i = ((i + 1) | 0)) {

      for (var c = $T05().White; c <= $T05().Black; c = $T05().$Cast(((c + 1) | 0))) {
        (p = p.MemberwiseClone(), 
          $T00().prototype._ctor.call(p, i, (
              ((c.valueOf() | 0) === 0)
                 ? 1
                 : 6)
          ));
        ((this.board).GetReference(
            p.get_X(), 
            p.get_Y()
          )).set(new ($T02())($T07().Pawn, c));
        (this.figures).Add(p.MemberwiseClone());
      }
    }

    for (c = $T05().White; c <= $T05().Black; c = $T05().$Cast(((c + 1) | 0))) {
      (p = p.MemberwiseClone(), 
        $T00().prototype._ctor.call(p, 4, (
            ((c.valueOf() | 0) === 0)
               ? 0
               : 7)
        ));
      ((this.board).GetReference(
          p.get_X(), 
          p.get_Y()
        )).set(new ($T02())($T07().King, c));
      (this.figures).Add(p.MemberwiseClone());
    }

    for (c = $T05().White; c <= $T05().Black; c = $T05().$Cast(((c + 1) | 0))) {
      (p = p.MemberwiseClone(), 
        $T00().prototype._ctor.call(p, 3, (
            ((c.valueOf() | 0) === 0)
               ? 0
               : 7)
        ));
      ((this.board).GetReference(
          p.get_X(), 
          p.get_Y()
        )).set(new ($T02())($T07().Queen, c));
      (this.figures).Add(p.MemberwiseClone());
    }

    for (i = 2; i < 6; i = ((i + 3) | 0)) {

      for (c = $T05().White; c <= $T05().Black; c = $T05().$Cast(((c + 1) | 0))) {
        (p = p.MemberwiseClone(), 
          $T00().prototype._ctor.call(p, i, (
              ((c.valueOf() | 0) === 0)
                 ? 0
                 : 7)
          ));
        ((this.board).GetReference(
            p.get_X(), 
            p.get_Y()
          )).set(new ($T02())($T07().Bishop, c));
        (this.figures).Add(p.MemberwiseClone());
      }
    }

    for (i = 1; i < 7; i = ((i + 5) | 0)) {

      for (c = $T05().White; c <= $T05().Black; c = $T05().$Cast(((c + 1) | 0))) {
        (p = p.MemberwiseClone(), 
          $T00().prototype._ctor.call(p, i, (
              ((c.valueOf() | 0) === 0)
                 ? 0
                 : 7)
          ));
        ((this.board).GetReference(
            p.get_X(), 
            p.get_Y()
          )).set(new ($T02())($T07().Knight, c));
        (this.figures).Add(p.MemberwiseClone());
      }
    }

    for (i = 0; i < 8; i = ((i + 7) | 0)) {

      for (c = $T05().White; c <= $T05().Black; c = $T05().$Cast(((c + 1) | 0))) {
        (p = p.MemberwiseClone(), 
          $T00().prototype._ctor.call(p, i, (
              ((c.valueOf() | 0) === 0)
                 ? 0
                 : 7)
          ));
        ((this.board).GetReference(
            p.get_X(), 
            p.get_Y()
          )).set(new ($T02())($T07().Rook, c));
        (this.figures).Add(p.MemberwiseClone());
      }
    }
    this.enPassant = null;
    this.turnColor = $T05().White;
    this.whiteKing = this.GetKing($T05().White);
    this.blackKing = this.GetKing($T05().Black);
  }; 

  function BoardState_Clone () {
    return $S05().Construct(this);
  }; 

  function BoardState_Draw (g, pos, selectedField, figImages) {
    var $temp00;
    var $hoisted00 = new ($T00())();

    for (var i = 0; i < 8; i = ((i + 1) | 0)) {

      for (var j = 0; j < 8; j = ((j + 1) | 0)) {
        var f = this.GetFigureAt(($hoisted00._ctor(i, j), 
            $hoisted00)).MemberwiseClone();
        if (f.Type !== $T07().None) {
          f.Draw(
            g, 
            $S00().Construct((((((pos.get_X() | 0) + Math.imul(i, 50)) | 0) + 50) | 0), (((((pos.get_Y() | 0) + Math.imul(j, 50)) | 0) + 50) | 0)), 
            figImages.get_Item(new ($T0A())(f.Type, f.Color))
          );
        }
      }
    }
    if ((selectedField !== null) && (this.turnColor === this.GetFigureAt(JSIL.Nullable_Value(selectedField)).Color)) {
      var b = $S06().Construct($T0C().FromArgb(127, $T0C().get_Lime()));
      var moves = $S07().Construct();
      $S08().CallVirtual("GetAllowedMoves", null, this, JSIL.Nullable_Value(selectedField).MemberwiseClone(), moves);

      for (var a$0 = moves._items, i$0 = 0, l$0 = (moves._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var k = a$0[i$0];
        $S09().CallVirtual("FillRectangle", null, g, b, $S0A().Construct((((((pos.get_X() | 0) + Math.imul((k.To).get_X(), 50)) | 0) + 50) | 0), (((((pos.get_Y() | 0) + Math.imul((k.To).get_Y(), 50)) | 0) + 50) | 0), 49, 49));
      }
    }
  }; 

  function BoardState_GetActiveColor () {
    return this.turnColor;
  }; 

  function BoardState_GetAllowedMoves$02 () {
    return this.GetAllowedMoves(this.turnColor);
  }; 

  function BoardState_GetAllowedMoves$03 (color) {
    return $S0B().CallVirtual("GetAllowedMoves", null, this, color, this.figures);
  }; 

  function BoardState_GetAllowedMoves$04 (color, figures) {
    var $temp00;
    var moves = $S07().Construct();

    for (var a$0 = figures._items, i$0 = 0, l$0 = (figures._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var p = a$0[i$0].MemberwiseClone();
      if (this.GetFigureAt(p).Color === color) {
        $S08().CallVirtual("GetAllowedMoves", null, this, p.MemberwiseClone(), moves);
      }
    }
    this.RemoveCheckMoves(moves, color);
    return moves;
  }; 

  function BoardState_GetAllowedMoves$05 (pos, moves) {
    var fig = this.GetFigureAt(pos);
    switch ((fig.Type).valueOf()) {
      case 1: 
        this.GetMoves(
          moves, 
          pos.MemberwiseClone(), 
          1, 
          $thisType.combinedMatrix, 
          true
        );
        this.GetCastlingMoves(moves, fig.Color);
        break;

      case 2: 
        this.GetMoves(
          moves, 
          pos.MemberwiseClone(), 
          7, 
          $thisType.combinedMatrix, 
          true
        );
        break;

      case 3: 
        this.GetMoves(
          moves, 
          pos.MemberwiseClone(), 
          7, 
          $thisType.diagonalMatrix, 
          true
        );
        break;

      case 4: 
        this.GetKnightMoves(moves, pos.MemberwiseClone(), true);
        break;

      case 5: 
        this.GetMoves(
          moves, 
          pos.MemberwiseClone(), 
          7, 
          $thisType.straightMatrix, 
          true
        );
        break;

      case 6: 
        this.GetPawnMoves(moves, pos.MemberwiseClone(), true, this.enPassant);
        break;

    }
    this.RemoveCheckMoves(moves, fig.Color);
  }; 

  function BoardState_GetAttackers (pos, by) {
    throw $S0C().Construct();
  }; 

  function BoardState_GetCastlingMoves (moves, color) {
    var $hoisted00 = new ($T00())();
    var y = (($asm00.Chess.ChessColor.$Cast(color * $T05().$Cast(7))).valueOf() | 0);
    var kingP = $S00().Construct(4, y);
    var king = this.GetFigureAt(kingP).MemberwiseClone();
    if (!king.IsEmpty() && !king.HasMoved) {
      if (!this.IsFieldAttacked(kingP, $thisType.SwapColor(color))) {

        for (var x = 0; x < 2; x = ((x + 1) | 0)) {
          var rook = this.GetFigureAt(($hoisted00._ctor(Math.imul(x, 7), y), 
              $hoisted00));
          if (!rook.IsEmpty() && !rook.HasMoved) {
            var checkedP = kingP.MemberwiseClone();
            var valid = true;

          $loop1: 
            for (var i = 0; i < ((
                (x === 0)
                   ? 3
                   : 2)
               | 0); i = ((i + 1) | 0)) {
              checkedP.set_X((((checkedP.get_X() | 0) + ((
                    (x === 0)
                       ? -1
                       : 1)
                   | 0)) | 0));
              if (!(this.GetFigureAt(checkedP)).IsEmpty()) {
                valid = false;
                break $loop1;
              }
            }
            if (valid) {
              checkedP = kingP.MemberwiseClone();

            $loop2: 
              for (i = 0; i < 2; i = ((i + 1) | 0)) {
                checkedP.set_X((((checkedP.get_X() | 0) + ((
                      (x === 0)
                         ? -1
                         : 1)
                     | 0)) | 0));
                if (this.IsFieldAttacked(checkedP, $thisType.SwapColor(color))) {
                  valid = false;
                  break $loop2;
                }
              }
              if (valid) {
                moves.Add(new ($T0E())(kingP.MemberwiseClone(), $S00().Construct((
                        (x === 0)
                           ? 2
                           : 6)
                      , y)));
              }
            }
          }
        }
      }
    }
  }; 

  function BoardState_GetEnPassant () {
    return this.enPassant;
  }; 

  function BoardState_GetFigureAt (pos) {
    return (this.board).Get(
      pos.get_X(), 
      pos.get_Y()
    );
  }; 

  function BoardState_GetFigures () {
    return this.figures;
  }; 

  function BoardState_GetKing (color) {
    var $hoisted00 = new ($T00())();

    for (var i = 0; i < 8; i = ((i + 1) | 0)) {

      for (var j = 0; j < 8; j = ((j + 1) | 0)) {
        var f = this.GetFigureAt(($hoisted00._ctor(i, j), 
            $hoisted00));
        if (!((f.Type !== $T07().King) || (f.Color !== color))) {
          return $S00().Construct(i, j);
        }
      }
    }
    throw $S0D().Construct("King of that color not found");
  }; 

  function BoardState_GetKnightMoves (moves, pos, canTake) {
    var ft = this.GetFigureAt(pos);
    var checkedP = pos.MemberwiseClone();

    for (var i = 0; i < 8; i = ((i + 1) | 0)) {
      checkedP.set_X((((checkedP.get_X() | 0) + (($thisType.knightMatrix[i]).get_X() | 0)) | 0));
      checkedP.set_Y((((checkedP.get_Y() | 0) + (($thisType.knightMatrix[i]).get_Y() | 0)) | 0));
      if (!(((checkedP.get_X() | 0) < 0) || 
          ((checkedP.get_Y() | 0) < 0) || 
          ((checkedP.get_X() | 0) >= 8) || ((checkedP.get_Y() | 0) >= 8))) {
        var f = this.GetFigureAt(checkedP).MemberwiseClone();
        if (!((((f.Type).valueOf() | 0) !== 0) && (!canTake || 
              (ft.Color === f.Color)))) {
          moves.Add(new ($T0E())(pos.MemberwiseClone(), checkedP.MemberwiseClone()));
        }
      }
    }
  }; 

  function BoardState_GetMoves (moves, pos, maxDistance, moveMatrix, canTake) {
    var ft = this.GetFigureAt(pos).Type;

    for (var way = 0; way < (moveMatrix.length | 0); way = ((way + 1) | 0)) {
      var checkedP = pos.MemberwiseClone();
      var deltaX = ((moveMatrix[way]).get_X() | 0);
      var deltaY = ((moveMatrix[way]).get_Y() | 0);

    $loop1: 
      for (var i = 0; i < (maxDistance | 0); i = ((i + 1) | 0)) {
        checkedP.set_X((((checkedP.get_X() | 0) + deltaX) | 0));
        checkedP.set_Y((((checkedP.get_Y() | 0) + deltaY) | 0));
        if (!(!(((checkedP.get_X() | 0) < 0) || 
              ((checkedP.get_Y() | 0) < 0) || 
              ((checkedP.get_X() | 0) > 7)) && ((checkedP.get_Y() | 0) <= 7))) {
          break $loop1;
        }
        var f = this.GetFigureAt(checkedP).MemberwiseClone();
        if (f.Type !== $T07().None) {
          if (!(!canTake || (this.GetFigureAt(pos).Color === f.Color))) {
            moves.Add(new ($T0E())(pos.MemberwiseClone(), checkedP.MemberwiseClone()));
          }
          break $loop1;
        }
        moves.Add(new ($T0E())(pos.MemberwiseClone(), checkedP.MemberwiseClone()));
      }
    }
  }; 

  function BoardState_GetNearestFigureInGivenWay (pos, deltaX, deltaY, maxDist) {

  $loop0: 
    for (var i = 0; i < (maxDist | 0); i = ((i + 1) | 0)) {
      pos.set_X((((pos.get_X() | 0) + (deltaX | 0)) | 0));
      pos.set_Y((((pos.get_Y() | 0) + (deltaY | 0)) | 0));
      if (!(!(((pos.get_X() | 0) < 0) || 
            ((pos.get_Y() | 0) < 0) || 
            ((pos.get_X() | 0) > 7)) && ((pos.get_Y() | 0) <= 7))) {
        break $loop0;
      }
      var f = this.GetFigureAt(pos).MemberwiseClone();
      if (f.Type !== $T07().None) {
        var result = f;
        return result;
      }
    }
    result = new ($T02())($T07().None, $T05().White);
    return result;
  }; 

  function BoardState_GetPawnMoves (moves, pos, canTake, enPassant) {
    var color = this.GetFigureAt(pos).Color;
    var forwardVec = ((
      ((color.valueOf() | 0) === 0)
         ? 1
         : -1)
     | 0);
    var maxMoves = 1;
    if (!(((color.valueOf() | 0) !== 0) || ((pos.get_Y() | 0) !== 1))) {
      maxMoves = ((maxMoves + 1) | 0);
    } else if (!((color !== $T05().Black) || ((pos.get_Y() | 0) !== 6))) {
      maxMoves = ((maxMoves + 1) | 0);
    }
    var checkedP = pos.MemberwiseClone();

  $loop0: 
    for (var i = 0; i < maxMoves; i = ((i + 1) | 0)) {
      checkedP.set_Y((((checkedP.get_Y() | 0) + forwardVec) | 0));
      if (this.GetFigureAt(checkedP).Type !== $T07().None) {
        break $loop0;
      }
      moves.Add(new ($T0E())(pos.MemberwiseClone(), checkedP.MemberwiseClone()));
    }
    if (canTake) {
      (checkedP = checkedP.MemberwiseClone(), 
        $T00().prototype._ctor.call(checkedP, 
          (((pos.get_X() | 0) - 1) | 0), 
          (((pos.get_Y() | 0) + forwardVec) | 0)
        ));

      for (i = 0; i < 3; i = ((i + 2) | 0)) {
        if (!(((checkedP.get_X() | 0) >= 0) && ((checkedP.get_X() | 0) <= 7))) {
          checkedP.set_X((((checkedP.get_X() | 0) + 2) | 0));
        } else {
          var f = this.GetFigureAt(checkedP).MemberwiseClone();
          if (!(!((((f.Type).valueOf() | 0) !== 0) && 
                (color !== f.Color)) && ((enPassant === null) || 
                !$T00().op_Equality(JSIL.Nullable_Value(enPassant).MemberwiseClone(), checkedP.MemberwiseClone())))) {
            moves.Add(new ($T0E())(pos.MemberwiseClone(), checkedP.MemberwiseClone()));
          }
          checkedP.set_X((((checkedP.get_X() | 0) + 2) | 0));
        }
      }
    }
  }; 

  function BoardState_IsDraw () {
    return (!$S0E().CallStatic($T14(), "Any$b1", [$asm00.Chess.Move], this.GetAllowedMoves(this.turnColor)) && !this.IsFieldAttacked(
        (
          (((this.turnColor).valueOf() | 0) === 0)
             ? this.whiteKing
             : this.blackKing)
        , 
        $thisType.SwapColor(this.turnColor)
      ));
  }; 

  function BoardState_IsFieldAttacked (pos, by) {

    for (var i = 0; i < 4; i = ((i + 1) | 0)) {
      var checkedP = pos.MemberwiseClone();
      var f = this.GetNearestFigureInGivenWay(
        checkedP.MemberwiseClone(), 
        ($thisType.straightMatrix[i]).get_X(), 
        ($thisType.straightMatrix[i]).get_Y(), 
        7
      ).MemberwiseClone();
      if (!((((f.Type).valueOf() | 0) === 0) || 
          (f.Color !== by) || ((f.Type !== $T07().Rook) && 
            (f.Type !== $T07().Queen)))) {
        var result = true;
        return result;
      }
    }

    for (i = 0; i < 4; i = ((i + 1) | 0)) {
      checkedP = pos.MemberwiseClone();
      f = this.GetNearestFigureInGivenWay(
        checkedP.MemberwiseClone(), 
        ($thisType.diagonalMatrix[i]).get_X(), 
        ($thisType.diagonalMatrix[i]).get_Y(), 
        7
      ).MemberwiseClone();
      if (!((((f.Type).valueOf() | 0) === 0) || 
          (f.Color !== by) || ((f.Type !== $T07().Bishop) && 
            (f.Type !== $T07().Queen)))) {
        result = true;
        return result;
      }
    }
    checkedP = pos.MemberwiseClone();

    for (i = 0; i < 8; i = ((i + 1) | 0)) {
      checkedP = pos.MemberwiseClone();
      f = this.GetNearestFigureInGivenWay(
        checkedP.MemberwiseClone(), 
        ($thisType.combinedMatrix[i]).get_X(), 
        ($thisType.combinedMatrix[i]).get_Y(), 
        1
      ).MemberwiseClone();
      if (!((((f.Type).valueOf() | 0) === 0) || 
          (f.Color !== by) || (f.Type !== $T07().King))) {
        result = true;
        return result;
      }
    }
    checkedP = pos.MemberwiseClone();

    for (i = 0; i < 8; i = ((i + 1) | 0)) {
      checkedP.set_X((((checkedP.get_X() | 0) + (($thisType.knightMatrix[i]).get_X() | 0)) | 0));
      checkedP.set_Y((((checkedP.get_Y() | 0) + (($thisType.knightMatrix[i]).get_Y() | 0)) | 0));
      if (!(((checkedP.get_X() | 0) < 0) || 
          ((checkedP.get_Y() | 0) < 0) || 
          ((checkedP.get_X() | 0) > 7)) && ((checkedP.get_Y() | 0) <= 7)) {
        f = this.GetFigureAt(checkedP).MemberwiseClone();
        if (!((((f.Type).valueOf() | 0) === 0) || 
            (f.Color !== by) || (f.Type !== $T07().Knight))) {
          result = true;
          return result;
        }
      }
    }
    checkedP = pos.MemberwiseClone();
    checkedP.set_X((((checkedP.get_X() | 0) - 1) | 0));
    checkedP.set_Y((((checkedP.get_Y() | 0) + ((
          ((by.valueOf() | 0) === 0)
             ? -1
             : 1)
         | 0)) | 0));

    for (i = 0; i < 2; i = ((i + 1) | 0)) {
      checkedP.set_X((((checkedP.get_X() | 0) + ((
            (i === 1)
               ? 2
               : 0)
           | 0)) | 0));
      if (!(((checkedP.get_X() | 0) < 0) || 
          ((checkedP.get_Y() | 0) < 0) || 
          ((checkedP.get_X() | 0) > 7)) && ((checkedP.get_Y() | 0) <= 7)) {
        f = this.GetFigureAt(checkedP).MemberwiseClone();
        if (!((((f.Type).valueOf() | 0) === 0) || 
            (f.Color !== by) || (f.Type !== $T07().Pawn))) {
          result = true;
          return result;
        }
      }
    }
    result = false;
    return result;
  }; 

  function BoardState_IsCheck$06 (color) {
    return this.IsFieldAttacked(
      (
        ((color.valueOf() | 0) === 0)
           ? this.whiteKing
           : this.blackKing)
      , 
      $thisType.SwapColor(color)
    );
  }; 

  function BoardState_IsCheck$07 () {
    return this.IsFieldAttacked(
      (
        (((this.turnColor).valueOf() | 0) === 0)
           ? this.whiteKing
           : this.blackKing)
      , 
      $thisType.SwapColor(this.turnColor)
    );
  }; 

  function BoardState_IsCheckMate () {
    return (!$S0E().CallStatic($T14(), "Any$b1", [$asm00.Chess.Move], this.GetAllowedMoves(this.turnColor)) && this.IsFieldAttacked(
        (
          (((this.turnColor).valueOf() | 0) === 0)
             ? this.whiteKing
             : this.blackKing)
        , 
        $thisType.SwapColor(this.turnColor)
      ));
  }; 

  function BoardState_max (a, b) {
    return (
      ((a | 0) > (b | 0))
         ? a
         : b)
    ;
  }; 

  function BoardState_min (a, b) {
    return (
      ((a | 0) < (b | 0))
         ? a
         : b)
    ;
  }; 

  function BoardState_moveFigure (from, to) {
    var f = this.GetFigureAt(from).MemberwiseClone();
    ((this.board).Get(
        from.get_X(), 
        from.get_Y()
      ).MemberwiseClone()).Empty();
    ((this.board).GetReference(
        to.get_X(), 
        to.get_Y()
      )).set(f.MemberwiseClone());
    (this.figures).Remove(from.MemberwiseClone());
    (this.figures).Add(to.MemberwiseClone());
  }; 

  function BoardState_PlayMove (move, promote, checkAllowed) {
    var rookP = new ($T00())();
    var f = this.GetFigureAt(move.From).MemberwiseClone();
    if (!(!checkAllowed || (this.GetAllowedMoves(this.turnColor)).Contains(move))) {
      var result = false;
    } else {
      f.HasMoved = true;
      if (move.IsEnPassantTake(this)) {
        this.takeFigure($S00().Construct((move.To).get_X(), (
              (((f.Color).valueOf() | 0) === 0)
                 ? ((((move.To).get_Y() | 0) - 1) | 0)
                 : ((((move.To).get_Y() | 0) + 1) | 0))
          ));
      }
      if (!((f.Type !== $T07().Pawn) || ((Math.abs(((((move.From).get_Y() | 0) - ((move.To).get_Y() | 0)) | 0))) !== 2))) {
        this.enPassant = $S00().Construct((move.From).get_X(), ((((((move.From).get_Y() | 0) + ((move.To).get_Y() | 0)) | 0) / 2) | 0));
      } else {
        this.enPassant = null;
      }
      if (move.IsCastling(this)) {
        var longCastle = ((move.From).get_X() | 0) > ((move.To).get_X() | 0);
        (rookP = rookP.MemberwiseClone(), 
          $T00().prototype._ctor.call(rookP, (
              longCastle
                 ? 0
                 : 7)
            , (
              (((f.Color).valueOf() | 0) === 0)
                 ? 0
                 : 7)
          ));
        this.moveFigure(rookP.MemberwiseClone(), $S00().Construct((
              longCastle
                 ? 3
                 : 5)
            , (move.To).get_Y()));
      }
      if (this.GetFigureAt(move.To).Type !== $T07().None) {
        this.takeFigure(move.To.MemberwiseClone());
      }
      this.moveFigure(move.From.MemberwiseClone(), move.To.MemberwiseClone());
      if (!((f.Type !== $T07().Pawn) || ((((move.To).get_Y() | 0) !== 0) && 
            (((move.To).get_Y() | 0) !== 7)))) {
        if (promote === $T07().None) {
          var dlg = new ($T16())(this.turnColor);
          dlg.ShowDialog();
          promote = dlg.PromoteFigure;
        }
        this.PromoteFigure(move.To, promote);
      }
      if (f.Type === $T07().King) {
        if (f.Color === $T05().White) {
          this.whiteKing = move.To.MemberwiseClone();
        } else {
          this.blackKing = move.To.MemberwiseClone();
        }
      }
      this.turnColor = $thisType.SwapColor(this.turnColor);
      result = true;
    }
    return result;
  }; 

  function BoardState_PromoteFigure (pos, ft) {
    ((this.board).Get(
        pos.get_X(), 
        pos.get_Y()
      ).MemberwiseClone()).Promote(ft);
  }; 

  function BoardState_RemoveCheckMoves (moves, color) {

    for (var i = (((moves.get_Count() | 0) - 1) | 0); i >= 0; i = ((i - 1) | 0)) {
      var temp = this.Clone();
      temp.PlayMove(moves.get_Item(i), $T07().Queen, false);
      if (temp.IsCheck(color)) {
        moves.RemoveAt(i);
      }
    }
  }; 

  function BoardState_SwapColor (color) {
    return $asm00.Chess.ChessColor.$Cast($T05().Black - (color.valueOf() | 0));
  }; 

  function BoardState_takeFigure (pos) {
    ((this.board).Get(
        pos.get_X(), 
        pos.get_Y()
      ).MemberwiseClone()).Empty();
    (this.figures).Remove(pos.MemberwiseClone());
  }; 

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Chess.BoardState", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type), 
      BoardState__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      BoardState__ctor$01
    );

    $.Method({Static:false, Public:true }, "Clone", 
      JSIL.MethodSignature.Return($.Type), 
      BoardState_Clone
    );

    $.Method({Static:false, Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [
          $asm06.TypeRef("System.Drawing.Graphics"), $asm06.TypeRef("System.Drawing.Point"), 
          $asm01.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Drawing.Point")]), $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Tuple`2", [$asm00.TypeRef("Chess.FigureType"), $asm00.TypeRef("Chess.ChessColor")]), $asm06.TypeRef("System.Drawing.Image")])
        ]), 
      BoardState_Draw
    );

    $.Method({Static:false, Public:true }, "GetActiveColor", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Chess.ChessColor")), 
      BoardState_GetActiveColor
    );

    $.Method({Static:false, Public:true }, "GetAllowedMoves", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Chess.Move")])), 
      BoardState_GetAllowedMoves$02
    );

    $.Method({Static:false, Public:true }, "GetAllowedMoves", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Chess.Move")]), [$asm00.TypeRef("Chess.ChessColor")]), 
      BoardState_GetAllowedMoves$03
    );

    $.Method({Static:false, Public:true }, "GetAllowedMoves", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Chess.Move")]), [$asm00.TypeRef("Chess.ChessColor"), $asm01.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.Drawing.Point")])]), 
      BoardState_GetAllowedMoves$04
    );

    $.Method({Static:false, Public:true }, "GetAllowedMoves", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Drawing.Point"), $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Chess.Move")])]), 
      BoardState_GetAllowedMoves$05
    );

    $.Method({Static:false, Public:true }, "GetAttackers", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.Drawing.Point")]), [$asm06.TypeRef("System.Drawing.Point"), $asm00.TypeRef("Chess.ChessColor")]), 
      BoardState_GetAttackers
    );

    $.Method({Static:false, Public:true }, "GetCastlingMoves", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Chess.Move")]), $asm00.TypeRef("Chess.ChessColor")]), 
      BoardState_GetCastlingMoves
    );

    $.Method({Static:false, Public:true }, "GetEnPassant", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Drawing.Point")])), 
      BoardState_GetEnPassant
    );

    $.Method({Static:false, Public:true }, "GetFigureAt", 
      new JSIL.MethodSignature($asm00.TypeRef("Chess.Figure"), [$asm06.TypeRef("System.Drawing.Point")]), 
      BoardState_GetFigureAt
    );

    $.Method({Static:false, Public:true }, "GetFigures", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IList`1", [$asm06.TypeRef("System.Drawing.Point")])), 
      BoardState_GetFigures
    );

    $.Method({Static:false, Public:true }, "GetKing", 
      new JSIL.MethodSignature($asm06.TypeRef("System.Drawing.Point"), [$asm00.TypeRef("Chess.ChessColor")]), 
      BoardState_GetKing
    );

    $.Method({Static:false, Public:true }, "GetKnightMoves", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Chess.Move")]), $asm06.TypeRef("System.Drawing.Point"), 
          $.Boolean
        ]), 
      BoardState_GetKnightMoves
    );

    $.Method({Static:false, Public:true }, "GetMoves", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Chess.Move")]), $asm06.TypeRef("System.Drawing.Point"), 
          $.Int32, $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Drawing.Point")]), 
          $.Boolean
        ]), 
      BoardState_GetMoves
    );

    $.Method({Static:false, Public:true }, "GetNearestFigureInGivenWay", 
      new JSIL.MethodSignature($asm00.TypeRef("Chess.Figure"), [
          $asm06.TypeRef("System.Drawing.Point"), $.Int32, 
          $.Int32, $.Int32
        ]), 
      BoardState_GetNearestFigureInGivenWay
    );

    $.Method({Static:false, Public:true }, "GetPawnMoves", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Chess.Move")]), $asm06.TypeRef("System.Drawing.Point"), 
          $.Boolean, $asm01.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Drawing.Point")])
        ]), 
      BoardState_GetPawnMoves
    );

    $.Method({Static:false, Public:true }, "IsDraw", 
      JSIL.MethodSignature.Return($.Boolean), 
      BoardState_IsDraw
    );

    $.Method({Static:false, Public:true }, "IsFieldAttacked", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.Drawing.Point"), $asm00.TypeRef("Chess.ChessColor")]), 
      BoardState_IsFieldAttacked
    );

    $.Method({Static:false, Public:true }, "IsCheck", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Chess.ChessColor")]), 
      BoardState_IsCheck$06
    );

    $.Method({Static:false, Public:true }, "IsCheck", 
      JSIL.MethodSignature.Return($.Boolean), 
      BoardState_IsCheck$07
    );

    $.Method({Static:false, Public:true }, "IsCheckMate", 
      JSIL.MethodSignature.Return($.Boolean), 
      BoardState_IsCheckMate
    );

    $.Method({Static:true , Public:false}, "max", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32]), 
      BoardState_max
    );

    $.Method({Static:true , Public:false}, "min", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32]), 
      BoardState_min
    );

    $.Method({Static:false, Public:false}, "moveFigure", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Drawing.Point"), $asm06.TypeRef("System.Drawing.Point")]), 
      BoardState_moveFigure
    );

    $.Method({Static:false, Public:true }, "PlayMove", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Chess.Move"), $asm00.TypeRef("Chess.FigureType"), 
          $.Boolean
        ]), 
      BoardState_PlayMove
    );

    $.Method({Static:false, Public:true }, "PromoteFigure", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Drawing.Point"), $asm00.TypeRef("Chess.FigureType")]), 
      BoardState_PromoteFigure
    );

    $.Method({Static:false, Public:false}, "RemoveCheckMoves", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Chess.Move")]), $asm00.TypeRef("Chess.ChessColor")]), 
      BoardState_RemoveCheckMoves
    );

    $.Method({Static:true , Public:true }, "SwapColor", 
      new JSIL.MethodSignature($asm00.TypeRef("Chess.ChessColor"), [$asm00.TypeRef("Chess.ChessColor")]), 
      BoardState_SwapColor
    );

    $.Method({Static:false, Public:false}, "takeFigure", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.Drawing.Point")), 
      BoardState_takeFigure
    );

    $.Field({Static:false, Public:false}, "board", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Chess.Figure"), JSIL.ArrayDimensionParameter(2)]));

    $.Field({Static:false, Public:false}, "turnColor", $asm00.TypeRef("Chess.ChessColor"));

    $.Field({Static:false, Public:false}, "enPassant", $asm01.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Drawing.Point")]));

    $.Field({Static:false, Public:false}, "whiteKing", $asm06.TypeRef("System.Drawing.Point"));

    $.Field({Static:false, Public:false}, "blackKing", $asm06.TypeRef("System.Drawing.Point"));

    $.Field({Static:false, Public:false}, "figures", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.Drawing.Point")]));

    $.Field({Static:true , Public:false}, "knightMatrix", $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Drawing.Point")]), function ($pi) {
        return JSIL.Array.New($asm06.System.Drawing.Point, 8);
      });

    $.Field({Static:true , Public:false}, "diagonalMatrix", $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Drawing.Point")]), function ($pi) {
        return JSIL.Array.New($asm06.System.Drawing.Point, 4);
      });

    $.Field({Static:true , Public:false}, "straightMatrix", $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Drawing.Point")]), function ($pi) {
        return JSIL.Array.New($asm06.System.Drawing.Point, 4);
      });

    $.Field({Static:true , Public:false}, "combinedMatrix", $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Drawing.Point")]), function ($pi) {
        return JSIL.Array.New($asm06.System.Drawing.Point, 8);
      });


    function BoardState__cctor () {
      $thisType.knightMatrix = JSIL.Array.New($T00(), 8);
      $thisType.diagonalMatrix = JSIL.Array.New($T00(), 4);
      $thisType.straightMatrix = JSIL.Array.New($T00(), 4);
      $thisType.combinedMatrix = JSIL.Array.New($T00(), 8);
      $thisType.knightMatrix[0] = $S00().Construct(-1, -2);
      $thisType.knightMatrix[1] = $S00().Construct(2, 0);
      $thisType.knightMatrix[2] = $S00().Construct(1, 1);
      $thisType.knightMatrix[3] = $S00().Construct(0, 2);
      $thisType.knightMatrix[4] = $S00().Construct(-1, 1);
      $thisType.knightMatrix[5] = $S00().Construct(-2, 0);
      $thisType.knightMatrix[6] = $S00().Construct(-1, -1);
      $thisType.knightMatrix[7] = $S00().Construct(0, -2);
      $thisType.diagonalMatrix[0] = $S00().Construct(-1, -1);
      $thisType.diagonalMatrix[1] = $S00().Construct(1, -1);
      $thisType.diagonalMatrix[2] = $S00().Construct(1, 1);
      $thisType.diagonalMatrix[3] = $S00().Construct(-1, 1);
      $thisType.straightMatrix[0] = $S00().Construct(1, 0);
      $thisType.straightMatrix[1] = $S00().Construct(0, 1);
      $thisType.straightMatrix[2] = $S00().Construct(-1, 0);
      $thisType.straightMatrix[3] = $S00().Construct(0, -1);
      $S01().CallStatic($T01(), "Copy", null, 
        $thisType.straightMatrix, 
        0, 
        $thisType.combinedMatrix, 
        0, 
        4
      );
      $S01().CallStatic($T01(), "Copy", null, 
        $thisType.diagonalMatrix, 
        0, 
        $thisType.combinedMatrix, 
        4, 
        4
      );
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      BoardState__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Chess.ChessColor */ 

JSIL.MakeEnum(
  {
    FullName: "Chess.ChessColor", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    White: 0, 
    Black: 1, 
  }
);

/* class Chess.Chessboard */ 

(function Chessboard$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm06.System.Drawing.Color)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Drawing.Font)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.Drawing.FontFamily)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.Tuple$b2.Of($asm00.Chess.FigureType, $asm00.Chess.ChessColor), $asm06.System.Drawing.Image))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm06.System.Drawing.Image)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm06.System.Drawing.Bitmap)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.System.Drawing.Graphics)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm06.System.Drawing.Rectangle)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm06.System.Drawing.GraphicsUnit)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Tuple$b2.Of($asm00.Chess.FigureType, $asm00.Chess.ChessColor))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Chess.FigureType)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Chess.ChessColor)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm06.System.Drawing.Point)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Chess.BoardState)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Chess.Move)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm06.System.Drawing.Rectangle))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm06.System.Drawing.Brush)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm06.System.Drawing.SolidBrush)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm06.System.Drawing.PointF)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm06.System.Drawing.Drawing2D.CompositingMode)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm06.System.Drawing.Drawing2D.CompositingQuality)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm06.System.Drawing.Drawing2D.InterpolationMode)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm06.System.Drawing.Drawing2D.SmoothingMode)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm06.System.Drawing.Drawing2D.PixelOffsetMode)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm06.System.Drawing.Imaging.ImageAttributes)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm06.System.Drawing.Drawing2D.WrapMode)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Drawing.Font, [$asm06.System.Drawing.FontFamily, $asm01.System.Single]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.Tuple$b2.Of($asm00.Chess.FigureType, $asm00.Chess.ChessColor), $asm06.System.Drawing.Image), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Drawing.Bitmap, [$asm01.System.Int32, $asm01.System.Int32]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm06.System.Drawing.Image, $asm06.System.Drawing.Rectangle, 
        $asm06.System.Drawing.Rectangle, $asm06.System.Drawing.GraphicsUnit
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Drawing.Rectangle, [
        $asm01.System.Int32, $asm01.System.Int32, 
        $asm01.System.Int32, $asm01.System.Int32
      ]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Drawing.Point, [$asm01.System.Int32, $asm01.System.Int32]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.System.Collections.Generic.List$b1.Of($asm06.System.Drawing.Rectangle), null))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Drawing.SolidBrush, [$asm06.System.Drawing.Color]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm06.System.Drawing.Brush, System.Array.Of($asm06.System.Drawing.Rectangle)]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.System.String, $asm06.System.Drawing.Font, 
        $asm06.System.Drawing.Brush, $asm06.System.Drawing.PointF
      ]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm06.System.Drawing.Brush, $asm06.System.Drawing.Rectangle]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Drawing.Imaging.ImageAttributes, null))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm06.System.Drawing.Image, $asm06.System.Drawing.Rectangle, 
        $asm01.System.Int32, $asm01.System.Int32, 
        $asm01.System.Int32, $asm01.System.Int32, 
        $asm06.System.Drawing.GraphicsUnit, $asm06.System.Drawing.Imaging.ImageAttributes
      ]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };


  function Chessboard__ctor (white, black) {
    this.black = black;
    this.white = white;
    this.background = $T01().get_Gray();
    this.font = $S00().Construct($T03().get_GenericSerif(), 20);
    this.height = 50;
    this.width = 50;
    this.fontColor = $T01().get_Black();
    this.FigImages = $S01().Construct();
    var img = $T05().FromFile("chess.png");

    for (var i = 1; i < 7; i = ((i + 1) | 0)) {

      for (var j = 0; j < 2; j = ((j + 1) | 0)) {
        var tmp = $S02().Construct((((img.get_Width() | 0) / 6) | 0), (((img.get_Height() | 0) / 2) | 0));
        var g = $T08().FromImage(tmp);
        $S03().CallVirtual("DrawImage", null, g, 
          img, 
          $S04().Construct(0, 0, tmp.get_Width(), tmp.get_Height()), 
          $S04().Construct(Math.imul(tmp.get_Width(), ((i - 1) | 0)), Math.imul(tmp.get_Height(), j), tmp.get_Width(), tmp.get_Height()), 
          $T0A().Pixel
        );
        (this.FigImages).Add(new ($T0B())($T0C().$Cast(i), (
              (j === 0)
                 ? $T0D().White
                 : $T0D().Black)
          ), $thisType.ResizeImage(tmp, 50, 50));
      }
    }
  }; 

  function Chessboard_Click (pos, state) {
    var i = new ($T10())();
    var p = $S05().Construct((((((pos.get_X() | 0) - 100) | 0) / (this.width | 0)) | 0), (((((pos.get_Y() | 0) - 150) | 0) / (this.height | 0)) | 0));
    if (!(((p.get_X() | 0) < 0) || 
        ((p.get_Y() | 0) < 0) || 
        ((p.get_X() | 0) >= 8) || ((p.get_Y() | 0) >= 8))) {
      if (!((this.SelectedField === null) || 
          !$T0E().op_Inequality(JSIL.Nullable_Value(this.SelectedField).MemberwiseClone(), p.MemberwiseClone()) || 
          (((state.GetFigureAt(JSIL.Nullable_Value(this.SelectedField)).Type).valueOf() | 0) === 0) || !state.PlayMove(new ($T10())(JSIL.Nullable_Value(this.SelectedField).MemberwiseClone(), p.MemberwiseClone()), $T0C().None, true))) {
        i = new ($T10())(JSIL.Nullable_Value(this.SelectedField).MemberwiseClone(), p.MemberwiseClone());
        this.SelectedField = null;
        var result = i;
        return result;
      }
      this.SelectedField = p.MemberwiseClone();
    }
    result = null;
    return result;
  }; 

  function Chessboard_Draw (g, pos, state, lastMove) {
    g.Clear(this.background);
    var whiteRects = $S06().Construct();
    var blackRects = $S06().Construct();

    for (var y = 0; y < 8; y = ((y + 1) | 0)) {

      for (var x = 0; x < 8; x = ((x + 1) | 0)) {
        if (((((x + ((y % 2) | 0)) | 0) % 2) | 0) === 1) {
          whiteRects.Add($S04().Construct(((((50 + (pos.get_X() | 0)) | 0) + Math.imul(x, this.width)) | 0), ((((50 + (pos.get_Y() | 0)) | 0) + Math.imul(y, this.height)) | 0), (((this.width | 0) - 1) | 0), (((this.height | 0) - 1) | 0)));
        } else {
          blackRects.Add($S04().Construct(((((50 + (pos.get_X() | 0)) | 0) + Math.imul(x, this.width)) | 0), ((((50 + (pos.get_Y() | 0)) | 0) + Math.imul(y, this.height)) | 0), (((this.width | 0) - 1) | 0), (((this.height | 0) - 1) | 0)));
        }
      }
    }
    var whiteBrush = $S07().Construct(this.white);
    $S08().CallVirtual("FillRectangles", null, g, whiteBrush, $T11().prototype.ToArray.call(whiteRects));
    var blackBrush = $S07().Construct(this.black);
    $S08().CallVirtual("FillRectangles", null, g, blackBrush, $T11().prototype.ToArray.call(blackRects));
    var fontPaddingLeft = (((this.width | 0) / 4) | 0);
    var fontPaddingTop = (((this.height | 0) / 4) | 0);
    var fontBrush = $S07().Construct(this.fontColor);

    for (var i = 0; i < 8; i = ((i + 1) | 0)) {
      $S09().CallVirtual("DrawString", null, g, 
        ($thisType.Cols[i]).toString(), 
        this.font, 
        blackBrush, 
        new ($T14())(+(((((fontPaddingLeft + (pos.get_X() | 0)) | 0) + Math.imul(i, this.width)) | 0) + 50), +(fontPaddingTop + (pos.get_Y() | 0)))
      );
      $S09().CallVirtual("DrawString", null, g, 
        ($thisType.Cols[i]).toString(), 
        this.font, 
        blackBrush, 
        new ($T14())(+(((((fontPaddingLeft + (pos.get_X() | 0)) | 0) + Math.imul(i, this.width)) | 0) + 50), +(((((fontPaddingTop + 50) | 0) + (pos.get_Y() | 0)) | 0) + Math.imul(8, this.height)))
      );
      $S09().CallVirtual("DrawString", null, g, 
        ($thisType.Rows[i]).toString(), 
        this.font, 
        blackBrush, 
        new ($T14())(+(fontPaddingLeft + (pos.get_X() | 0)), +(((((fontPaddingTop + 50) | 0) + (pos.get_Y() | 0)) | 0) + Math.imul(i, this.width)))
      );
      $S09().CallVirtual("DrawString", null, g, 
        ($thisType.Rows[i]).toString(), 
        this.font, 
        blackBrush, 
        new ($T14())(+(((((fontPaddingLeft + (pos.get_X() | 0)) | 0) + 50) | 0) + Math.imul(8, this.width)), +(((((fontPaddingTop + 50) | 0) + (pos.get_Y() | 0)) | 0) + Math.imul(i, this.width)))
      );
    }
    if (this.SelectedField !== null) {
      var selectedBrush = $S07().Construct($T01().FromArgb(127, $T01().get_Orange()));
      $S0A().CallVirtual("FillRectangle", null, g, selectedBrush, $S04().Construct(((((50 + (pos.get_X() | 0)) | 0) + Math.imul((JSIL.Nullable_Value(this.SelectedField)).get_X(), this.width)) | 0), ((((50 + (pos.get_Y() | 0)) | 0) + Math.imul((JSIL.Nullable_Value(this.SelectedField)).get_Y(), this.height)) | 0), (((this.width | 0) - 1) | 0), (((this.height | 0) - 1) | 0)));
    }
    if (lastMove !== null) {
      var moveBrush = $S07().Construct($T01().FromArgb(127, $T01().get_Blue()));
      $S0A().CallVirtual("FillRectangle", null, g, moveBrush, $S04().Construct(((((50 + (pos.get_X() | 0)) | 0) + Math.imul((JSIL.Nullable_Value(lastMove).To).get_X(), this.width)) | 0), ((((50 + (pos.get_Y() | 0)) | 0) + Math.imul((JSIL.Nullable_Value(lastMove).To).get_Y(), this.height)) | 0), (((this.width | 0) - 1) | 0), (((this.height | 0) - 1) | 0)));
      $S0A().CallVirtual("FillRectangle", null, g, moveBrush, $S04().Construct(((((50 + (pos.get_X() | 0)) | 0) + Math.imul((JSIL.Nullable_Value(lastMove).From).get_X(), this.width)) | 0), ((((50 + (pos.get_Y() | 0)) | 0) + Math.imul((JSIL.Nullable_Value(lastMove).From).get_Y(), this.height)) | 0), (((this.width | 0) - 1) | 0), (((this.height | 0) - 1) | 0)));
    }
    state.Draw(g, $S05().Construct(50, 100), this.SelectedField, this.FigImages);
  }; 

  function Chessboard_ResizeImage (image, width, height) {
    var destRect = $S04().Construct(0, 0, width, height);
    var destImage = $S02().Construct(width, height);
    destImage.SetResolution(
      image.get_HorizontalResolution(), 
      image.get_VerticalResolution()
    );
    var graphics = $T08().FromImage(destImage);
    try {
      graphics.set_CompositingMode($T15().SourceCopy);
      graphics.set_CompositingQuality($T16().HighQuality);
      graphics.set_InterpolationMode($T17().HighQualityBicubic);
      graphics.set_SmoothingMode($T18().HighQuality);
      graphics.set_PixelOffsetMode($T19().HighQuality);
      var wrapMode = $S0B().Construct();
      try {
        wrapMode.SetWrapMode($T1B().TileFlipXY);
        $S0C().CallVirtual("DrawImage", null, graphics, 
          image, 
          destRect.MemberwiseClone(), 
          0, 
          0, 
          image.get_Width(), 
          image.get_Height(), 
          $T0A().Pixel, 
          wrapMode
        );
      } finally {
        if (wrapMode !== null) {
          $IM00().Call(wrapMode, null);
        }
      }
    } finally {
      if (graphics !== null) {
        $IM00().Call(graphics, null);
      }
    }
    return destImage;
  }; 

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Chess.Chessboard", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Drawing.Color"), $asm06.TypeRef("System.Drawing.Color")]), 
      Chessboard__ctor
    );

    $.Method({Static:false, Public:true }, "Click", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Chess.Move")]), [$asm06.TypeRef("System.Drawing.Point"), $asm00.TypeRef("Chess.BoardState")]), 
      Chessboard_Click
    );

    $.Method({Static:false, Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [
          $asm06.TypeRef("System.Drawing.Graphics"), $asm06.TypeRef("System.Drawing.Point"), 
          $asm00.TypeRef("Chess.BoardState"), $asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Chess.Move")])
        ]), 
      Chessboard_Draw
    );

    $.Method({Static:true , Public:true }, "ResizeImage", 
      new JSIL.MethodSignature($asm06.TypeRef("System.Drawing.Bitmap"), [
          $asm06.TypeRef("System.Drawing.Image"), $.Int32, 
          $.Int32
        ]), 
      Chessboard_ResizeImage
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Rows", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Cols", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:false}, "white", $asm06.TypeRef("System.Drawing.Color"));

    $.Field({Static:false, Public:false}, "black", $asm06.TypeRef("System.Drawing.Color"));

    $.Field({Static:false, Public:false}, "background", $asm06.TypeRef("System.Drawing.Color"));

    $.Field({Static:false, Public:false}, "font", $asm06.TypeRef("System.Drawing.Font"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "width", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "height", $.Int32);

    $.Field({Static:false, Public:false}, "fontColor", $asm06.TypeRef("System.Drawing.Color"));

    $.Field({Static:false, Public:false}, "SelectedField", $asm01.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Drawing.Point")]));

    $.Field({Static:false, Public:false}, "FigImages", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Tuple`2", [$asm00.TypeRef("Chess.FigureType"), $asm00.TypeRef("Chess.ChessColor")]), $asm06.TypeRef("System.Drawing.Image")]));


    function Chessboard__cctor () {
      $thisType.Rows = JSIL.Array.New($T00(), ["1", "2", "3", "4", "5", "6", "7", "8"]);
      $thisType.Cols = JSIL.Array.New($T00(), ["A", "B", "C", "D", "E", "F", "G", "H"]);
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Chessboard__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Chess.ChessTimer */ 

(function ChessTimer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.DateTime)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Drawing.Graphics)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.Drawing.Point)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm06.System.Drawing.Font)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm06.System.Drawing.FontFamily)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.System.Drawing.SolidBrush)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm06.System.Drawing.Color)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm06.System.Drawing.PointF)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.System.String, $asm06.System.Drawing.Font, 
        $asm06.System.Drawing.Brush, $asm06.System.Drawing.PointF
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Drawing.Font, [$asm06.System.Drawing.FontFamily, $asm01.System.Single]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Drawing.SolidBrush, [$asm06.System.Drawing.Color]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm01.System.TimeSpan, [$asm01.System.DateTime, $asm01.System.DateTime]))) ();
  };


  function ChessTimer__ctor (white, black) {
    this.lastUpdate = $T01().get_Now().MemberwiseClone();
    this.white = white.MemberwiseClone();
    this.black = black.MemberwiseClone();
    this.whiteOnMove = true;
  }; 

  function ChessTimer_BlackLostByTime () {
    return $T00().op_LessThanOrEqual(this.black.MemberwiseClone(), $T00().Zero.MemberwiseClone());
  }; 

  function ChessTimer_Draw (g, pos) {
    $S00().CallVirtual("DrawString", null, g, 
      $T04().Format(
        "White left: {0} Black left: {1}", 
        (this.white).toString(), 
        (this.black).toString()
      ), 
      $S01().Construct($T07().get_GenericSerif(), 20), 
      $S02().Construct($T09().get_Black()), 
      new ($T0A())(+(pos.get_X()), +(pos.get_Y()))
    );
  }; 

  function ChessTimer_GetBlackTimeLeft () {
    return this.black;
  }; 

  function ChessTimer_GetElapsedTime () {
    var ret = $S03().CallStatic($T01(), "op_Subtraction", null, $T01().get_Now(), this.lastUpdate).MemberwiseClone();
    this.lastUpdate = $T01().get_Now().MemberwiseClone();
    return ret;
  }; 

  function ChessTimer_GetWhiteTimeLeft () {
    return this.white;
  }; 

  function ChessTimer_IsWhiteMove () {
    return this.whiteOnMove;
  }; 

  function ChessTimer_Move () {
    if (!this.Update()) {
      this.whiteOnMove = !this.whiteOnMove;
      var result = false;
    } else {
      result = true;
    }
    return result;
  }; 

  function ChessTimer_WhiteLostByTime () {
    return $T00().op_LessThanOrEqual(this.white.MemberwiseClone(), $T00().Zero.MemberwiseClone());
  }; 

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Chess.ChessTimer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.TimeSpan"), $asm01.TypeRef("System.TimeSpan")]), 
      ChessTimer__ctor
    );

    $.Method({Static:false, Public:true }, "BlackLostByTime", 
      JSIL.MethodSignature.Return($.Boolean), 
      ChessTimer_BlackLostByTime
    );

    $.Method({Static:false, Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Drawing.Graphics"), $asm06.TypeRef("System.Drawing.Point")]), 
      ChessTimer_Draw
    );

    $.Method({Static:false, Public:true }, "GetBlackTimeLeft", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.TimeSpan")), 
      ChessTimer_GetBlackTimeLeft
    );

    $.Method({Static:false, Public:false}, "GetElapsedTime", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.TimeSpan")), 
      ChessTimer_GetElapsedTime
    );

    $.Method({Static:false, Public:true }, "GetWhiteTimeLeft", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.TimeSpan")), 
      ChessTimer_GetWhiteTimeLeft
    );

    $.Method({Static:false, Public:true }, "IsWhiteMove", 
      JSIL.MethodSignature.Return($.Boolean), 
      ChessTimer_IsWhiteMove
    );

    $.Method({Static:false, Public:true }, "Move", 
      JSIL.MethodSignature.Return($.Boolean), 
      ChessTimer_Move
    );

    $.Method({Static:false, Public:true }, "WhiteLostByTime", 
      JSIL.MethodSignature.Return($.Boolean), 
      ChessTimer_WhiteLostByTime
    );

    $.Field({Static:false, Public:false}, "white", $asm01.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "black", $asm01.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "whiteOnMove", $.Boolean);

    $.Field({Static:false, Public:false}, "lastUpdate", $asm01.TypeRef("System.DateTime"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Chess.SuddenDeath */ 

(function SuddenDeath$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Chess.ChessTimer)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };


  function SuddenDeath__ctor (white, black) {
    $T01().prototype._ctor.call(this, white.MemberwiseClone(), black.MemberwiseClone());
  }; 

  function SuddenDeath_Update () {
    if (!(!this.WhiteLostByTime() && !this.BlackLostByTime())) {
      var result = true;
    } else {
      var totalSecs = ((+(this.white).get_TotalSeconds() + +(this.black).get_TotalSeconds()) | 0);
      var elapsed = this.GetElapsedTime().MemberwiseClone();
      if (this.whiteOnMove) {
        this.white = $T00().op_Subtraction(this.white, elapsed).MemberwiseClone();
      } else {
        this.black = $T00().op_Subtraction(this.black, elapsed).MemberwiseClone();
      }
      result = ((+(this.white).get_TotalSeconds() + +(this.black).get_TotalSeconds()) | 0) !== totalSecs;
    }
    return result;
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Chess.ChessTimer"), 
      Name: "Chess.SuddenDeath", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.TimeSpan"), $asm01.TypeRef("System.TimeSpan")]), 
      SuddenDeath__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Update", 
      JSIL.MethodSignature.Return($.Boolean), 
      SuddenDeath_Update
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Chess.Hourglass */ 

(function Hourglass$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Chess.ChessTimer)) ();
  };


  function Hourglass__ctor (white, black) {
    $T01().prototype._ctor.call(this, white.MemberwiseClone(), black.MemberwiseClone());
  }; 

  function Hourglass_Update () {
    var elapsed = this.GetElapsedTime().MemberwiseClone();
    if (this.whiteOnMove) {
      this.white = $T00().op_Subtraction(this.white, elapsed).MemberwiseClone();
    } else {
      this.black = $T00().op_Subtraction(this.black, elapsed).MemberwiseClone();
    }
    return ($T00().op_LessThanOrEqual(this.black.MemberwiseClone(), $T00().Zero.MemberwiseClone()) || $T00().op_LessThanOrEqual(this.white.MemberwiseClone(), $T00().Zero.MemberwiseClone()));
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Chess.ChessTimer"), 
      Name: "Chess.Hourglass", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.TimeSpan"), $asm01.TypeRef("System.TimeSpan")]), 
      Hourglass__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Update", 
      JSIL.MethodSignature.Return($.Boolean), 
      Hourglass_Update
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Chess.Figure */ 

(function Figure$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Chess.FigureType)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Chess.ChessColor)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Drawing.Graphics)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.Drawing.Point)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm06.System.Drawing.Image)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Chess.Chessboard)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm06.System.Drawing.Image, $asm06.System.Drawing.Point]))) ();
  };


  function Figure__ctor (type, color) {
    this.Type = type;
    this.Color = color;
    this.HasMoved = false;
  }; 

  function Figure_Draw (g, pos, img) {
    $S00().CallVirtual("DrawImage", null, g, img, pos.MemberwiseClone());
  }; 

  function Figure_Empty () {
    this.Type = $T00().None;
    this.Color = $T01().White;
    this.HasMoved = false;
  }; 

  function Figure_GetFigurePrice () {
    switch ((this.Type).valueOf()) {
      case 0: 
        var result = 0;
        break;

      case 1: 
        result = 1000;
        break;

      case 2: 
        result = 9;
        break;

      case 3: 
        result = 3;
        break;

      case 4: 
        result = 3;
        break;

      case 5: 
        result = 5;
        break;

      case 6: 
        result = 1;
        break;

      default: 
        result = 0;
        break;

    }
    return result;
  }; 

  function Figure_IsEmpty () {
    return (this.Type === $T00().None);
  }; 

  function Figure_Promote (promoteTo) {
    this.Type = promoteTo;
  }; 

  function Figure_ToString (pos) {
    return $T06().Format("{0} {1} at {2}{3}", JSIL.Array.New($T07(), [(this.Color).toString(), (this.Type).toString(), $T09().$Box($T08().Cols[pos.get_Y()]), $T09().$Box($T08().Rows[pos.get_X()])]));
  }; 

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Chess.Figure", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Chess.FigureType"), $asm00.TypeRef("Chess.ChessColor")]), 
      Figure__ctor
    );

    $.Method({Static:false, Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [
          $asm06.TypeRef("System.Drawing.Graphics"), $asm06.TypeRef("System.Drawing.Point"), 
          $asm06.TypeRef("System.Drawing.Image")
        ]), 
      Figure_Draw
    );

    $.Method({Static:false, Public:true }, "Empty", 
      JSIL.MethodSignature.Void, 
      Figure_Empty
    );

    $.Method({Static:false, Public:true }, "GetFigurePrice", 
      JSIL.MethodSignature.Return($.Int32), 
      Figure_GetFigurePrice
    );

    $.Method({Static:false, Public:true }, "IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean), 
      Figure_IsEmpty
    );

    $.Method({Static:false, Public:true }, "Promote", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Chess.FigureType")), 
      Figure_Promote
    );

    $.Method({Static:false, Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm06.TypeRef("System.Drawing.Point")]), 
      Figure_ToString
    );

    $.Field({Static:false, Public:true }, "Type", $asm00.TypeRef("Chess.FigureType"));

    $.Field({Static:false, Public:true }, "Color", $asm00.TypeRef("Chess.ChessColor"));

    $.Field({Static:false, Public:true }, "HasMoved", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Chess.FigureType */ 

JSIL.MakeEnum(
  {
    FullName: "Chess.FigureType", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    King: 1, 
    Queen: 2, 
    Bishop: 3, 
    Knight: 4, 
    Rook: 5, 
    Pawn: 6, 
  }
);

/* class Chess.Form1 */ 

(function Form1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.System.Windows.Forms.Form)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.EventArgs)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.System.Windows.Forms.Control)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.System.Windows.Forms.MouseEventArgs)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Chess.Game)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.System.Drawing.Point)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm08.System.Windows.Forms.PaintEventArgs)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm02.System.ComponentModel.Container)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm02.System.ComponentModel.ComponentResourceManager)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm08.System.Windows.Forms.Timer)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm08.System.Windows.Forms.Label)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm08.System.Windows.Forms.MenuStrip)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm08.System.Windows.Forms.ToolStripMenuItem)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.EventHandler)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm06.System.Drawing.Font)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm06.System.Drawing.FontStyle)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm06.System.Drawing.GraphicsUnit)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm06.System.Drawing.Size)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm08.System.Windows.Forms.ToolStripItemCollection)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm08.System.Windows.Forms.ToolStrip)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm08.System.Windows.Forms.ToolStripItem)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm08.System.Windows.Forms.ToolStripDropDownItem)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm08.System.Windows.Forms.ContainerControl)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm06.System.Drawing.SizeF)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm08.System.Windows.Forms.AutoScaleMode)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm08.System.Windows.Forms.Control_ControlCollection)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm06.System.Drawing.Icon)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm01.System.Resources.ResourceManager)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm08.System.Windows.Forms.PaintEventHandler)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm08.System.Windows.Forms.MouseEventHandler)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm08.System.Windows.Forms.OpenFileDialog)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm08.System.Windows.Forms.FileDialog)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm01.System.IO.Path)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm08.System.Windows.Forms.Application)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm08.System.Windows.Forms.CommonDialog)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm08.System.Windows.Forms.DialogResult)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm08.System.Windows.Forms.MessageBox)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm08.System.Windows.Forms.MessageBoxButtons)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm08.System.Windows.Forms.SaveFileDialog)) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm01.System.IO.Directory)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Drawing.Point, [$asm01.System.Int32, $asm01.System.Int32]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.ComponentModel.ComponentResourceManager, [$asm01.System.Type]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.System.Windows.Forms.Timer, [$asm02.System.ComponentModel.IContainer]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.System.Windows.Forms.ToolStripMenuItem, null))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.System.Object, $asm01.System.EventArgs]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Drawing.Font, [
        $asm01.System.String, $asm01.System.Single, 
        $asm06.System.Drawing.FontStyle, $asm06.System.Drawing.GraphicsUnit, 
        $asm01.System.Byte
      ]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Drawing.Size, [$asm01.System.Int32, $asm01.System.Int32]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm08.TypeRef("System.Windows.Forms.ToolStripItem")])))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.System.Object, $asm01.System.EventArgs]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.System.Object, $asm01.System.EventArgs]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.System.Object, $asm01.System.EventArgs]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Drawing.SizeF, [$asm01.System.Single, $asm01.System.Single]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(JSIL.MethodSignature.Return($asm08.TypeRef("System.Windows.Forms.Control+ControlCollection")))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.System.Object, $asm01.System.EventArgs]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.System.Object, $asm08.System.Windows.Forms.PaintEventArgs]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(JSIL.MethodSignature.Action($asm08.TypeRef("System.Windows.Forms.MouseEventHandler")))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.System.Object, $asm08.System.Windows.Forms.MouseEventArgs]))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(new JSIL.MethodSignature($asm08.System.Windows.Forms.DialogResult, [
        $asm01.System.String, $asm01.System.String, 
        $asm08.System.Windows.Forms.MessageBoxButtons
      ]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };


  function Form1__ctor () {
    this.components = null;
    $T00().prototype._ctor.call(this);
    this.InitializeComponent();
  }; 

  function Form1_Dispose$00 (disposing) {
    if (!(!disposing || (this.components === null))) {
      $IM00().Call(this.components, null);
    }
    $T00().prototype.Dispose.call(this, disposing);
  }; 

  function Form1_Form1_Load (sender, e) {
    $T05().prototype.set_Width.call(this, 640);
    $T05().prototype.set_Height.call(this, 640);
    this.StartGame();
  }; 

  function Form1_Form1_MouseClick (sender, e) {
    (this.game).Click($S00().Construct(e.get_X(), e.get_Y()));
    this.Invalidate();
  }; 

  function Form1_Form1_Paint (sender, e) {
    (this.game).Draw(e.get_Graphics(), this.label1, this.label2, this);
  }; 

  function Form1_InitializeComponent () {
    this.components = new ($T0A())();
    var resources = $S01().Construct($thisType.__Type__);
    this.timer1 = $S02().Construct(this.components);
    this.label1 = new ($T0D())();
    this.label2 = new ($T0D())();
    this.menuStrip1 = new ($T0E())();
    this.gameToolStripMenuItem = $S03().Construct();
    this.newToolStripMenuItem = $S03().Construct();
    this.saveToolStripMenuItem = $S03().Construct();
    this.loadToolStripMenuItem = $S03().Construct();
    this.exitToolStripMenuItem = $S03().Construct();
    this.settingsToolStripMenuItem = $S03().Construct();
    this.boardSettingsToolStripMenuItem = $S03().Construct();
    this.playerSettingsToolStripMenuItem = $S03().Construct();
    this.timerSettingsToolStripMenuItem = $S03().Construct();
    this.aboutToolStripMenuItem = $S03().Construct();
    this.helpToolStripMenuItem = $S03().Construct();
    (this.menuStrip1).SuspendLayout();
    this.SuspendLayout();
    (this.timer1).set_Enabled(true);
    (this.timer1).set_Interval(500);
    (this.timer1).add_Tick($T10().New(this, null, new JSIL.MethodPointerInfo($thisType, "timer1_Tick", $S04(), false, false)));
    (this.label1).set_AutoSize(true);
    (this.label1).set_Font($S05().Construct("Microsoft Sans Serif", 14.25, $T12().Regular, $T13().Point, 0));
    (this.label1.Location = $S00().Construct(12, 24));
    (this.label1).set_Name("label1");
    (this.label1.Size = $S06().Construct(15, 24));
    (this.label1).set_TabIndex(0);
    (this.label1).set_Text(" ");
    (this.label2).set_AutoSize(true);
    (this.label2).set_Font($S05().Construct("Microsoft Sans Serif", 14.25, $T12().Regular, $T13().Point, 0));
    (this.label2.Location = $S00().Construct(12, 48));
    (this.label2).set_Name("label2");
    (this.label2.Size = $S06().Construct(15, 24));
    (this.label2).set_TabIndex(1);
    (this.label2).set_Text(" ");
    $S07().CallVirtual("AddRange", null, (this.menuStrip1).get_Items(), JSIL.Array.New($T17(), [this.gameToolStripMenuItem, this.settingsToolStripMenuItem, this.aboutToolStripMenuItem]));
    (this.menuStrip1.Location = $S00().Construct(0, 0));
    (this.menuStrip1).set_Name("menuStrip1");
    (this.menuStrip1.Size = $S06().Construct(445, 24));
    (this.menuStrip1).set_TabIndex(2);
    (this.menuStrip1).set_Text("menuStrip1");
    $S07().CallVirtual("AddRange", null, (this.gameToolStripMenuItem).get_DropDownItems(), JSIL.Array.New($T17(), [this.newToolStripMenuItem, this.saveToolStripMenuItem, this.loadToolStripMenuItem, this.exitToolStripMenuItem]));
    (this.gameToolStripMenuItem).set_Name("gameToolStripMenuItem");
    (this.gameToolStripMenuItem.Size = $S06().Construct(50, 20));
    (this.gameToolStripMenuItem).set_Text("&Game");
    (this.newToolStripMenuItem).set_Name("newToolStripMenuItem");
    (this.newToolStripMenuItem.Size = $S06().Construct(152, 22));
    (this.newToolStripMenuItem).set_Text("&New");
    (this.newToolStripMenuItem).add_Click($T10().New(this, null, new JSIL.MethodPointerInfo($thisType, "newToolStripMenuItem_Click", $S08(), false, false)));
    (this.saveToolStripMenuItem).set_Name("saveToolStripMenuItem");
    (this.saveToolStripMenuItem.Size = $S06().Construct(152, 22));
    (this.saveToolStripMenuItem).set_Text("&Save");
    (this.saveToolStripMenuItem).add_Click($T10().New(this, null, new JSIL.MethodPointerInfo($thisType, "saveToolStripMenuItem_Click", $S09(), false, false)));
    (this.loadToolStripMenuItem).set_Name("loadToolStripMenuItem");
    (this.loadToolStripMenuItem.Size = $S06().Construct(152, 22));
    (this.loadToolStripMenuItem).set_Text("&Load");
    (this.loadToolStripMenuItem).add_Click($T10().New(this, null, new JSIL.MethodPointerInfo($thisType, "loadToolStripMenuItem_Click", $S0A(), false, false)));
    (this.exitToolStripMenuItem).set_Name("exitToolStripMenuItem");
    (this.exitToolStripMenuItem.Size = $S06().Construct(152, 22));
    (this.exitToolStripMenuItem).set_Text("&Exit");
    $S07().CallVirtual("AddRange", null, (this.settingsToolStripMenuItem).get_DropDownItems(), JSIL.Array.New($T17(), [this.boardSettingsToolStripMenuItem, this.playerSettingsToolStripMenuItem, this.timerSettingsToolStripMenuItem]));
    (this.settingsToolStripMenuItem).set_Name("settingsToolStripMenuItem");
    (this.settingsToolStripMenuItem.Size = $S06().Construct(61, 20));
    (this.settingsToolStripMenuItem).set_Text("S&ettings");
    (this.boardSettingsToolStripMenuItem).set_Name("boardSettingsToolStripMenuItem");
    (this.boardSettingsToolStripMenuItem.Size = $S06().Construct(150, 22));
    (this.boardSettingsToolStripMenuItem).set_Text("&Board settings");
    (this.playerSettingsToolStripMenuItem).set_Name("playerSettingsToolStripMenuItem");
    (this.playerSettingsToolStripMenuItem.Size = $S06().Construct(150, 22));
    (this.playerSettingsToolStripMenuItem).set_Text("&Player settings");
    (this.timerSettingsToolStripMenuItem).set_Name("timerSettingsToolStripMenuItem");
    (this.timerSettingsToolStripMenuItem.Size = $S06().Construct(150, 22));
    (this.timerSettingsToolStripMenuItem).set_Text("&Timer settings");
    $S07().CallVirtual("AddRange", null, (this.aboutToolStripMenuItem).get_DropDownItems(), JSIL.Array.New($T17(), [this.helpToolStripMenuItem]));
    (this.aboutToolStripMenuItem).set_Name("aboutToolStripMenuItem");
    (this.aboutToolStripMenuItem.Size = $S06().Construct(52, 20));
    (this.aboutToolStripMenuItem).set_Text("&About");
    (this.helpToolStripMenuItem).set_Name("helpToolStripMenuItem");
    (this.helpToolStripMenuItem.Size = $S06().Construct(99, 22));
    (this.helpToolStripMenuItem).set_Text("&Help");
    (this.ContainerControl$AutoScaleDimensions = $S0B().Construct(6, 13));
    this.set_AutoScaleMode($T1B().Font);
    (this.Form$ClientSize = $S06().Construct(445, 262));
    ($S0C().Call($T05().prototype, "get_Controls", null, this)).Add(this.label2);
    ($S0C().Call($T05().prototype, "get_Controls", null, this)).Add(this.label1);
    ($S0C().Call($T05().prototype, "get_Controls", null, this)).Add(this.menuStrip1);
    $T00().prototype.set_Icon.call(this, $T1D().$Cast(resources.GetObject("$this.Icon")));
    this.set_MainMenuStrip(this.menuStrip1);
    $T05().prototype.set_Name.call(this, "Form1");
    this.set_Text("Chess");
    this.add_Load($T10().New(this, null, new JSIL.MethodPointerInfo($thisType, "Form1_Load", $S0D(), false, false)));
    $T05().prototype.add_Paint.call(this, $T1F().New(this, null, new JSIL.MethodPointerInfo($thisType, "Form1_Paint", $S0E(), false, false)));
    $S0F().Call($T05().prototype, "add_MouseClick", null, this, $T20().New(this, null, new JSIL.MethodPointerInfo($thisType, "Form1_MouseClick", $S10(), false, false)));
    (this.menuStrip1).ResumeLayout(false);
    (this.menuStrip1).PerformLayout();
    this.ResumeLayout(false);
    this.PerformLayout();
  }; 

  function Form1_loadToolStripMenuItem_Click (sender, e) {
    var dlg = new ($T21())();
    try {
      dlg.set_DefaultExt("chess");
      dlg.set_InitialDirectory($T23().Combine($T23().GetDirectoryName($T24().get_ExecutablePath()), "games"));
      dlg.ShowDialog();
      if (dlg.get_FileName() != "") {
        (this.game).Load(dlg.get_FileName());
      }
    } finally {
      if (dlg !== null) {
        $IM00().Call(dlg, null);
      }
    }
    this.Invalidate();
  }; 

  function Form1_newToolStripMenuItem_Click (sender, e) {
    if ($T27().Yes === $S11().CallStatic($T28(), "Show", null, "Do you want to start a new game?", "New game?", $T29().YesNo)) {
      this.game = new ($T07())(true, false);
    }
    this.Invalidate();
  }; 

  function Form1_saveToolStripMenuItem_Click (sender, e, $exception) {
    try {
      var dlg = new ($T2B())();
      try {
        dlg.set_DefaultExt("chess");
        var dir = $T23().Combine($T23().GetDirectoryName($T24().get_ExecutablePath()), "games");
        if (!$T2C().Exists(dir)) {
          $T2C().CreateDirectory($T23().Combine($T23().GetDirectoryName($T24().get_ExecutablePath()), "games"));
        }
        dlg.set_InitialDirectory(dir);
        dlg.ShowDialog();
        if (dlg.get_FileName() != "") {
          (this.game).Save(dlg.get_FileName());
        }
      } finally {
        if (dlg !== null) {
          $IM00().Call(dlg, null);
        }
      }
    } catch ($exception) {
      $T28().Show("Error while saving!");
    }
  }; 

  function Form1_StartGame () {
    this.game = new ($T07())(true, false);
  }; 

  function Form1_timer1_Tick (sender, e) {
    if ((this.game).Tick()) {
      this.Invalidate();
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Windows.Forms.Form"), 
      Name: "Chess.Form1", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Form1__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean), 
      Form1_Dispose$00
    );

    $.Method({Static:false, Public:false}, "Form1_Load", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("System.EventArgs")]), 
      Form1_Form1_Load
    );

    $.Method({Static:false, Public:false}, "Form1_MouseClick", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("System.Windows.Forms.MouseEventArgs")]), 
      Form1_Form1_MouseClick
    );

    $.Method({Static:false, Public:false}, "Form1_Paint", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("System.Windows.Forms.PaintEventArgs")]), 
      Form1_Form1_Paint
    );

    $.Method({Static:false, Public:false}, "InitializeComponent", 
      JSIL.MethodSignature.Void, 
      Form1_InitializeComponent
    );

    $.Method({Static:false, Public:false}, "loadToolStripMenuItem_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("System.EventArgs")]), 
      Form1_loadToolStripMenuItem_Click
    );

    $.Method({Static:false, Public:false}, "newToolStripMenuItem_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("System.EventArgs")]), 
      Form1_newToolStripMenuItem_Click
    );

    $.Method({Static:false, Public:false}, "saveToolStripMenuItem_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("System.EventArgs")]), 
      Form1_saveToolStripMenuItem_Click
    );

    $.Method({Static:false, Public:false}, "StartGame", 
      JSIL.MethodSignature.Void, 
      Form1_StartGame
    );

    $.Method({Static:false, Public:false}, "timer1_Tick", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("System.EventArgs")]), 
      Form1_timer1_Tick
    );

    $.Field({Static:false, Public:false}, "game", $asm00.TypeRef("Chess.Game"));

    $.Field({Static:false, Public:false}, "components", $asm02.TypeRef("System.ComponentModel.IContainer"));

    $.Field({Static:false, Public:false}, "timer1", $asm08.TypeRef("System.Windows.Forms.Timer"));

    $.Field({Static:false, Public:false}, "label1", $asm08.TypeRef("System.Windows.Forms.Label"));

    $.Field({Static:false, Public:false}, "label2", $asm08.TypeRef("System.Windows.Forms.Label"));

    $.Field({Static:false, Public:false}, "menuStrip1", $asm08.TypeRef("System.Windows.Forms.MenuStrip"));

    $.Field({Static:false, Public:false}, "gameToolStripMenuItem", $asm08.TypeRef("System.Windows.Forms.ToolStripMenuItem"));

    $.Field({Static:false, Public:false}, "newToolStripMenuItem", $asm08.TypeRef("System.Windows.Forms.ToolStripMenuItem"));

    $.Field({Static:false, Public:false}, "saveToolStripMenuItem", $asm08.TypeRef("System.Windows.Forms.ToolStripMenuItem"));

    $.Field({Static:false, Public:false}, "loadToolStripMenuItem", $asm08.TypeRef("System.Windows.Forms.ToolStripMenuItem"));

    $.Field({Static:false, Public:false}, "exitToolStripMenuItem", $asm08.TypeRef("System.Windows.Forms.ToolStripMenuItem"));

    $.Field({Static:false, Public:false}, "settingsToolStripMenuItem", $asm08.TypeRef("System.Windows.Forms.ToolStripMenuItem"));

    $.Field({Static:false, Public:false}, "boardSettingsToolStripMenuItem", $asm08.TypeRef("System.Windows.Forms.ToolStripMenuItem"));

    $.Field({Static:false, Public:false}, "playerSettingsToolStripMenuItem", $asm08.TypeRef("System.Windows.Forms.ToolStripMenuItem"));

    $.Field({Static:false, Public:false}, "timerSettingsToolStripMenuItem", $asm08.TypeRef("System.Windows.Forms.ToolStripMenuItem"));

    $.Field({Static:false, Public:false}, "aboutToolStripMenuItem", $asm08.TypeRef("System.Windows.Forms.ToolStripMenuItem"));

    $.Field({Static:false, Public:false}, "helpToolStripMenuItem", $asm08.TypeRef("System.Windows.Forms.ToolStripMenuItem"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Chess.Game */ 

(function Game$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Chess.Move))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Chess.Chessboard)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.Drawing.Color)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Chess.BoardState)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Chess.AI)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Chess.ChessColor)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Chess.Player)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.System.Drawing.Point)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm06.System.Drawing.Graphics)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm08.System.Windows.Forms.Label)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Chess.Form1)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Chess.Move)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm04.System.Linq.Enumerable)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm08.System.Windows.Forms.Control)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.IO.StreamReader)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.System.IO.TextReader)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize(System.Array.Of($asm01.System.Char))) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm08.System.Windows.Forms.MessageBox)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.Char))) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Char))) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm00.Chess.FigureType)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm01.System.IO.StreamWriter)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm01.System.IO.TextWriter)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.System.Collections.Generic.List$b1.Of($asm00.Chess.Move), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.Chess.BoardState, null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm01.System.Boolean, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Drawing.Point, [$asm01.System.Int32, $asm01.System.Int32]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.System.IO.StreamReader, [$asm01.System.String]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.System.IO.StreamWriter, [$asm01.System.String]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.System.String, $asm01.System.Object]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.String")))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };


  function Game__ctor (computerP1, computerP2) {
    this.moveHistory = $S00().Construct();
    this.board = new ($T02())($T03().FromArgb(200, 200, 200), $T03().FromArgb(50, 50, 50));
    this.state = $S01().Construct();
    if (computerP1) {
      this.whitePlayer = new ($T05())(this.state, $T06().White);
    } else {
      this.whitePlayer = new ($T07())("Player", $T06().White, true);
    }
    if (computerP2) {
      this.blackPlayer = new ($T05())(this.state, $T06().Black);
    } else {
      this.blackPlayer = new ($T07())("Player", $T06().Black, true);
    }
    this.turnColor = $T06().White;
  }; 

  function Game_Click (pos) {
    if ((this.GetActivePlayer()).IsHuman()) {
      var move = (this.board).Click(pos, this.state);
      if (move !== null) {
        (this.moveHistory).Add(JSIL.Nullable_Value(move).MemberwiseClone());
      }
      this.turnColor = (this.state).GetActiveColor();
    }
  }; 

  function Game_Draw (g, p1, p2, frm) {
    var lastMove = null;
    if ($S02().CallStatic($T0D(), "Any$b1", [$asm00.Chess.Move], this.moveHistory)) {
      lastMove = $S03().CallStatic($T0D(), "Last$b1", [$asm00.Chess.Move], this.moveHistory);
    }
    (this.board).Draw(g, $S04().Construct(50, 100), this.state, lastMove);
    (this.whitePlayer).Draw(p1);
    (this.blackPlayer).Draw(p2);
    if ((this.state).IsDraw()) {
      var gameState = "draw";
    } else if ((this.state).IsCheckMate()) {
      gameState = $T0E().Format("{0} lost by checkmate", ((this.GetActivePlayer()).GetName()).toString());
    } else if ((this.state).IsCheck()) {
      gameState = $T0E().Format("{0} in check", ((this.GetActivePlayer()).GetName()).toString());
    } else {
      gameState = $T0E().Format(
        "{1} {0} on move", 
        ((this.GetActivePlayer()).GetName()).toString(), 
        (this.state).GetActiveColor()
      );
    }
    frm.set_Text($T0E().Format("Chess - {0} vs {1} - turn {2} - {3}", JSIL.Array.New($T0F(), [(this.whitePlayer).GetName(), (this.blackPlayer).GetName(), $T11().$Box(this.GetTurnId()), gameState])));
  }; 

  function Game_GetActivePlayer () {
    return (
      (((this.turnColor).valueOf() | 0) === 0)
         ? this.whitePlayer
         : this.blackPlayer)
    ;
  }; 

  function Game_GetTurnId () {
    return ((((this.moveHistory).get_Count() | 0) + 1) | 0);
  }; 

  function Game_Load (fileName, $exception) {
    var j = new ($T0C())();
    try {
      var sr = $S05().Construct(fileName);
      try {
        var fversion = ($T11().Parse(JSIL.SplitString(sr.ReadLine(), JSIL.Array.New($T15(), ["="]))[1]) | 0);
        if (fversion > 1) {
          $T17().Show("You are trying to load game from newer chess version. Please update this program.");
        } else {
          var moves = ($T11().Parse(JSIL.SplitString(sr.ReadLine(), JSIL.Array.New($T15(), ["="]))[1]) | 0);
          (this.moveHistory).Clear();
          this.state = $S01().Construct();

        $loop0: 
          for (var i = 0; i < moves; i = ((i + 1) | 0)) {
            var moveStr = sr.ReadLine();
            j = new ($T0C())($S04().Construct($T0D().ToList$b1($T15())($T19().$Cast($T02().Cols)).IndexOf(moveStr[1]), $T0D().ToList$b1($T15())($T19().$Cast($T02().Rows)).IndexOf(moveStr[0])), $S04().Construct($T0D().ToList$b1($T15())($T19().$Cast($T02().Cols)).IndexOf(moveStr[7]), $T0D().ToList$b1($T15())($T19().$Cast($T02().Rows)).IndexOf(moveStr[6])));
            if (!(this.state).PlayMove(j, $T1A().Queen, true)) {
              $T17().Show($T0E().Format("Invalid move! {0}", j));
              break $loop0;
            }
            (this.moveHistory).Add(j);
          }
          if ($T05().$Is(this.whitePlayer)) {
            ($T05().$As(this.whitePlayer)).LoadState(this.state);
          }
          if ($T05().$Is(this.blackPlayer)) {
            ($T05().$As(this.blackPlayer)).LoadState(this.state);
          }
        }
      } finally {
        if (sr !== null) {
          $IM00().Call(sr, null);
        }
      }
    } catch ($exception) {
      $T17().Show("Loading game failed!");
    }
  }; 

  function Game_Save (fileName) {
    var $temp00;
    var sw = $S06().Construct(fileName);
    try {
      $S07().CallVirtual("WriteLine", null, sw, "version={0}", $T11().$Box(1));
      $S07().CallVirtual("WriteLine", null, sw, "moves={0}", $T11().$Box((this.moveHistory).get_Count()));

      for (var a$0 = this.moveHistory._items, i$0 = 0, l$0 = (this.moveHistory._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var i = a$0[i$0];
        $S08().CallVirtual("WriteLine", null, sw, i.toString());
      }
    } finally {
      if (sw !== null) {
        $IM00().Call(sw, null);
      }
    }
  }; 

  function Game_Tick () {
    var active = $T05().$As(this.GetActivePlayer());
    if (active !== null) {
      var i = active.PlayMove();
      if (i !== null) {
        (this.state).PlayMove(JSIL.Nullable_Value(i).MemberwiseClone(), active.Promote(JSIL.Nullable_Value(i).To), true);
        this.turnColor = (this.state).GetActiveColor();
        (this.moveHistory).Add(JSIL.Nullable_Value(i).MemberwiseClone());
        var result = true;
        return result;
      }
    }
    result = false;
    return result;
  }; 

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Chess.Game", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Boolean]), 
      Game__ctor
    );

    $.Method({Static:false, Public:true }, "Click", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.Drawing.Point")), 
      Game_Click
    );

    $.Method({Static:false, Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [
          $asm06.TypeRef("System.Drawing.Graphics"), $asm08.TypeRef("System.Windows.Forms.Label"), 
          $asm08.TypeRef("System.Windows.Forms.Label"), $asm00.TypeRef("Chess.Form1")
        ]), 
      Game_Draw
    );

    $.Method({Static:false, Public:false}, "GetActivePlayer", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Chess.Player")), 
      Game_GetActivePlayer
    );

    $.Method({Static:false, Public:true }, "GetTurnId", 
      JSIL.MethodSignature.Return($.Int32), 
      Game_GetTurnId
    );

    $.Method({Static:false, Public:true }, "Load", 
      JSIL.MethodSignature.Action($.String), 
      Game_Load
    );

    $.Method({Static:false, Public:true }, "Save", 
      JSIL.MethodSignature.Action($.String), 
      Game_Save
    );

    $.Method({Static:false, Public:true }, "Tick", 
      JSIL.MethodSignature.Return($.Boolean), 
      Game_Tick
    );

    $.Constant({Static:true , Public:false}, "version", $.Int32, 1);

    $.Field({Static:false, Public:false}, "board", $asm00.TypeRef("Chess.Chessboard"));

    $.Field({Static:false, Public:false}, "whitePlayer", $asm00.TypeRef("Chess.Player"));

    $.Field({Static:false, Public:false}, "blackPlayer", $asm00.TypeRef("Chess.Player"));

    $.Field({Static:false, Public:false}, "moveHistory", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Chess.Move")]));

    $.Field({Static:false, Public:false}, "state", $asm00.TypeRef("Chess.BoardState"));

    $.Field({Static:false, Public:false}, "turnColor", $asm00.TypeRef("Chess.ChessColor"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Chess.Move */ 

(function Move$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.System.Drawing.Point)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Chess.BoardState)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Chess.Figure)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Chess.FigureType)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Chess.ChessColor)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Chess.Chessboard)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Char)) ();
  };


  function Move__ctor (from, to) {
    this.From = from.MemberwiseClone();
    this.To = to.MemberwiseClone();
  }; 

  function Move_Object_Equals (obj) {
    return ($thisType.$Is(obj) && $thisType.op_Equality(this, $thisType.$Cast(obj)));
  }; 

  function Move_GetHashCode () {
    return ((((((((this.From).get_X() | 0) + (((this.From).get_Y() | 0) << 4)) | 0) + (((this.To).get_X() | 0) << 8)) | 0) + (((this.To).get_Y() | 0) << 12)) | 0);
  }; 

  function Move_IsCastling (state) {
    var f = state.GetFigureAt(this.From);
    if (f.Type === $T04().King) {
      if (!((((f.Color).valueOf() | 0) !== 0) || 
          (((this.From).get_Y() | 0) !== 0) || 
          (((this.To).get_Y() | 0) !== 0) || 
          (((this.From).get_X() | 0) !== 4) || ((((this.To).get_X() | 0) !== 6) && 
            (((this.To).get_X() | 0) !== 2)))) {
        var result = true;
        return result;
      }
      if (!((f.Color !== $T07().Black) || 
          (((this.From).get_Y() | 0) !== 7) || 
          (((this.To).get_Y() | 0) !== 7) || 
          (((this.From).get_X() | 0) !== 4) || ((((this.To).get_X() | 0) !== 6) && 
            (((this.To).get_X() | 0) !== 2)))) {
        result = true;
        return result;
      }
    }
    result = false;
    return result;
  }; 

  function Move_IsEnPassantTake (state) {
    var enPassant = state.GetEnPassant();
    if (enPassant === null) {
      var result = false;
    } else {
      var f = state.GetFigureAt(this.From);
      if (!((f.Type !== $T04().Pawn) || !$T00().op_Equality(JSIL.Nullable_Value(enPassant).MemberwiseClone(), this.To.MemberwiseClone()))) {
        if ((Math.abs(((((this.To).get_X() | 0) - ((this.From).get_X() | 0)) | 0))) === 1) {
          if (!((((f.Color).valueOf() | 0) !== 0) || (((this.To).get_Y() | 0) !== 5))) {
            result = true;
            return result;
          }
          if (!((f.Color !== $T07().Black) || (((this.To).get_Y() | 0) !== 2))) {
            result = true;
            return result;
          }
        }
      }
      result = false;
    }
    return result;
  }; 

  function Move_IsPawnForwardByTwo (state) {
    return !((state.GetFigureAt(this.From).Type !== $T04().Pawn) || ((Math.abs(((((this.From).get_Y() | 0) - ((this.To).get_Y() | 0)) | 0))) !== 2));
  }; 

  function Move_IsPromotion (state) {
    var f = state.GetFigureAt(this.From);
    if (f.Type === $T04().Pawn) {
      if (!((((f.Color).valueOf() | 0) !== 0) || (((this.To).get_Y() | 0) !== 7))) {
        var result = true;
        return result;
      }
      if (!((f.Color !== $T07().Black) || (((this.To).get_Y() | 0) !== 0))) {
        result = true;
        return result;
      }
    }
    result = false;
    return result;
  }; 

  function Move_op_Equality (a, b) {
    return ($T00().op_Equality(a.From.MemberwiseClone(), b.From.MemberwiseClone()) && $T00().op_Equality(a.To.MemberwiseClone(), b.To.MemberwiseClone()));
  }; 

  function Move_op_Inequality (a, b) {
    return !$thisType.op_Equality(a, b);
  }; 

  function Move_toString () {
    return $T09().Format("{0}{1} to {2}{3}", JSIL.Array.New($T01(), [$T0B().$Box($T0A().Rows[(this.From).get_Y()]), $T0B().$Box($T0A().Cols[(this.From).get_X()]), $T0B().$Box($T0A().Rows[(this.To).get_Y()]), $T0B().$Box($T0A().Cols[(this.To).get_X()])]));
  }; 

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Chess.Move", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Drawing.Point"), $asm06.TypeRef("System.Drawing.Point")]), 
      Move__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      Move_Object_Equals
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      Move_GetHashCode
    );

    $.Method({Static:false, Public:true }, "IsCastling", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Chess.BoardState")]), 
      Move_IsCastling
    );

    $.Method({Static:false, Public:true }, "IsEnPassantTake", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Chess.BoardState")]), 
      Move_IsEnPassantTake
    );

    $.Method({Static:false, Public:true }, "IsPawnForwardByTwo", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Chess.BoardState")]), 
      Move_IsPawnForwardByTwo
    );

    $.Method({Static:false, Public:true }, "IsPromotion", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Chess.BoardState")]), 
      Move_IsPromotion
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Move_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Move_op_Inequality
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Move_toString
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "From", $asm06.TypeRef("System.Drawing.Point"));

    $.Field({Static:false, Public:true , ReadOnly:true }, "To", $asm06.TypeRef("System.Drawing.Point"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Chess.Program */ 

(function Program$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.System.Windows.Forms.Application)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Chess.Form1)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm08.TypeRef("System.Windows.Forms.Form")))) ();
  };


  function Program_Main () {
    $T00().EnableVisualStyles();
    $T00().SetCompatibleTextRenderingDefault(false);
    $S00().CallStatic($T00(), "Run", null, new ($T01())());
  }; 

  JSIL.MakeStaticClass("Chess.Program", false, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:false}, "Main", 
      JSIL.MethodSignature.Void, 
      Program_Main
    )
      .Attribute($asm01.TypeRef("System.STAThreadAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Chess.PromoteDialog */ 

(function PromoteDialog$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Chess.ChessColor)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Chess.FigureType)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.System.Windows.Forms.Form)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.Drawing.Image)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.System.Windows.Forms.Button)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.System.Windows.Forms.Control)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm06.System.Drawing.Point)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.EventHandler)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm08.System.Windows.Forms.Control_ControlCollection)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm06.System.Drawing.Bitmap)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm06.System.Drawing.Graphics)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm06.System.Drawing.Rectangle)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm06.System.Drawing.GraphicsUnit)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm06.System.Drawing.Size)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm08.System.Windows.Forms.FormBorderStyle)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.EventArgs)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm02.System.ComponentModel.ComponentResourceManager)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm08.System.Windows.Forms.ContainerControl)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm06.System.Drawing.SizeF)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm08.System.Windows.Forms.AutoScaleMode)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm06.System.Drawing.Icon)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm01.System.Resources.ResourceManager)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm06.System.Drawing.Drawing2D.CompositingMode)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm06.System.Drawing.Drawing2D.CompositingQuality)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm06.System.Drawing.Drawing2D.InterpolationMode)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm06.System.Drawing.Drawing2D.SmoothingMode)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm06.System.Drawing.Drawing2D.PixelOffsetMode)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm06.System.Drawing.Imaging.ImageAttributes)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm06.System.Drawing.Drawing2D.WrapMode)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Drawing.Point, [$asm01.System.Int32, $asm01.System.Int32]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.System.Object, $asm01.System.EventArgs]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(JSIL.MethodSignature.Return($asm08.TypeRef("System.Windows.Forms.Control+ControlCollection")))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Drawing.Bitmap, [$asm01.System.Int32, $asm01.System.Int32]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm06.System.Drawing.Image, $asm06.System.Drawing.Rectangle, 
        $asm06.System.Drawing.Rectangle, $asm06.System.Drawing.GraphicsUnit
      ]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Drawing.Rectangle, [
        $asm01.System.Int32, $asm01.System.Int32, 
        $asm01.System.Int32, $asm01.System.Int32
      ]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Drawing.Size, [$asm01.System.Int32, $asm01.System.Int32]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.System.ComponentModel.ComponentResourceManager, [$asm01.System.Type]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Drawing.SizeF, [$asm01.System.Single, $asm01.System.Single]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.System.Drawing.Imaging.ImageAttributes, null))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm06.System.Drawing.Image, $asm06.System.Drawing.Rectangle, 
        $asm01.System.Int32, $asm01.System.Int32, 
        $asm01.System.Int32, $asm01.System.Int32, 
        $asm06.System.Drawing.GraphicsUnit, $asm06.System.Drawing.Imaging.ImageAttributes
      ]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };


  function PromoteDialog__ctor (color) {
    var $temp00;
    this.PromoteFigure = $T01().Queen;
    this.components = null;
    $T02().prototype._ctor.call(this);
    this.InitializeComponent();
    var img = $T03().FromFile("chess.png");
    var id = 0;

    for (var i = 1; i < 5; i = ((i + 1) | 0)) {
      var b = new ($T05())();
      b.set_Width(50);
      b.set_Height(50);
      (b.Location = $S00().Construct(Math.imul(($temp00 = id, 
              id = ((id + 1) | 0), 
              $temp00), 50), 0));
      $T06().prototype.add_Click.call(b, $T08().New(this, null, new JSIL.MethodPointerInfo($thisType, "b_Click", $S01(), false, false)));
      b.set_Tag($asm00.Chess.FigureType.$Cast(i + $T01().King));
      ($S02().Call($T06().prototype, "get_Controls", null, this)).Add(b);
      var tmp = $S03().Construct((((img.get_Width() | 0) / 6) | 0), (((img.get_Height() | 0) / 2) | 0));
      var g = $T0B().FromImage(tmp);
      $S04().CallVirtual("DrawImage", null, g, 
        img, 
        $S05().Construct(0, 0, tmp.get_Width(), tmp.get_Height()), 
        $S05().Construct(Math.imul(tmp.get_Width(), i), Math.imul(tmp.get_Height(), (
              ((color.valueOf() | 0) === 0)
                 ? 0
                 : 1)
          ), tmp.get_Width(), tmp.get_Height()), 
        $T0D().Pixel
      );
      b.set_BackgroundImage($thisType.ResizeImage(tmp, 50, 50));
    }
    (this.Form$ClientSize = $S06().Construct(200, 50));
    $T02().prototype.set_FormBorderStyle.call(this, $T0F().FixedDialog);
  }; 

  function PromoteDialog_b_Click (sender, e) {
    this.PromoteFigure = $T01().$Cast(($T05().$As(sender)).get_Tag());
    this.Close();
  }; 

  function PromoteDialog_Dispose$00 (disposing) {
    if (!(!disposing || (this.components === null))) {
      $IM00().Call(this.components, null);
    }
    $T02().prototype.Dispose.call(this, disposing);
  }; 

  function PromoteDialog_InitializeComponent () {
    var resources = $S07().Construct($thisType.__Type__);
    this.SuspendLayout();
    (this.ContainerControl$AutoScaleDimensions = $S08().Construct(6, 13));
    this.set_AutoScaleMode($T17().Font);
    (this.Form$ClientSize = $S06().Construct(284, 262));
    $T02().prototype.set_Icon.call(this, $T18().$Cast(resources.GetObject("$this.Icon")));
    $T06().prototype.set_Name.call(this, "PromoteDialog");
    this.set_Text("Choose figure to promote");
    this.ResumeLayout(false);
  }; 

  function PromoteDialog_ResizeImage (image, width, height) {
    var destRect = $S05().Construct(0, 0, width, height);
    var destImage = $S03().Construct(width, height);
    destImage.SetResolution(
      image.get_HorizontalResolution(), 
      image.get_VerticalResolution()
    );
    var graphics = $T0B().FromImage(destImage);
    try {
      graphics.set_CompositingMode($T1A().SourceCopy);
      graphics.set_CompositingQuality($T1B().HighQuality);
      graphics.set_InterpolationMode($T1C().HighQualityBicubic);
      graphics.set_SmoothingMode($T1D().HighQuality);
      graphics.set_PixelOffsetMode($T1E().HighQuality);
      var wrapMode = $S09().Construct();
      try {
        wrapMode.SetWrapMode($T20().TileFlipXY);
        $S0A().CallVirtual("DrawImage", null, graphics, 
          image, 
          destRect.MemberwiseClone(), 
          0, 
          0, 
          image.get_Width(), 
          image.get_Height(), 
          $T0D().Pixel, 
          wrapMode
        );
      } finally {
        if (wrapMode !== null) {
          $IM00().Call(wrapMode, null);
        }
      }
    } finally {
      if (graphics !== null) {
        $IM00().Call(graphics, null);
      }
    }
    return destImage;
  }; 

  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Windows.Forms.Form"), 
      Name: "Chess.PromoteDialog", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Chess.ChessColor")), 
      PromoteDialog__ctor
    );

    $.Method({Static:false, Public:false}, "b_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("System.EventArgs")]), 
      PromoteDialog_b_Click
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean), 
      PromoteDialog_Dispose$00
    );

    $.Method({Static:false, Public:false}, "InitializeComponent", 
      JSIL.MethodSignature.Void, 
      PromoteDialog_InitializeComponent
    );

    $.Method({Static:true , Public:true }, "ResizeImage", 
      new JSIL.MethodSignature($asm06.TypeRef("System.Drawing.Bitmap"), [
          $asm06.TypeRef("System.Drawing.Image"), $.Int32, 
          $.Int32
        ]), 
      PromoteDialog_ResizeImage
    );

    $.Field({Static:false, Public:true }, "PromoteFigure", $asm00.TypeRef("Chess.FigureType"));

    $.Field({Static:false, Public:false}, "components", $asm02.TypeRef("System.ComponentModel.IContainer"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Chess.Properties");
/* class Chess.Properties.Resources */ 

(function Resources$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Resources.ResourceManager)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Globalization.CultureInfo)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.System.Resources.ResourceManager, [$asm01.System.String, $asm01.System.Reflection.Assembly]))) ();
  };


  function Resources__ctor () {
  }; 

  function Resources_get_Culture () {
    return $thisType.resourceCulture;
  }; 

  function Resources_get_ResourceManager () {
    if ($thisType.resourceMan === null) {
      var temp = $S00().Construct("Chess.Properties.Resources", $thisType.__Type__.get_Assembly());
      $thisType.resourceMan = temp;
    }
    return $thisType.resourceMan;
  }; 

  function Resources_set_Culture (value) {
    $thisType.resourceCulture = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Chess.Properties.Resources", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      Resources__ctor
    );

    $.Method({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Globalization.CultureInfo")), 
      Resources_get_Culture
    );

    $.Method({Static:true , Public:false}, "get_ResourceManager", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Resources.ResourceManager")), 
      Resources_get_ResourceManager
    );

    $.Method({Static:true , Public:false}, "set_Culture", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Globalization.CultureInfo")), 
      Resources_set_Culture
    );

    $.Field({Static:true , Public:false}, "resourceMan", $asm01.TypeRef("System.Resources.ResourceManager"));

    $.Field({Static:true , Public:false}, "resourceCulture", $asm01.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:false}, "ResourceManager", $asm01.TypeRef("System.Resources.ResourceManager"))
      .Attribute($asm02.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm02.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.Property({Static:true , Public:false}, "Culture", $asm01.TypeRef("System.Globalization.CultureInfo"))
      .Attribute($asm02.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm02.System.ComponentModel.EditorBrowsableState.Advanced]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerNonUserCodeAttribute"))
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
    .Attribute($asm02.TypeRef("System.CodeDom.Compiler.GeneratedCodeAttribute"), function () { return ["System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0"]; });

})();

/* class Chess.Properties.Settings */ 

(function Settings$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.System.Configuration.SettingsBase)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.System.Configuration.ApplicationSettingsBase)) ();
  };


  function Settings__ctor () {
    $T01().prototype._ctor.call(this);
  }; 

  function Settings_get_Default () {
    return $thisType.defaultInstance;
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Configuration.ApplicationSettingsBase"), 
      Name: "Chess.Properties.Settings", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Settings__ctor
    );

    $.Method({Static:true , Public:true }, "get_Default", 
      JSIL.MethodSignature.Return($.Type), 
      Settings_get_Default
    );

    $.Field({Static:true , Public:false}, "defaultInstance", $.Type);


    function Settings__cctor () {
      $thisType.defaultInstance = $thisType.$Cast($T00().Synchronized(new $thisType()));
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Settings__cctor
    );

    $.Property({Static:true , Public:true }, "Default", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
    .Attribute($asm02.TypeRef("System.CodeDom.Compiler.GeneratedCodeAttribute"), function () { return ["Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "11.0.0.0"]; });

})();

