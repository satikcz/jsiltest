/* Generated by JSIL v0.8.2 build 28081. See http://jsil.org/ for more information. */ 
'use strict';
/* Generating type stubs only */ 
var $asm00 = JSIL.DeclareAssembly("Microsoft.CSharp, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

/* class FXAssembly */ 

(function FXAssembly$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("FXAssembly", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Version", $.String, "4.0.0.0");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ThisAssembly */ 

(function ThisAssembly$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("ThisAssembly", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Title", $.String, "Microsoft.CSharp.dll");

    $.Constant({Static:true , Public:false}, "Description", $.String, "Microsoft.CSharp.dll");

    $.Constant({Static:true , Public:false}, "DefaultAlias", $.String, "Microsoft.CSharp.dll");

    $.Constant({Static:true , Public:false}, "Copyright", $.String, "\xa9 Microsoft Corporation.  All rights reserved.");

    $.Constant({Static:true , Public:false}, "Version", $.String, "4.0.0.0");

    $.Constant({Static:true , Public:false}, "InformationalVersion", $.String, "4.6.1038.0");

    $.Constant({Static:true , Public:false}, "DailyBuildNumberStr", $.String, "30319");

    $.Constant({Static:true , Public:false}, "BuildRevisionStr", $.String, "0");

    $.Constant({Static:true , Public:false}, "DailyBuildNumber", $.Int32, 30319);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class AssemblyRef */ 

(function AssemblyRef$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("AssemblyRef", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "EcmaPublicKey", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "EcmaPublicKeyToken", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "EcmaPublicKeyFull", $.String, "00000000000000000400000000000000");

    $.Constant({Static:true , Public:false}, "SilverlightPublicKey", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SilverlightPublicKeyToken", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SilverlightPublicKeyFull", $.String, "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9");

    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKey", $.String, "7cec85d7bea7798e");

    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyToken", $.String, "7cec85d7bea7798e");

    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyFull", $.String, "00240000048000009400000006020000002400005253413100040000010001008D56C76F9E8649383049F383C44BE0EC204181822A6C31CF5EB7EF486944D032188EA1D3920763712CCB12D75FB77E9811149E6148E5D32FBAAB37611C1878DDC19E20EF135D0CB2CFF2BFEC3D115810C3D9069638FE4BE215DBF795861920E5AB6F7DB2E2CEEF136AC23D5DD2BF031700AEC232F6C6B1C785B4305C123B37AB");

    $.Constant({Static:true , Public:false}, "PlatformPublicKey", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "PlatformPublicKeyToken", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "PlatformPublicKeyFull", $.String, "00000000000000000400000000000000");

    $.Constant({Static:true , Public:false}, "Mscorlib", $.String, "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemData", $.String, "System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemDataOracleClient", $.String, "System.Data.OracleClient, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "System", $.String, "System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemCore", $.String, "System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemNumerics", $.String, "System.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemRuntimeRemoting", $.String, "System.Runtime.Remoting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemThreadingTasksDataflow", $.String, "System.Threading.Tasks.Dataflow, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemWindowsForms", $.String, "System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemXml", $.String, "System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKey", $.String, "b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyToken", $.String, "b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyFull", $.String, "002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293");

    $.Constant({Static:true , Public:false}, "SharedLibPublicKey", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SharedLibPublicKeyToken", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SharedLibPublicKeyFull", $.String, "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9");

    $.Constant({Static:true , Public:false}, "SystemComponentModelDataAnnotations", $.String, "System.ComponentModel.DataAnnotations, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemConfiguration", $.String, "System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemConfigurationInstall", $.String, "System.Configuration.Install, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDeployment", $.String, "System.Deployment, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDesign", $.String, "System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDirectoryServices", $.String, "System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDrawingDesign", $.String, "System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDrawing", $.String, "System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemEnterpriseServices", $.String, "System.EnterpriseServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemManagement", $.String, "System.Management, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemMessaging", $.String, "System.Messaging, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemNetHttp", $.String, "System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemNetHttpWebRequest", $.String, "System.Net.Http.WebRequest, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemRuntimeSerializationFormattersSoap", $.String, "System.Runtime.Serialization.Formatters.Soap, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemRuntimeWindowsRuntime", $.String, "System.Runtime.WindowsRuntime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemRuntimeWindowsRuntimeUIXaml", $.String, "System.Runtime.WindowsRuntimeUIXaml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemSecurity", $.String, "System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemServiceModelWeb", $.String, "System.ServiceModel.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemServiceProcess", $.String, "System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWeb", $.String, "System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebAbstractions", $.String, "System.Web.Abstractions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebDynamicData", $.String, "System.Web.DynamicData, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebDynamicDataDesign", $.String, "System.Web.DynamicData.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebEntityDesign", $.String, "System.Web.Entity.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemWebExtensions", $.String, "System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebExtensionsDesign", $.String, "System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebMobile", $.String, "System.Web.Mobile, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebRegularExpressions", $.String, "System.Web.RegularExpressions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebRouting", $.String, "System.Web.Routing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebServices", $.String, "System.Web.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "WindowsBase", $.String, "WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudio", $.String, "Microsoft.VisualStudio, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWindowsForms", $.String, "Microsoft.VisualStudio.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "VJSharpCodeProvider", $.String, "VJSharpCodeProvider, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "ASPBrowserCapsPublicKey", $.String, "b7bd7678b977bd8f");

    $.Constant({Static:true , Public:false}, "ASPBrowserCapsFactory", $.String, "ASP.BrowserCapsFactory, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b7bd7678b977bd8f");

    $.Constant({Static:true , Public:false}, "MicrosoftVSDesigner", $.String, "Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWeb", $.String, "Microsoft.VisualStudio.Web, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftWebDesign", $.String, "Microsoft.Web.Design.Client, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVSDesignerMobile", $.String, "Microsoft.VSDesigner.Mobile, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftJScript", $.String, "Microsoft.JScript, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeTypeAlias($jsilcore, "Microsoft.CSharp.RuntimeBinder.Binder");

JSIL.DeclareNamespace("Microsoft");
JSIL.DeclareNamespace("Microsoft.CSharp");
JSIL.DeclareNamespace("Microsoft.CSharp.RuntimeBinder");
/* class Microsoft.CSharp.RuntimeBinder.BinderHelper */ 

(function BinderHelper$Members () {
  var $, $thisType;















  JSIL.MakeStaticClass("Microsoft.CSharp.RuntimeBinder.BinderHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "Bind", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.RuntimeBinder"), 
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Dynamic.DynamicMetaObject")]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")]), 
          $asm04.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Cons", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), ["!!0", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["T"])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm00.Microsoft.CSharp.RuntimeBinder.BinderHelper_$lCons$gd__10$b1.__Type__]; });

    $.ExternalMethod({Static:true , Public:false}, "Cons", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          "!!0", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          "!!0"
        ], ["T"])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm00.Microsoft.CSharp.RuntimeBinder.BinderHelper_$lCons$gd__11$b1.__Type__]; });

    $.ExternalMethod({Static:true , Public:false}, "ConvertResult", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.Expression"), $asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateCallInfo", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Dynamic.CallInfo"), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "DeduceArgumentRestriction", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Dynamic.BindingRestrictions"), [
          $.Int32, $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder"), 
          $asm04.TypeRef("System.Dynamic.DynamicMetaObject"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeForErrorMetaObject", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $asm04.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsComObject", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsDynamicallyTypedRuntimeProxy", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Dynamic.DynamicMetaObject"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsIncrementOrDecrementActionOnLocal", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTransparentProxy", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTypeOfStaticCall", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsWindowsRuntimeObject", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToList", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.List`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["T"])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.BinderHelper+<Cons>d__10`1 */ 

(function $lCons$gd__10$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.BinderHelper+<Cons>d__10`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lT$g.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lT$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm01.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("T"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "sourceHead", $.GenericParameter("T"));

    $.Field({Static:false, Public:true }, "$l$g3__sourceHead", $.GenericParameter("T"));

    $.Field({Static:false, Public:false}, "sourceTail", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:true }, "$l$g3__sourceTail", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lT$g.Current", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), 
      /* 3 */ $asm01.TypeRef("System.IDisposable"), 
      /* 4 */ $asm01.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.CSharp.RuntimeBinder.BinderHelper+<Cons>d__11`1 */ 

(function $lCons$gd__11$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.BinderHelper+<Cons>d__11`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lT$g.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lT$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm01.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("T"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "sourceHead", $.GenericParameter("T"));

    $.Field({Static:false, Public:true }, "$l$g3__sourceHead", $.GenericParameter("T"));

    $.Field({Static:false, Public:false}, "sourceMiddle", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:true }, "$l$g3__sourceMiddle", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "sourceLast", $.GenericParameter("T"));

    $.Field({Static:false, Public:true }, "$l$g3__sourceLast", $.GenericParameter("T"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lT$g.Current", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), 
      /* 3 */ $asm01.TypeRef("System.IDisposable"), 
      /* 4 */ $asm01.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

JSIL.MakeTypeAlias($jsilcore, "Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo");

/* enum Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    UseCompileTimeType: 1, 
    Constant: 2, 
    NamedArgument: 4, 
    IsRef: 8, 
    IsOut: 16, 
    IsStaticType: 32, 
  }
);

/* class Microsoft.CSharp.RuntimeBinder.CSharpBinaryOperationBinder */ 

(function CSharpBinaryOperationBinder$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm04.TypeRef("System.Dynamic.BinaryOperationBinder"), 
      Name: "Microsoft.CSharp.RuntimeBinder.CSharpBinaryOperationBinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $.Boolean, 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpBinaryOperationFlags"), $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackBinaryOperation", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm04.TypeRef("System.Dynamic.DynamicMetaObject"), $asm04.TypeRef("System.Dynamic.DynamicMetaObject"), 
          $asm04.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ArgumentInfo", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IList`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CallingContext", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsChecked", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsLogicalOperation", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "m_isChecked", $.Boolean);

    $.Field({Static:false, Public:false}, "m_binopFlags", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpBinaryOperationFlags"));

    $.Field({Static:false, Public:false}, "m_callingContext", $asm01.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "m_argumentInfo", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")]));

    $.Field({Static:false, Public:false}, "m_binder", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.RuntimeBinder"));

    $.Property({Static:false, Public:false}, "IsChecked", $.Boolean);

    $.Property({Static:false, Public:false}, "IsLogicalOperation", $.Boolean);

    $.Property({Static:false, Public:false}, "CallingContext", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "ArgumentInfo", $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.CSharp.RuntimeBinder.CSharpBinaryOperationFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.CSharpBinaryOperationFlags", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    MemberAccess: 1, 
    LogicalOperation: 2, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    CheckedContext: 1, 
    InvokeSimpleName: 2, 
    InvokeSpecialName: 4, 
    BinaryOperationLogical: 8, 
    ConvertExplicit: 16, 
    ConvertArrayIndex: 32, 
    ResultIndexed: 64, 
    ValueFromCompoundAssignment: 128, 
    ResultDiscarded: 256, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.CSharpCallFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.CSharpCallFlags", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    SimpleNameCall: 1, 
    EventHookup: 2, 
    ResultDiscarded: 4, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.CSharpConversionKind */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.CSharpConversionKind", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ImplicitConversion: 0, 
    ExplicitConversion: 1, 
    ArrayCreationConversion: 2, 
  }
);

/* class Microsoft.CSharp.RuntimeBinder.CSharpConvertBinder */ 

(function CSharpConvertBinder$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm04.TypeRef("System.Dynamic.ConvertBinder"), 
      Name: "Microsoft.CSharp.RuntimeBinder.CSharpConvertBinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Type"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpConversionKind"), 
          $.Boolean, $asm01.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackConvert", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm04.TypeRef("System.Dynamic.DynamicMetaObject"), $asm04.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CallingContext", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConversionKind", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpConversionKind"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsChecked", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "m_conversionKind", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpConversionKind"));

    $.Field({Static:false, Public:false}, "m_isChecked", $.Boolean);

    $.Field({Static:false, Public:false}, "m_callingContext", $asm01.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "m_binder", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.RuntimeBinder"));

    $.Property({Static:false, Public:false}, "ConversionKind", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpConversionKind"));

    $.Property({Static:false, Public:false}, "IsChecked", $.Boolean);

    $.Property({Static:false, Public:false}, "CallingContext", $asm01.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.CSharpGetIndexBinder */ 

(function CSharpGetIndexBinder$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm04.TypeRef("System.Dynamic.GetIndexBinder"), 
      Name: "Microsoft.CSharp.RuntimeBinder.CSharpGetIndexBinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackGetIndex", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm04.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm04.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ArgumentInfo", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IList`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CallingContext", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "m_callingContext", $asm01.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "m_argumentInfo", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")]));

    $.Field({Static:false, Public:false}, "m_binder", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.RuntimeBinder"));

    $.Property({Static:false, Public:false}, "CallingContext", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "ArgumentInfo", $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.CSharpGetMemberBinder */ 

(function CSharpGetMemberBinder$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm04.TypeRef("System.Dynamic.GetMemberBinder"), 
      Name: "Microsoft.CSharp.RuntimeBinder.CSharpGetMemberBinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackGetMember", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm04.TypeRef("System.Dynamic.DynamicMetaObject"), $asm04.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ArgumentInfo", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IList`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CallingContext", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ResultIndexed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Dynamic.IInvokeOnGetBinder.get_InvokeOnGet", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm04.TypeRef("System.Dynamic.IInvokeOnGetBinder"), "get_InvokeOnGet");

    $.Field({Static:false, Public:false}, "m_callingContext", $asm01.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "m_argumentInfo", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")]));

    $.Field({Static:false, Public:false}, "m_bResultIndexed", $.Boolean);

    $.Field({Static:false, Public:false}, "m_binder", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.RuntimeBinder"));

    $.Property({Static:false, Public:false}, "CallingContext", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "ArgumentInfo", $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Dynamic.IInvokeOnGetBinder.InvokeOnGet", $.Boolean);

    $.Property({Static:false, Public:false}, "ResultIndexed", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm04.TypeRef("System.Dynamic.IInvokeOnGetBinder")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.CSharpInvokeBinder */ 

(function CSharpInvokeBinder$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm04.TypeRef("System.Dynamic.InvokeBinder"), 
      Name: "Microsoft.CSharp.RuntimeBinder.CSharpInvokeBinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpCallFlags"), $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackInvoke", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm04.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm04.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder.get_ArgumentInfo", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IList`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")]))
    )
      .Overrides($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder"), "get_ArgumentInfo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder.get_CallingContext", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Type"))
    )
      .Overrides($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder"), "get_CallingContext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder.get_Flags", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpCallFlags"))
    )
      .Overrides($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder"), "get_Flags");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder.get_Name", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder"), "get_Name");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder.get_ResultDiscarded", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder"), "get_ResultDiscarded");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder.get_StaticCall", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder"), "get_StaticCall");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder.get_TypeArguments", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IList`1", [$asm01.TypeRef("System.Type")]))
    )
      .Overrides($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder"), "get_TypeArguments");

    $.Field({Static:false, Public:false}, "m_flags", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpCallFlags"));

    $.Field({Static:false, Public:false}, "m_callingContext", $asm01.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "m_argumentInfo", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")]));

    $.Field({Static:false, Public:false}, "m_binder", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.RuntimeBinder"));

    $.Property({Static:false, Public:false, Virtual:true }, "Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder.StaticCall", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder.Name", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder.TypeArguments", $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm01.TypeRef("System.Type")]));

    $.Property({Static:false, Public:false, Virtual:true }, "Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder.Flags", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpCallFlags"));

    $.Property({Static:false, Public:false, Virtual:true }, "Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder.CallingContext", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder.ArgumentInfo", $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")]));

    $.Property({Static:false, Public:false, Virtual:true }, "Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder.ResultDiscarded", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.CSharpInvokeConstructorBinder */ 

(function CSharpInvokeConstructorBinder$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "Microsoft.CSharp.RuntimeBinder.CSharpInvokeConstructorBinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpCallFlags"), $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm04.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Dynamic.DynamicMetaObject")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ArgumentInfo", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IList`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CallingContext", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Flags", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpCallFlags"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticCall", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeArguments", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IList`1", [$asm01.TypeRef("System.Type")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder.get_ResultDiscarded", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder"), "get_ResultDiscarded");

    $.Field({Static:false, Public:false}, "m_flags", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpCallFlags"));

    $.Field({Static:false, Public:false}, "m_callingContext", $asm01.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "m_argumentInfo", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")]));

    $.Field({Static:false, Public:false}, "m_binder", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.RuntimeBinder"));

    $.Property({Static:false, Public:true , Virtual:true }, "Flags", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpCallFlags"));

    $.Property({Static:false, Public:true , Virtual:true }, "CallingContext", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "ArgumentInfo", $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")]));

    $.Property({Static:false, Public:true , Virtual:true }, "StaticCall", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "TypeArguments", $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm01.TypeRef("System.Type")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder.ResultDiscarded", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.CSharpInvokeMemberBinder */ 

(function CSharpInvokeMemberBinder$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm04.TypeRef("System.Dynamic.InvokeMemberBinder"), 
      Name: "Microsoft.CSharp.RuntimeBinder.CSharpInvokeMemberBinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpCallFlags"), $.String, 
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Type")]), 
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackInvoke", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm04.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm04.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackInvokeMember", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm04.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm04.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder.get_ArgumentInfo", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IList`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")]))
    )
      .Overrides($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder"), "get_ArgumentInfo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder.get_CallingContext", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Type"))
    )
      .Overrides($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder"), "get_CallingContext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder.get_Flags", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpCallFlags"))
    )
      .Overrides($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder"), "get_Flags");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder.get_Name", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder"), "get_Name");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder.get_ResultDiscarded", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder"), "get_ResultDiscarded");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder.get_StaticCall", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder"), "get_StaticCall");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder.get_TypeArguments", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IList`1", [$asm01.TypeRef("System.Type")]))
    )
      .Overrides($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder"), "get_TypeArguments");

    $.Field({Static:false, Public:false}, "m_flags", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpCallFlags"));

    $.Field({Static:false, Public:false}, "m_callingContext", $asm01.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "m_typeArguments", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.Type")]));

    $.Field({Static:false, Public:false}, "m_argumentInfo", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")]));

    $.Field({Static:false, Public:false}, "m_binder", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.RuntimeBinder"));

    $.Property({Static:false, Public:false, Virtual:true }, "Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder.StaticCall", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder.Flags", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpCallFlags"));

    $.Property({Static:false, Public:false, Virtual:true }, "Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder.CallingContext", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder.TypeArguments", $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm01.TypeRef("System.Type")]));

    $.Property({Static:false, Public:false, Virtual:true }, "Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder.ArgumentInfo", $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")]));

    $.Property({Static:false, Public:false, Virtual:true }, "Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder.ResultDiscarded", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.CSharpIsEventBinder */ 

(function CSharpIsEventBinder$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "Microsoft.CSharp.RuntimeBinder.CSharpIsEventBinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm04.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Dynamic.DynamicMetaObject")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CallingContext", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "m_name", $.String);

    $.Field({Static:false, Public:false}, "m_callingContext", $asm01.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "m_binder", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.RuntimeBinder"));

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "CallingContext", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm01.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.CSharpSetIndexBinder */ 

(function CSharpSetIndexBinder$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm04.TypeRef("System.Dynamic.SetIndexBinder"), 
      Name: "Microsoft.CSharp.RuntimeBinder.CSharpSetIndexBinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.Boolean, 
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackSetIndex", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm04.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm04.TypeRef("System.Dynamic.DynamicMetaObject"), $asm04.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ArgumentInfo", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IList`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CallingContext", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsCompoundAssignment", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsChecked", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "m_bIsCompoundAssignment", $.Boolean);

    $.Field({Static:false, Public:false}, "m_isChecked", $.Boolean);

    $.Field({Static:false, Public:false}, "m_callingContext", $asm01.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "m_argumentInfo", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")]));

    $.Field({Static:false, Public:false}, "m_binder", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.RuntimeBinder"));

    $.Property({Static:false, Public:false}, "IsCompoundAssignment", $.Boolean);

    $.Property({Static:false, Public:false}, "IsChecked", $.Boolean);

    $.Property({Static:false, Public:false}, "CallingContext", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "ArgumentInfo", $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.CSharpSetMemberBinder */ 

(function CSharpSetMemberBinder$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm04.TypeRef("System.Dynamic.SetMemberBinder"), 
      Name: "Microsoft.CSharp.RuntimeBinder.CSharpSetMemberBinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.Boolean, $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackSetMember", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm04.TypeRef("System.Dynamic.DynamicMetaObject"), $asm04.TypeRef("System.Dynamic.DynamicMetaObject"), 
          $asm04.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ArgumentInfo", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IList`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CallingContext", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsCompoundAssignment", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsChecked", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "m_bIsCompoundAssignment", $.Boolean);

    $.Field({Static:false, Public:false}, "m_isChecked", $.Boolean);

    $.Field({Static:false, Public:false}, "m_callingContext", $asm01.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "m_argumentInfo", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")]));

    $.Field({Static:false, Public:false}, "m_binder", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.RuntimeBinder"));

    $.Property({Static:false, Public:false}, "IsCompoundAssignment", $.Boolean);

    $.Property({Static:false, Public:false}, "IsChecked", $.Boolean);

    $.Property({Static:false, Public:false}, "CallingContext", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "ArgumentInfo", $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.CSharpUnaryOperationBinder */ 

(function CSharpUnaryOperationBinder$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm04.TypeRef("System.Dynamic.UnaryOperationBinder"), 
      Name: "Microsoft.CSharp.RuntimeBinder.CSharpUnaryOperationBinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $.Boolean, 
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackUnaryOperation", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm04.TypeRef("System.Dynamic.DynamicMetaObject"), $asm04.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ArgumentInfo", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IList`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CallingContext", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsChecked", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "m_isChecked", $.Boolean);

    $.Field({Static:false, Public:false}, "m_callingContext", $asm01.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "m_argumentInfo", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")]));

    $.Field({Static:false, Public:false}, "m_binder", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.RuntimeBinder"));

    $.Property({Static:false, Public:false}, "IsChecked", $.Boolean);

    $.Property({Static:false, Public:false}, "CallingContext", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "ArgumentInfo", $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.DynamicBindingFailedException */ 

(function DynamicBindingFailedException$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Exception"), 
      Name: "Microsoft.CSharp.RuntimeBinder.DynamicBindingFailedException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm02.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.CSharp.RuntimeBinder.GetMemberValueBinder */ 

(function GetMemberValueBinder$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("System.Dynamic.GetMemberBinder"), 
      Name: "Microsoft.CSharp.RuntimeBinder.GetMemberValueBinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackGetMember", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm04.TypeRef("System.Dynamic.DynamicMetaObject"), $asm04.TypeRef("System.Dynamic.DynamicMetaObject")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.DynamicMetaObjectProviderDebugView */ 

(function DynamicMetaObjectProviderDebugView$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.DynamicMetaObjectProviderDebugView", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateDelegateAndInvoke", 
      new JSIL.MethodSignature($.Object, [
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")]), $asm04.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateDelegateSignatureAndArgumentInfos", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")]), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags")]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")])])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Items", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.DynamicMetaObjectProviderDebugView+DynamicProperty")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "IsComObject", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "QueryDynamicObject", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IList`1", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryEvalBinaryOperators", 
      new JSIL.MethodSignature($.Object, [
          "!!0", "!!1", 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags"), 
          $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $asm01.TypeRef("System.Type")
        ], ["T1", "T2"])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryEvalCast", 
      new JSIL.MethodSignature("!!1", [
          "!!0", $asm01.TypeRef("System.Type"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags"), $asm01.TypeRef("System.Type")
        ], ["T", "K"])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryEvalMethodVarArgs", 
      new JSIL.MethodSignature($.Object, [
          $jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")]), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags")]), $.String, 
          $asm01.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryEvalUnaryOperators", 
      new JSIL.MethodSignature($.Object, [
          "!!0", $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), 
          $asm01.TypeRef("System.Type")
        ], ["T"])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryGetMemberValue", 
      new JSIL.MethodSignature($.Object, [
          "!!0", $.String, 
          $asm01.TypeRef("System.Type"), $.Boolean
        ], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryGetMemberValue", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryGetMemberValueVarArgs", 
      new JSIL.MethodSignature($.Object, [
          $jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")]), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags")]), $asm01.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "TrySetMemberValue", 
      new JSIL.MethodSignature($.Object, [
          "!!0", $.String, 
          "!!1", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags"), 
          $asm01.TypeRef("System.Type")
        ], ["TObject", "TValue"])
    );

    $.ExternalMethod({Static:true , Public:true }, "TrySetMemberValueVarArgs", 
      new JSIL.MethodSignature($.Object, [
          $jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")]), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags")]), $asm01.TypeRef("System.Type")
        ])
    );

    $.Field({Static:false, Public:false}, "results", $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]))
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm01.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false}, "obj", $.Object)
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm01.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:true , Public:false, ReadOnly:true }, "ComObjectType", $asm01.TypeRef("System.Type"))
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm01.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:true , Public:false, ReadOnly:true }, "parameter", $asm04.TypeRef("System.Linq.Expressions.ParameterExpression"))
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm01.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Property({Static:false, Public:false}, "Items", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.DynamicMetaObjectProviderDebugView+DynamicProperty")]))
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm01.System.Diagnostics.DebuggerBrowsableState.RootHidden]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.DynamicMetaObjectProviderDebugView+DynamicProperty */ 

(function DynamicProperty$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.DynamicMetaObjectProviderDebugView+DynamicProperty", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "$name", $.String)
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm01.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false, ReadOnly:true }, "value", $.Object)
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm01.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false, ReadOnly:true }, "type", $.String)
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm01.System.Diagnostics.DebuggerBrowsableState.Never]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{value}"]; });

})();

/* class Microsoft.CSharp.RuntimeBinder.DynamicMetaObjectProviderDebugView+DynamicDebugViewEmptyException */ 

(function DynamicDebugViewEmptyException$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Exception"), 
      Name: "Microsoft.CSharp.RuntimeBinder.DynamicMetaObjectProviderDebugView+DynamicDebugViewEmptyException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Empty", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Property({Static:false, Public:true }, "Empty", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.DynamicMetaObjectProviderDebugView+<>c__DisplayClass20_0 */ 

(function $l$gc__DisplayClass20_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.DynamicMetaObjectProviderDebugView+<>c__DisplayClass20_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lQueryDynamicObject$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.Field({Static:false, Public:true }, "comExclusionList", $jsilcore.TypeRef("System.Array", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

JSIL.DeclareNamespace("Microsoft.CSharp.RuntimeBinder.Semantics");
/* class Microsoft.CSharp.RuntimeBinder.Semantics.ExprVisitorBase */ 

(function ExprVisitorBase$Members () {
  var $, $thisType;


























































































  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.ExprVisitorBase", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CacheExprMapping", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispatch", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DispatchStatementList", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRSTMT"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRSTMT")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsCachedExpr", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Visit", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitADD", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitADDR", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUNARYOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitARRAYINDEX", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRARRAYINDEX")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitARRAYLENGTH", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRARRAYLENGTH")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitARRINIT", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRARRINIT")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitASSIGNMENT", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRASSIGNMENT")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBINOP", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBITAND", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBITNOT", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUNARYOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBITOR", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBITXOR", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBLOCK", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBLOCK")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBOUNDLAMBDA", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBOUNDLAMBDA")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitCALL", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitCAST", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCAST")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitCLASS", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCLASS")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitCOMPARE", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitCONCAT", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCONCAT")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitCONSTANT", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCONSTANT")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDEC", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUNARYOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDECIMALDEC", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUNARYOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDECIMALINC", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUNARYOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDECIMALNEG", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUNARYOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDELEGATEADD", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDELEGATEEQ", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDELEGATENE", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDELEGATESUB", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDIV", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitEQ", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitEQUALS", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitEVENT", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPREVENT")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitEXPR", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitFALSE", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUNARYOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitFIELD", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFIELD")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitFIELDINFO", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFIELDINFO")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitFUNCPTR", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFUNCPTR")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitGE", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitGT", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitHOISTEDLOCALEXPR", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRHOISTEDLOCALEXPR")])
    );

    $.ExternalMethod({Static:false, Public:false}, "VisitChildren", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitINC", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUNARYOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitINDIR", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLE", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLIST", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRLIST")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLOCAL", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRLOCAL")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLOGAND", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLOGNOT", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUNARYOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLOGOR", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLSHIFT", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLT", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMEMGRP", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMEMGRP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMETHODINFO", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMETHODINFO")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMOD", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMUL", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMULTI", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMULTI")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMULTIGET", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMULTIGET")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitNE", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitNEG", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUNARYOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitPROP", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRPROP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitQUESTIONMARK", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRQUESTIONMARK")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitRANGE", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitRETURN", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRRETURN")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitRSHIFT", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitSAVE", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitSEQREV", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitSEQUENCE", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitSTMT", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRSTMT")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitSTRINGEQ", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitSTRINGNE", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitSUB", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitSWAP", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitTHISPOINTER", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTHISPOINTER")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitTRUE", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUNARYOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitTYPEARGUMENTS", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEARGUMENTS")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitTYPEOF", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEOF")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitTYPEORNAMESPACE", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEORNAMESPACE")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitUNARYOP", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUNARYOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitUNBOUNDLAMBDA", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUNBOUNDLAMBDA")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitUPLUS", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUNARYOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitUSERDEFINEDCONVERSION", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUSERDEFINEDCONVERSION")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitUSERLOGOP", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUSERLOGOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitWRAP", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRWRAP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitZEROINIT", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRZEROINIT")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.ExpressionTreeCallRewriter */ 

(function ExpressionTreeCallRewriter$Members () {
  var $, $thisType;



























  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExprVisitorBase"), 
      Name: "Microsoft.CSharp.RuntimeBinder.ExpressionTreeCallRewriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateArrayIndex", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ExpressionTreeCallRewriter+ExpressionEXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateAssignment", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ExpressionTreeCallRewriter+ExpressionEXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateBinaryOperator", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ExpressionTreeCallRewriter+ExpressionEXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateCall", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ExpressionTreeCallRewriter+ExpressionEXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateConstantType", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ExpressionTreeCallRewriter+ExpressionEXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateConvert", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ExpressionTreeCallRewriter+ExpressionEXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateField", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ExpressionTreeCallRewriter+ExpressionEXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateInvoke", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ExpressionTreeCallRewriter+ExpressionEXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateLambda", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ExpressionTreeCallRewriter+ExpressionEXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateNew", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ExpressionTreeCallRewriter+ExpressionEXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateProperty", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ExpressionTreeCallRewriter+ExpressionEXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateUnaryOperator", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ExpressionTreeCallRewriter+ExpressionEXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateUserDefinedBinaryOperator", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ExpressionTreeCallRewriter+ExpressionEXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateUserDefinedUnaryOperator", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ExpressionTreeCallRewriter+ExpressionEXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetArgumentsFromArrayInit", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Linq.Expressions.Expression")]), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRARRINIT")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConstructorInfoFromExpr", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.ConstructorInfo"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMETHODINFO")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetExpression", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMethodInfoFromExpr", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMETHODINFO")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetObject", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPropertyInfoFromExpr", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.PropertyInfo"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRPropertyInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Rewrite", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TypesAreEqual", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitCALL", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitCAST", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCAST")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitSAVE", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.Field({Static:false, Public:false}, "DictionaryOfParameters", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL"), $asm04.TypeRef("System.Linq.Expressions.Expression")]));

    $.Field({Static:false, Public:false}, "ListOfParameters", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")]));

    $.Field({Static:false, Public:false}, "m_typeManager", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager"));

    $.Field({Static:false, Public:false}, "currentParameterIndex", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPR */ 

(function EXPR$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "getArgs", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "getObject", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSymWithType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymWithType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "HasError", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "HasObject", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "isOK", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "RETAILVERIFY", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "setArgs", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "setAssignment", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "SetError", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "SetInaccessibleBit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "SetMismatchedStaticBit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "SetObject", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "setType", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"))
    );

    $.Field({Static:false, Public:false}, "RuntimeObject", $.Object);

    $.Field({Static:false, Public:false}, "RuntimeObjectActualType", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));

    $.Field({Static:false, Public:true }, "kind", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"));

    $.Field({Static:false, Public:true }, "flags", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"));

    $.Field({Static:false, Public:true }, "IsError", $.Boolean);

    $.Field({Static:false, Public:true }, "IsOptionalArgument", $.Boolean);

    $.Field({Static:false, Public:true }, "errorString", $.String);

    $.Field({Static:false, Public:true }, "type", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.ExpressionTreeCallRewriter+ExpressionEXPR */ 

(function ExpressionEXPR$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.ExpressionTreeCallRewriter+ExpressionEXPR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.Field({Static:false, Public:true }, "Expression", $asm04.TypeRef("System.Linq.Expressions.Expression"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder */ 

JSIL.MakeInterface(
  "Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder", false, [], function ($) {
    $.Method({}, "get_StaticCall", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "get_ResultDiscarded", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "get_CallingContext", JSIL.MethodSignature.Return($asm01.TypeRef("System.Type")));
    $.Method({}, "get_Flags", JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpCallFlags")));
    $.Method({}, "get_Name", JSIL.MethodSignature.Return($.String));
    $.Method({}, "get_TypeArguments", JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IList`1", [$asm01.TypeRef("System.Type")])));
    $.Method({}, "get_ArgumentInfo", JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IList`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")])));
    $.Property({}, "StaticCall");
    $.Property({}, "ResultDiscarded");
    $.Property({}, "CallingContext");
    $.Property({}, "Flags");
    $.Property({}, "Name");
    $.Property({}, "TypeArguments");
    $.Property({}, "ArgumentInfo");
  }, []);

/* class Microsoft.CSharp.RuntimeBinder.Strings */ 

(function Strings$Members () {
  var $, $thisType;


















  JSIL.MakeStaticClass("Microsoft.CSharp.RuntimeBinder.Strings", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "BindCallToConditionalMethod", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "BindPropertyFailedEvent", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "BindPropertyFailedMethodGroup", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BindBinaryAssignmentFailedNullReference", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BindBinaryAssignmentRequireTwoArguments", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BindBinaryOperatorRequireTwoArguments", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BindCallFailedOverloadResolution", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BindExplicitConversionRequireOneArgument", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BindImplicitConversionRequireOneArgument", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BindInvokeFailedNonDelegate", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BindRequireArguments", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BindToVoidMethodButExpectResult", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BindUnaryOperatorRequireOneArgument", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_EmptyDynamicView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_GetValueonWriteOnlyProperty", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InternalCompilerError", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NullReferenceOnMemberException", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Property({Static:true , Public:false}, "InternalCompilerError", $.String);

    $.Property({Static:true , Public:false}, "BindRequireArguments", $.String);

    $.Property({Static:true , Public:false}, "BindCallFailedOverloadResolution", $.String);

    $.Property({Static:true , Public:false}, "BindBinaryOperatorRequireTwoArguments", $.String);

    $.Property({Static:true , Public:false}, "BindUnaryOperatorRequireOneArgument", $.String);

    $.Property({Static:true , Public:false}, "BindInvokeFailedNonDelegate", $.String);

    $.Property({Static:true , Public:false}, "BindImplicitConversionRequireOneArgument", $.String);

    $.Property({Static:true , Public:false}, "BindExplicitConversionRequireOneArgument", $.String);

    $.Property({Static:true , Public:false}, "BindBinaryAssignmentRequireTwoArguments", $.String);

    $.Property({Static:true , Public:false}, "BindBinaryAssignmentFailedNullReference", $.String);

    $.Property({Static:true , Public:false}, "NullReferenceOnMemberException", $.String);

    $.Property({Static:true , Public:false}, "BindToVoidMethodButExpectResult", $.String);

    $.Property({Static:true , Public:false}, "EmptyDynamicView", $.String);

    $.Property({Static:true , Public:false}, "GetValueonWriteOnlyProperty", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Error */ 

(function Error$Members () {
  var $, $thisType;




















  JSIL.MakeStaticClass("Microsoft.CSharp.RuntimeBinder.Error", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNull", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentOutOfRange", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BindBinaryAssignmentFailedNullReference", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BindBinaryAssignmentRequireTwoArguments", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BindBinaryOperatorRequireTwoArguments", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BindCallFailedOverloadResolution", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BindCallToConditionalMethod", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "BindExplicitConversionRequireOneArgument", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BindImplicitConversionRequireOneArgument", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BindInvokeFailedNonDelegate", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BindPropertyFailedEvent", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "BindPropertyFailedMethodGroup", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "BindRequireArguments", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BindToVoidMethodButExpectResult", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BindUnaryOperatorRequireOneArgument", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalCompilerError", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NotImplemented", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NotSupported", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NullReferenceOnMemberException", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.ResetBindException */ 

(function ResetBindException$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Exception"), 
      Name: "Microsoft.CSharp.RuntimeBinder.ResetBindException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.RuntimeBinder */ 

(function RuntimeBinder$Members () {
  var $, $thisType;














































  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.RuntimeBinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCreateArgumentArray$gb__22_8", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [
          $asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo"), 
          $asm04.TypeRef("System.Linq.Expressions.Expression"), $asm04.TypeRef("System.Dynamic.DynamicMetaObject"), 
          $.Int32
        ])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "AddConversionsForArguments", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.RuntimeBinder+ArgumentObject")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Bind", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [
          $asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")]), 
          $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Dynamic.DynamicMetaObject")]), $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("System.Dynamic.DynamicMetaObject")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindAssignment", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.RuntimeBinder+ArgumentObject")]), 
          $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.LocalVariableSymbol")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindBinaryOperation", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpBinaryOperationBinder"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.RuntimeBinder+ArgumentObject")]), 
          $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.LocalVariableSymbol")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindCall", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.RuntimeBinder+ArgumentObject")]), $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.LocalVariableSymbol")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindCore", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [
          $asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")]), 
          $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Dynamic.DynamicMetaObject")]), $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("System.Dynamic.DynamicMetaObject")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindExplicitConversion", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.RuntimeBinder+ArgumentObject")]), $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.LocalVariableSymbol")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindImplicitConversion", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.RuntimeBinder+ArgumentObject")]), $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.LocalVariableSymbol")]), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindIsEvent", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpIsEventBinder"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.RuntimeBinder+ArgumentObject")]), 
          $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.LocalVariableSymbol")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindProperty", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.RuntimeBinder+ArgumentObject"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.LocalVariableSymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindUnaryOperation", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpUnaryOperationBinder"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.RuntimeBinder+ArgumentObject")]), 
          $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.LocalVariableSymbol")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindWinRTEventAccessor", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EventWithType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.RuntimeBinder+ArgumentObject")]), $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.LocalVariableSymbol")]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateArgumentArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.RuntimeBinder+ArgumentObject")]), [
          $asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")]), 
          $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Dynamic.DynamicMetaObject")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateArgumentEXPR", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.RuntimeBinder+ArgumentObject"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.LocalVariableSymbol")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateArgumentListEXPR", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.RuntimeBinder+ArgumentObject")]), $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.LocalVariableSymbol")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateArray", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateCallingObjectForCall", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.ICSharpInvokeOrInvokeMemberBinder"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.RuntimeBinder+ArgumentObject")]), 
          $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.LocalVariableSymbol")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateEvent", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPREVENT"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymWithType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateExpressionTreeFromResult", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")]), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.RuntimeBinder+ArgumentObject")]), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Scope"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateField", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymWithType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateIndexer", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymWithType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BindingFlag")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateLocal", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm01.TypeRef("System.Type"), $.Boolean, 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.LocalVariableSymbol")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateMemberGroupEXPR", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMEMGRP"), [
          $.String, $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm01.TypeRef("System.Type")]), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SYMKIND")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateProperty", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymWithType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BindingFlag")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeferBinding", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.RuntimeBinder+ArgumentObject")]), 
          $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Dynamic.DynamicMetaObject")]), $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.LocalVariableSymbol")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("System.Dynamic.DynamicMetaObject")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DispatchPayload", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.RuntimeBinder+ArgumentObject")]), 
          $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.LocalVariableSymbol")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateBoundLambda", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBOUNDLAMBDA"), [
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.RuntimeBinder+ArgumentObject")]), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Scope"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SymbolLoader", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBindingFlags", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BindingFlag"), [$asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCLROperatorName", 
      new JSIL.MethodSignature($.String, [$asm04.TypeRef("System.Linq.Expressions.ExpressionType")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetInstance", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetName", 
      new JSIL.MethodSignature($.String, [$asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetOperatorKind", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.OperatorKind"), [$asm04.TypeRef("System.Linq.Expressions.ExpressionType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetOperatorKind", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.OperatorKind"), [$asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckForConditionalMethodError", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeCallingContext", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IsBinderThatCanHaveRefReceiver", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PopulateLocalScope", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Scope"), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.RuntimeBinder+ArgumentObject")]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")]), 
          $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.LocalVariableSymbol")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PopulateSymbolTableWithPayloadInformation", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $asm01.TypeRef("System.Type"), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.RuntimeBinder+ArgumentObject")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReorderArgumentsForNamedAndOptional", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "StripNamedArgument", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:false}, "StripNamedArguments", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_singletonLock", $.Object);

    $.Field({Static:true , Public:false}, "s_instance", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.RuntimeBinder"));

    $.Field({Static:false, Public:false}, "m_symbolTable", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.SymbolTable"));

    $.Field({Static:false, Public:false}, "m_semanticChecker", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CSemanticChecker"));

    $.Field({Static:false, Public:false}, "m_exprFactory", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExprFactory"));

    $.Field({Static:false, Public:false}, "m_outputContext", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.OutputContext"));

    $.Field({Static:false, Public:false}, "m_nameGenerator", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NameGenerator"));

    $.Field({Static:false, Public:false}, "m_bindingContext", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BindingContext"));

    $.Field({Static:false, Public:false}, "m_binder", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder"));

    $.Field({Static:false, Public:false}, "m_controller", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.RuntimeBinderController"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_bindLock", $.Object);

    $.Property({Static:false, Public:false}, "SymbolLoader", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.RuntimeBinder+ArgumentObject */ 

(function ArgumentObject$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.RuntimeBinder+ArgumentObject", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "Type", $asm01.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "Value", $.Object);

    $.Field({Static:false, Public:false}, "Info", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.RuntimeBinder+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.RuntimeBinder+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCreateArgumentArray$gb__22_0", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo"), [$asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCreateArgumentArray$gb__22_1", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo"), [$asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCreateArgumentArray$gb__22_2", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo"), [$asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCreateArgumentArray$gb__22_3", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo"), [$asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCreateArgumentArray$gb__22_4", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo"), [$asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCreateArgumentArray$gb__22_5", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo"), [$asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCreateArgumentArray$gb__22_6", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo"), [$asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCreateArgumentArray$gb__22_7", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo"), [$asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $.Int32])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__22_0", $asm01.TypeRef("System.Func`3", [
          $asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $.Int32, 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")
        ]));

    $.Field({Static:true , Public:true }, "$l$g9__22_1", $asm01.TypeRef("System.Func`3", [
          $asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $.Int32, 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")
        ]));

    $.Field({Static:true , Public:true }, "$l$g9__22_2", $asm01.TypeRef("System.Func`3", [
          $asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $.Int32, 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")
        ]));

    $.Field({Static:true , Public:true }, "$l$g9__22_3", $asm01.TypeRef("System.Func`3", [
          $asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $.Int32, 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")
        ]));

    $.Field({Static:true , Public:true }, "$l$g9__22_4", $asm01.TypeRef("System.Func`3", [
          $asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $.Int32, 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")
        ]));

    $.Field({Static:true , Public:true }, "$l$g9__22_5", $asm01.TypeRef("System.Func`3", [
          $asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $.Int32, 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")
        ]));

    $.Field({Static:true , Public:true }, "$l$g9__22_6", $asm01.TypeRef("System.Func`3", [
          $asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $.Int32, 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")
        ]));

    $.Field({Static:true , Public:true }, "$l$g9__22_7", $asm01.TypeRef("System.Func`3", [
          $asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $.Int32, 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo")
        ]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

JSIL.DeclareNamespace("Microsoft.CSharp.RuntimeBinder.Errors");
/* class Microsoft.CSharp.RuntimeBinder.Errors.CController */ 

(function CController$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Errors.CController", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetErrorFactory", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.CErrorFactory"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SubmitError", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.CError"))
    );

    $.Field({Static:false, Public:false}, "m_errorFactory", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.CErrorFactory"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.RuntimeBinderController */ 

(function RuntimeBinderController$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.CController"), 
      Name: "Microsoft.CSharp.RuntimeBinder.RuntimeBinderController", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SubmitError", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.CError"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.RuntimeBinderException */ 

(function RuntimeBinderException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Exception"), 
      Name: "Microsoft.CSharp.RuntimeBinder.RuntimeBinderException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm00.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Exception")])
    )
      .Attribute($asm00.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class Microsoft.CSharp.RuntimeBinder.RuntimeBinderInternalCompilerException */ 

(function RuntimeBinderInternalCompilerException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Exception"), 
      Name: "Microsoft.CSharp.RuntimeBinder.RuntimeBinderInternalCompilerException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm00.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Exception")])
    )
      .Attribute($asm00.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class Microsoft.CSharp.RuntimeBinder.SpecialNames */ 

(function SpecialNames$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("Microsoft.CSharp.RuntimeBinder.SpecialNames", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "ImplicitConversion", $.String, "op_Implicit");

    $.Constant({Static:true , Public:true }, "ExplicitConversion", $.String, "op_Explicit");

    $.Constant({Static:true , Public:true }, "Invoke", $.String, "Invoke");

    $.Constant({Static:true , Public:true }, "Constructor", $.String, ".ctor");

    $.Constant({Static:true , Public:true }, "Indexer", $.String, "$Item$");

    $.Constant({Static:true , Public:true }, "CLR_Add", $.String, "op_Addition");

    $.Constant({Static:true , Public:true }, "CLR_Subtract", $.String, "op_Subtraction");

    $.Constant({Static:true , Public:true }, "CLR_Multiply", $.String, "op_Multiply");

    $.Constant({Static:true , Public:true }, "CLR_Division", $.String, "op_Division");

    $.Constant({Static:true , Public:true }, "CLR_Modulus", $.String, "op_Modulus");

    $.Constant({Static:true , Public:true }, "CLR_LShift", $.String, "op_LeftShift");

    $.Constant({Static:true , Public:true }, "CLR_RShift", $.String, "op_RightShift");

    $.Constant({Static:true , Public:true }, "CLR_LT", $.String, "op_LessThan");

    $.Constant({Static:true , Public:true }, "CLR_GT", $.String, "op_GreaterThan");

    $.Constant({Static:true , Public:true }, "CLR_LTE", $.String, "op_LessThanOrEqual");

    $.Constant({Static:true , Public:true }, "CLR_GTE", $.String, "op_GreaterThanOrEqual");

    $.Constant({Static:true , Public:true }, "CLR_Equality", $.String, "op_Equality");

    $.Constant({Static:true , Public:true }, "CLR_Inequality", $.String, "op_Inequality");

    $.Constant({Static:true , Public:true }, "CLR_BitwiseAnd", $.String, "op_BitwiseAnd");

    $.Constant({Static:true , Public:true }, "CLR_ExclusiveOr", $.String, "op_ExclusiveOr");

    $.Constant({Static:true , Public:true }, "CLR_BitwiseOr", $.String, "op_BitwiseOr");

    $.Constant({Static:true , Public:true }, "CLR_LogicalNot", $.String, "op_LogicalNot");

    $.Constant({Static:true , Public:true }, "CLR_InPlaceAdd", $.String, "op_Addition");

    $.Constant({Static:true , Public:true }, "CLR_InPlaceSubtract", $.String, "op_Subtraction");

    $.Constant({Static:true , Public:true }, "CLR_InPlaceMultiply", $.String, "op_Multiply");

    $.Constant({Static:true , Public:true }, "CLR_InPlaceDivide", $.String, "op_Division");

    $.Constant({Static:true , Public:true }, "CLR_InPlaceModulus", $.String, "op_Modulus");

    $.Constant({Static:true , Public:true }, "CLR_InPlaceBitwiseAnd", $.String, "op_BitwiseAnd");

    $.Constant({Static:true , Public:true }, "CLR_InPlaceExclusiveOr", $.String, "op_ExclusiveOr");

    $.Constant({Static:true , Public:true }, "CLR_InPlaceBitwiseOr", $.String, "op_BitwiseOr");

    $.Constant({Static:true , Public:true }, "CLR_InPlaceLShift", $.String, "op_LeftShift");

    $.Constant({Static:true , Public:true }, "CLR_InPlaceRShift", $.String, "op_RightShift");

    $.Constant({Static:true , Public:true }, "CLR_UnaryNegation", $.String, "op_UnaryNegation");

    $.Constant({Static:true , Public:true }, "CLR_UnaryPlus", $.String, "op_UnaryPlus");

    $.Constant({Static:true , Public:true }, "CLR_OnesComplement", $.String, "op_OnesComplement");

    $.Constant({Static:true , Public:true }, "CLR_True", $.String, "op_True");

    $.Constant({Static:true , Public:true }, "CLR_False", $.String, "op_False");

    $.Constant({Static:true , Public:true }, "CLR_PreIncrement", $.String, "op_Increment");

    $.Constant({Static:true , Public:true }, "CLR_PostIncrement", $.String, "op_Increment");

    $.Constant({Static:true , Public:true }, "CLR_PreDecrement", $.String, "op_Decrement");

    $.Constant({Static:true , Public:true }, "CLR_PostDecrement", $.String, "op_Decrement");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.SymbolTable */ 

(function SymbolTable$Members () {
  var $, $thisType;


















































  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.SymbolTable", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SYMTBL"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymFactory"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.NameManager"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BSYMMGR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CSemanticChecker"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.InputFile")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAggregateToSymbolTable", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NamespaceOrAggregateSymbol"), $asm01.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddConversionsForOneType", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddConversionsForType", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddEventToSymbolTable", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EventSymbol"), [
          $asm01.TypeRef("System.Reflection.EventInfo"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.FieldSymbol")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddFieldToSymbolTable", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.FieldSymbol"), [$asm01.TypeRef("System.Reflection.FieldInfo"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddMethodToSymbolTable", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"), [
          $asm01.TypeRef("System.Reflection.MemberInfo"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodKindEnum")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddNamesInInheritanceHierarchy", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.MemberInfo")]), [
          $.String, $asm01.TypeRef("System.Reflection.BindingFlags"), 
          $asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.Type")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddNamesOnType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.MemberInfo")]), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.SymbolTable+NameHashKey"), $asm01.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddNamespaceToSymbolTable", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NamespaceSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NamespaceOrAggregateSymbol"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddPredefinedMethodToSymbolTable", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddPredefinedPropertyToSymbolTable", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddPropertyToSymbolTable", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PropertySymbol"), [$asm01.TypeRef("System.Reflection.PropertyInfo"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddTypeParameterToSymbolTable", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterType"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"), 
          $asm01.TypeRef("System.Type"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AggregateContainsMethod", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), $.String, 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.symbmask_t")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AreTypeParametersEquivalent", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildDeclarationChain", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$.Object]), [$asm01.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearCache", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateInheritanceHierarchyList", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.Type")]), [$asm01.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateParameterArray", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), [$asm01.TypeRef("System.Reflection.MemberInfo"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Reflection.ParameterInfo")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "DoesMethodHaveParameterArray", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Reflection.ParameterInfo")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindMatchingMethod", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"), [$asm01.TypeRef("System.Reflection.MemberInfo"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindMethodFromMemberInfo", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"), [$asm01.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindSymWithMatchingArity", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), $asm01.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAggregateTypeParameters", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), [$asm01.TypeRef("System.Type"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConstructedType", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), [$asm01.TypeRef("System.Type"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCountOfModOpts", 
      new JSIL.MethodSignature($.UInt32, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Reflection.ParameterInfo")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCTypeArrayFromTypes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")]), [$asm01.TypeRef("System.Collections.Generic.IList`1", [$asm01.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCTypeFromType", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), [$asm01.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetIsInvokableDelegate", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Func`2", [$asm01.TypeRef("System.Reflection.MethodBase"), $.Boolean]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMethodTypeParameters", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), [$asm01.TypeRef("System.Reflection.MethodInfo"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetName", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetName", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), [$asm01.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetName", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), [$.String, $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.NameManager")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOriginalTypeParameterType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$asm01.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSlotForOverride", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymWithType"), [$asm01.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeOfParameter", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), [$asm01.TypeRef("System.Reflection.ParameterInfo"), $asm01.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsMethodDynamicallyInvokable", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.MethodBase")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsOperator", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadClassTypeParameter", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), $asm01.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadMethodTypeParameter", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"), $asm01.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadSymbolsFromType", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), [$asm01.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupMember", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymWithType"), [
          $.String, $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ParentSymbol"), $.Int32, 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MemberLookup"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PopulateSymbolTableWithName", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Type")]), 
          $asm01.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessMethodTypeParameter", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterType"), [
          $asm01.TypeRef("System.Reflection.MethodInfo"), $asm01.TypeRef("System.Type"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessSpecialTypeInChain", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NamespaceOrAggregateSymbol"), $asm01.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetInterfacesOnAggregate", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), $asm01.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetParameterAttributes", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodOrPropertySymbol"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Reflection.ParameterInfo")]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetParameterDataForMethProp", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodOrPropertySymbol"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Reflection.ParameterInfo")])])
    );

    $.Field({Static:false, Public:false}, "m_typesWithConversionsLoaded", $asm04.TypeRef("System.Collections.Generic.HashSet`1", [$asm01.TypeRef("System.Type")]));

    $.Field({Static:false, Public:false}, "m_namesLoadedForEachType", $asm04.TypeRef("System.Collections.Generic.HashSet`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.SymbolTable+NameHashKey")]));

    $.Field({Static:false, Public:false}, "m_symbolTable", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SYMTBL"));

    $.Field({Static:false, Public:false}, "m_symFactory", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymFactory"));

    $.Field({Static:false, Public:false}, "m_nameManager", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.NameManager"));

    $.Field({Static:false, Public:false}, "m_typeManager", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager"));

    $.Field({Static:false, Public:false}, "m_bsymmgr", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BSYMMGR"));

    $.Field({Static:false, Public:false}, "m_semanticChecker", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CSemanticChecker"));

    $.Field({Static:false, Public:false}, "m_rootNamespace", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NamespaceSymbol"));

    $.Field({Static:false, Public:false}, "m_infile", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.InputFile"));

    $.Field({Static:true , Public:false}, "s_IsInvokableDelegate", $asm01.TypeRef("System.Func`2", [$asm01.TypeRef("System.Reflection.MethodBase"), $.Boolean]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.SymbolTable+NameHashKey */ 

(function NameHashKey$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.SymbolTable+NameHashKey", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "type", $asm01.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "$name", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.SymbolTable+<>c__DisplayClass18_0 */ 

(function $l$gc__DisplayClass18_0$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.SymbolTable+<>c__DisplayClass18_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "$name", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.CSharp.RuntimeBinder.SymbolTable+<>c__DisplayClass18_1 */ 

(function $l$gc__DisplayClass18_1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.SymbolTable+<>c__DisplayClass18_1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lAddNamesInInheritanceHierarchy$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lAddNamesInInheritanceHierarchy$gb__1", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.MemberInfo")])
    );

    $.Field({Static:false, Public:true }, "type", $asm01.TypeRef("System.Type"));

    $.Field({Static:false, Public:true }, "CS$$l$g8__locals1", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.SymbolTable+<>c__DisplayClass18_0"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.CSharp.RuntimeBinder.SymbolTable+<>c__DisplayClass34_0 */ 

(function $l$gc__DisplayClass34_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.SymbolTable+<>c__DisplayClass34_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBuildDeclarationChain$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.MethodInfo")])
    );

    $.Field({Static:false, Public:true }, "methodBase", $asm01.TypeRef("System.Reflection.MethodBase"));

    $.Field({Static:false, Public:true }, "$l$g9__0", $asm01.TypeRef("System.Func`2", [$asm01.TypeRef("System.Reflection.MethodInfo"), $.Boolean]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.CSharp.RuntimeBinder.SymbolTable+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.SymbolTable+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lAddAggregateToSymbolTable$gb__39_0", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.ConstructorInfo")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__39_0", $asm01.TypeRef("System.Func`2", [$asm01.TypeRef("System.Reflection.ConstructorInfo"), $.Boolean]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.CSharp.RuntimeBinder.SymbolTable+<>c__DisplayClass43_0 */ 

(function $l$gc__DisplayClass43_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.SymbolTable+<>c__DisplayClass43_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lAddPredefinedPropertyToSymbolTable$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.PropertyInfo")])
    );

    $.Field({Static:false, Public:true }, "property", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.CSharp.RuntimeBinder.SymbolTable+<>c__DisplayClass45_0 */ 

(function $l$gc__DisplayClass45_0$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.SymbolTable+<>c__DisplayClass45_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lAddPredefinedMethodToSymbolTable$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.ConstructorInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lAddPredefinedMethodToSymbolTable$gb__1", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.MethodInfo")])
    );

    $.Field({Static:false, Public:true }, "methodName", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"));

    $.Field({Static:false, Public:true }, "t", $asm01.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.CSharp.RuntimeBinder.SymbolTable+<>c__DisplayClass59_0 */ 

(function $l$gc__DisplayClass59_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.SymbolTable+<>c__DisplayClass59_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lAddConversionsForOneType$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.MethodInfo")])
    );

    $.Field({Static:false, Public:true }, "type", $asm01.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.CSharp.RuntimeBinder.RuntimeBinderExtensions */ 

(function RuntimeBinderExtensions$Members () {
  var $, $thisType;





  JSIL.MakeStaticClass("Microsoft.CSharp.RuntimeBinder.RuntimeBinderExtensions", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "IsEquivalentTo", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.MemberInfo"), $asm01.TypeRef("System.Reflection.MemberInfo")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IsEquivalentTo", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.ParameterInfo"), $asm01.TypeRef("System.Reflection.ParameterInfo")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IsGenericallyEqual", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IsNullableType", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class Microsoft.CSharp.RuntimeBinder.RuntimeBinderExtensions+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.RuntimeBinderExtensions+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lIsEquivalentTo$gb__1_0", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.ParameterInfo"), $asm01.TypeRef("System.Reflection.ParameterInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lIsEquivalentTo$gb__1_1", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lIsEquivalentTo$gb__1_2", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.ParameterInfo"), $asm01.TypeRef("System.Reflection.ParameterInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lIsEquivalentTo$gb__1_3", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__1_0", $asm01.TypeRef("System.Func`3", [
          $asm01.TypeRef("System.Reflection.ParameterInfo"), $asm01.TypeRef("System.Reflection.ParameterInfo"), 
          $.Boolean
        ]));

    $.Field({Static:true , Public:true }, "$l$g9__1_1", $asm01.TypeRef("System.Func`2", [$.Boolean, $.Boolean]));

    $.Field({Static:true , Public:true }, "$l$g9__1_2", $asm01.TypeRef("System.Func`3", [
          $asm01.TypeRef("System.Reflection.ParameterInfo"), $asm01.TypeRef("System.Reflection.ParameterInfo"), 
          $.Boolean
        ]));

    $.Field({Static:true , Public:true }, "$l$g9__1_3", $asm01.TypeRef("System.Func`2", [$.Boolean, $.Boolean]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.CSharp.RuntimeBinder.SRDescriptionAttribute */ 

(function SRDescriptionAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ComponentModel.DescriptionAttribute"), 
      Name: "Microsoft.CSharp.RuntimeBinder.SRDescriptionAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.All]; });

})();

/* class Microsoft.CSharp.RuntimeBinder.SRCategoryAttribute */ 

(function SRCategoryAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ComponentModel.CategoryAttribute"), 
      Name: "Microsoft.CSharp.RuntimeBinder.SRCategoryAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocalizedString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.All]; });

})();

/* class Microsoft.CSharp.RuntimeBinder.SR */ 

(function SR$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.SR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm01.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.Constant({Static:true , Public:false}, "InternalCompilerError", $.String, "InternalCompilerError");

    $.Constant({Static:true , Public:false}, "BindRequireArguments", $.String, "BindRequireArguments");

    $.Constant({Static:true , Public:false}, "BindCallFailedOverloadResolution", $.String, "BindCallFailedOverloadResolution");

    $.Constant({Static:true , Public:false}, "BindBinaryOperatorRequireTwoArguments", $.String, "BindBinaryOperatorRequireTwoArguments");

    $.Constant({Static:true , Public:false}, "BindUnaryOperatorRequireOneArgument", $.String, "BindUnaryOperatorRequireOneArgument");

    $.Constant({Static:true , Public:false}, "BindPropertyFailedMethodGroup", $.String, "BindPropertyFailedMethodGroup");

    $.Constant({Static:true , Public:false}, "BindPropertyFailedEvent", $.String, "BindPropertyFailedEvent");

    $.Constant({Static:true , Public:false}, "BindInvokeFailedNonDelegate", $.String, "BindInvokeFailedNonDelegate");

    $.Constant({Static:true , Public:false}, "BindImplicitConversionRequireOneArgument", $.String, "BindImplicitConversionRequireOneArgument");

    $.Constant({Static:true , Public:false}, "BindExplicitConversionRequireOneArgument", $.String, "BindExplicitConversionRequireOneArgument");

    $.Constant({Static:true , Public:false}, "BindBinaryAssignmentRequireTwoArguments", $.String, "BindBinaryAssignmentRequireTwoArguments");

    $.Constant({Static:true , Public:false}, "BindBinaryAssignmentFailedNullReference", $.String, "BindBinaryAssignmentFailedNullReference");

    $.Constant({Static:true , Public:false}, "NullReferenceOnMemberException", $.String, "NullReferenceOnMemberException");

    $.Constant({Static:true , Public:false}, "BindCallToConditionalMethod", $.String, "BindCallToConditionalMethod");

    $.Constant({Static:true , Public:false}, "BindToVoidMethodButExpectResult", $.String, "BindToVoidMethodButExpectResult");

    $.Constant({Static:true , Public:false}, "EmptyDynamicView", $.String, "EmptyDynamicView");

    $.Constant({Static:true , Public:false}, "GetValueonWriteOnlyProperty", $.String, "GetValueonWriteOnlyProperty");

    $.Field({Static:true , Public:false}, "loader", $.Type);

    $.Field({Static:false, Public:false}, "resources", $asm01.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm01.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm01.TypeRef("System.Resources.ResourceManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.CSharp.RuntimeBinder.Syntax");
/* class Microsoft.CSharp.RuntimeBinder.Syntax.NameManager */ 

(function NameManager$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Syntax.NameManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.NameTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPredefinedName", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPredefName", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitKnownNames", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Lookup", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), [$.String])
    );

    $.Field({Static:true , Public:false}, "_knownNames", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.NameTable"));

    $.Field({Static:true , Public:false}, "_predefinedNames", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.NameManager+KnownName")]));

    $.Field({Static:true , Public:false}, "_otherNames", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.NameManager+KnownName")]));

    $.Field({Static:false, Public:false}, "names", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.NameTable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Syntax.Name */ 

(function Name$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Syntax.Name", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PredefinedName", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Text", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_text", $.String);

    $.Property({Static:false, Public:true }, "Text", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "PredefinedName", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedName"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Syntax.NameManager+KnownName */ 

(function KnownName$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Syntax.NameManager+KnownName", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedName")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PredefinedName", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedName"))
    );

    $.Field({Static:false, Public:false}, "id", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedName"));

    $.Property({Static:false, Public:true , Virtual:true }, "PredefinedName", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedName"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Syntax.NameTable */ 

(function NameTable$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Syntax.NameTable", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddEntry", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ComputeHashCode", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Grow", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Lookup", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), [$.String])
    );

    $.Field({Static:false, Public:false}, "entries", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.NameTable+Entry")]));

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "mask", $.Int32);

    $.Field({Static:false, Public:false}, "hashCodeRandomizer", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Syntax.NameTable+Entry */ 

(function Entry$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Syntax.NameTable+Entry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $.Int32, 
          $.Type
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "$name", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "hashCode", $.Int32);

    $.Field({Static:false, Public:false}, "next", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.CSharp.RuntimeBinder.Syntax.OperatorKind */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Syntax.OperatorKind", 
    BaseType: $asm01.TypeRef("System.UInt32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    OP_NONE: 0, 
    OP_ASSIGN: 1, 
    OP_ADDEQ: 2, 
    OP_SUBEQ: 3, 
    OP_MULEQ: 4, 
    OP_DIVEQ: 5, 
    OP_MODEQ: 6, 
    OP_ANDEQ: 7, 
    OP_XOREQ: 8, 
    OP_OREQ: 9, 
    OP_LSHIFTEQ: 10, 
    OP_RSHIFTEQ: 11, 
    OP_QUESTION: 12, 
    OP_VALORDEF: 13, 
    OP_LOGOR: 14, 
    OP_LOGAND: 15, 
    OP_BITOR: 16, 
    OP_BITXOR: 17, 
    OP_BITAND: 18, 
    OP_EQ: 19, 
    OP_NEQ: 20, 
    OP_LT: 21, 
    OP_LE: 22, 
    OP_GT: 23, 
    OP_GE: 24, 
    OP_IS: 25, 
    OP_AS: 26, 
    OP_LSHIFT: 27, 
    OP_RSHIFT: 28, 
    OP_ADD: 29, 
    OP_SUB: 30, 
    OP_MUL: 31, 
    OP_DIV: 32, 
    OP_MOD: 33, 
    OP_NOP: 34, 
    OP_UPLUS: 35, 
    OP_NEG: 36, 
    OP_BITNOT: 37, 
    OP_LOGNOT: 38, 
    OP_PREINC: 39, 
    OP_PREDEC: 40, 
    OP_TYPEOF: 41, 
    OP_CHECKED: 42, 
    OP_UNCHECKED: 43, 
    OP_MAKEREFANY: 44, 
    OP_REFVALUE: 45, 
    OP_REFTYPE: 46, 
    OP_ARGS: 47, 
    OP_CAST: 48, 
    OP_INDIR: 49, 
    OP_ADDR: 50, 
    OP_COLON: 51, 
    OP_THIS: 52, 
    OP_BASE: 53, 
    OP_NULL: 54, 
    OP_TRUE: 55, 
    OP_FALSE: 56, 
    OP_CALL: 57, 
    OP_DEREF: 58, 
    OP_PAREN: 59, 
    OP_POSTINC: 60, 
    OP_POSTDEC: 61, 
    OP_DOT: 62, 
    OP_IMPLICIT: 63, 
    OP_EXPLICIT: 64, 
    OP_EQUALS: 65, 
    OP_COMPARE: 66, 
    OP_DEFAULT: 67, 
    OP_LAST: 68, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedName */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedName", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    PN_CTOR: 0, 
    PN_DTOR: 1, 
    PN_STATCTOR: 2, 
    PN_PTR: 3, 
    PN_NUB: 4, 
    PN_OUTPARAM: 5, 
    PN_REFPARAM: 6, 
    PN_ARRAY0: 7, 
    PN_ARRAY1: 8, 
    PN_ARRAY2: 9, 
    PN_GARRAY0: 10, 
    PN_GARRAY1: 11, 
    PN_GARRAY2: 12, 
    PN_INVOKE: 13, 
    PN_LENGTH: 14, 
    PN_INDEXER: 15, 
    PN_INDEXERINTERNAL: 16, 
    PN_COMBINE: 17, 
    PN_REMOVE: 18, 
    PN_OPEXPLICITMN: 19, 
    PN_OPIMPLICITMN: 20, 
    PN_OPUNARYPLUS: 21, 
    PN_OPUNARYMINUS: 22, 
    PN_OPCOMPLEMENT: 23, 
    PN_OPINCREMENT: 24, 
    PN_OPDECREMENT: 25, 
    PN_OPPLUS: 26, 
    PN_OPMINUS: 27, 
    PN_OPMULTIPLY: 28, 
    PN_OPDIVISION: 29, 
    PN_OPMODULUS: 30, 
    PN_OPXOR: 31, 
    PN_OPBITWISEAND: 32, 
    PN_OPBITWISEOR: 33, 
    PN_OPLEFTSHIFT: 34, 
    PN_OPRIGHTSHIFT: 35, 
    PN_OPEQUALS: 36, 
    PN_OPCOMPARE: 37, 
    PN_OPEQUALITY: 38, 
    PN_OPINEQUALITY: 39, 
    PN_OPGREATERTHAN: 40, 
    PN_OPLESSTHAN: 41, 
    PN_OPGREATERTHANOREQUAL: 42, 
    PN_OPLESSTHANOREQUAL: 43, 
    PN_OPTRUE: 44, 
    PN_OPFALSE: 45, 
    PN_OPNEGATION: 46, 
    PN_CONCAT: 47, 
    PN_ADD: 48, 
    PN_GETLENGTH: 49, 
    PN_GETCHARS: 50, 
    PN_CREATEDELEGATE: 51, 
    PN_FIXEDELEMENT: 52, 
    PN_HASVALUE: 53, 
    PN_GETHASVALUE: 54, 
    PN_CAP_VALUE: 55, 
    PN_GETVALUE: 56, 
    PN_GET_VALUE_OR_DEF: 57, 
    PN_MISSING: 58, 
    PN_MISSINGSYM: 59, 
    PN_LAMBDA: 60, 
    PN_PARAMETER: 61, 
    PN_CONSTANT: 62, 
    PN_CONVERT: 63, 
    PN_CONVERTCHECKED: 64, 
    PN_ADDCHECKED: 65, 
    PN_DIVIDE: 66, 
    PN_MODULO: 67, 
    PN_MULTIPLY: 68, 
    PN_MULTIPLYCHECKED: 69, 
    PN_SUBTRACT: 70, 
    PN_SUBTRACTCHECKED: 71, 
    PN_AND: 72, 
    PN_OR: 73, 
    PN_EXCLUSIVEOR: 74, 
    PN_LEFTSHIFT: 75, 
    PN_RIGHTSHIFT: 76, 
    PN_ANDALSO: 77, 
    PN_ORELSE: 78, 
    PN_EQUAL: 79, 
    PN_NOTEQUAL: 80, 
    PN_GREATERTHANOREQUAL: 81, 
    PN_GREATERTHAN: 82, 
    PN_LESSTHAN: 83, 
    PN_LESSTHANOREQUAL: 84, 
    PN_ARRAYINDEX: 85, 
    PN_ASSIGN: 86, 
    PN_CONDITION: 87, 
    PN_CAP_FIELD: 88, 
    PN_CALL: 89, 
    PN_NEW: 90, 
    PN_QUOTE: 91, 
    PN_ARRAYLENGTH: 92, 
    PN_PLUS: 93, 
    PN_NEGATE: 94, 
    PN_NEGATECHECKED: 95, 
    PN_NOT: 96, 
    PN_NEWARRAYINIT: 97, 
    PN_EXPRESSION_PROPERTY: 98, 
    PN_ADDEVENTHANDLER: 99, 
    PN_REMOVEEVENTHANDLER: 100, 
    PN_INVOCATIONLIST: 101, 
    PN_GETORCREATEEVENTREGISTRATIONTOKENTABLE: 102, 
    PN_COUNT: 103, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType", 
    BaseType: $asm01.TypeRef("System.UInt32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    PT_BYTE: 0, 
    PT_SHORT: 1, 
    PT_INT: 2, 
    PT_LONG: 3, 
    PT_FLOAT: 4, 
    PT_DOUBLE: 5, 
    PT_DECIMAL: 6, 
    PT_CHAR: 7, 
    PT_BOOL: 8, 
    PT_SBYTE: 9, 
    PT_USHORT: 10, 
    PT_UINT: 11, 
    PT_ULONG: 12, 
    PT_INTPTR: 13, 
    PT_UINTPTR: 14, 
    PT_OBJECT: 15, 
    PT_STRING: 16, 
    PT_DELEGATE: 17, 
    PT_MULTIDEL: 18, 
    PT_ARRAY: 19, 
    PT_EXCEPTION: 20, 
    PT_TYPE: 21, 
    PT_MONITOR: 22, 
    PT_VALUE: 23, 
    PT_ENUM: 24, 
    PT_DATETIME: 25, 
    PT_SECURITYATTRIBUTE: 26, 
    PT_SECURITYPERMATTRIBUTE: 27, 
    PT_UNVERIFCODEATTRIBUTE: 28, 
    PT_DEBUGGABLEATTRIBUTE: 29, 
    PT_DEBUGGABLEATTRIBUTE_DEBUGGINGMODES: 30, 
    PT_MARSHALBYREF: 31, 
    PT_CONTEXTBOUND: 32, 
    PT_IN: 33, 
    PT_OUT: 34, 
    PT_ATTRIBUTE: 35, 
    PT_ATTRIBUTEUSAGE: 36, 
    PT_ATTRIBUTETARGETS: 37, 
    PT_OBSOLETE: 38, 
    PT_CONDITIONAL: 39, 
    PT_CLSCOMPLIANT: 40, 
    PT_GUID: 41, 
    PT_DEFAULTMEMBER: 42, 
    PT_PARAMS: 43, 
    PT_COMIMPORT: 44, 
    PT_FIELDOFFSET: 45, 
    PT_STRUCTLAYOUT: 46, 
    PT_LAYOUTKIND: 47, 
    PT_MARSHALAS: 48, 
    PT_DLLIMPORT: 49, 
    PT_INDEXERNAME: 50, 
    PT_DECIMALCONSTANT: 51, 
    PT_REQUIRED: 52, 
    PT_DEFAULTVALUE: 53, 
    PT_UNMANAGEDFUNCTIONPOINTER: 54, 
    PT_CALLINGCONVENTION: 55, 
    PT_CHARSET: 56, 
    PT_REFANY: 57, 
    PT_ARGITERATOR: 58, 
    PT_TYPEHANDLE: 59, 
    PT_FIELDHANDLE: 60, 
    PT_METHODHANDLE: 61, 
    PT_ARGUMENTHANDLE: 62, 
    PT_HASHTABLE: 63, 
    PT_G_DICTIONARY: 64, 
    PT_IASYNCRESULT: 65, 
    PT_ASYNCCBDEL: 66, 
    PT_SECURITYACTION: 67, 
    PT_IDISPOSABLE: 68, 
    PT_IENUMERABLE: 69, 
    PT_IENUMERATOR: 70, 
    PT_SYSTEMVOID: 71, 
    PT_RUNTIMEHELPERS: 72, 
    PT_VOLATILEMOD: 73, 
    PT_COCLASS: 74, 
    PT_ACTIVATOR: 75, 
    PT_G_IENUMERABLE: 76, 
    PT_G_IENUMERATOR: 77, 
    PT_G_OPTIONAL: 78, 
    PT_FIXEDBUFFER: 79, 
    PT_DEFAULTCHARSET: 80, 
    PT_COMPILATIONRELAXATIONS: 81, 
    PT_RUNTIMECOMPATIBILITY: 82, 
    PT_FRIENDASSEMBLY: 83, 
    PT_DEBUGGERHIDDEN: 84, 
    PT_TYPEFORWARDER: 85, 
    PT_KEYFILE: 86, 
    PT_KEYNAME: 87, 
    PT_DELAYSIGN: 88, 
    PT_NOTSUPPORTEDEXCEPTION: 89, 
    PT_THREAD: 90, 
    PT_COMPILERGENERATED: 91, 
    PT_UNSAFEVALUETYPE: 92, 
    PT_ASSEMBLYFLAGS: 93, 
    PT_ASSEMBLYVERSION: 94, 
    PT_ASSEMBLYCULTURE: 95, 
    PT_G_IQUERYABLE: 96, 
    PT_IQUERYABLE: 97, 
    PT_STRINGBUILDER: 98, 
    PT_G_ICOLLECTION: 99, 
    PT_G_ILIST: 100, 
    PT_EXTENSION: 101, 
    PT_G_EXPRESSION: 102, 
    PT_EXPRESSION: 103, 
    PT_LAMBDAEXPRESSION: 104, 
    PT_BINARYEXPRESSION: 105, 
    PT_UNARYEXPRESSION: 106, 
    PT_CONDITIONALEXPRESSION: 107, 
    PT_CONSTANTEXPRESSION: 108, 
    PT_PARAMETEREXPRESSION: 109, 
    PT_MEMBEREXPRESSION: 110, 
    PT_METHODCALLEXPRESSION: 111, 
    PT_NEWEXPRESSION: 112, 
    PT_BINDING: 113, 
    PT_MEMBERINITEXPRESSION: 114, 
    PT_LISTINITEXPRESSION: 115, 
    PT_TYPEBINARYEXPRESSION: 116, 
    PT_NEWARRAYEXPRESSION: 117, 
    PT_MEMBERASSIGNMENT: 118, 
    PT_MEMBERLISTBINDING: 119, 
    PT_MEMBERMEMBERBINDING: 120, 
    PT_INVOCATIONEXPRESSION: 121, 
    PT_FIELDINFO: 122, 
    PT_METHODINFO: 123, 
    PT_CONSTRUCTORINFO: 124, 
    PT_PROPERTYINFO: 125, 
    PT_METHODBASE: 126, 
    PT_MEMBERINFO: 127, 
    PT_DEBUGGERDISPLAY: 128, 
    PT_DEBUGGERBROWSABLE: 129, 
    PT_DEBUGGERBROWSABLESTATE: 130, 
    PT_G_EQUALITYCOMPARER: 131, 
    PT_ELEMENTINITIALIZER: 132, 
    PT_UNKNOWNWRAPPER: 133, 
    PT_DISPATCHWRAPPER: 134, 
    PT_MISSING: 135, 
    PT_G_IREADONLYLIST: 136, 
    PT_G_IREADONLYCOLLECTION: 137, 
    PT_COUNT: 138, 
    PT_VOID: 139, 
    PT_UNDEFINEDINDEX: 4294967295, 
  }
);

/* class Microsoft.CSharp.RuntimeBinder.Syntax.TokenFacts */ 

(function TokenFacts$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("Microsoft.CSharp.RuntimeBinder.Syntax.TokenFacts", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GetText", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.TokenKind")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.CSharp.RuntimeBinder.Syntax.TokenKind */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Syntax.TokenKind", 
    BaseType: $asm01.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ArgList: 0, 
    MakeRef: 1, 
    RefType: 2, 
    RefValue: 3, 
    As: 4, 
    Base: 5, 
    Checked: 6, 
    Explicit: 7, 
    False: 8, 
    Implicit: 9, 
    Is: 10, 
    Null: 11, 
    This: 12, 
    True: 13, 
    TypeOf: 14, 
    Unchecked: 15, 
    Void: 16, 
    Equal: 17, 
    PlusEqual: 18, 
    MinusEqual: 19, 
    SplatEqual: 20, 
    SlashEqual: 21, 
    PercentEqual: 22, 
    AndEqual: 23, 
    HatEqual: 24, 
    BarEqual: 25, 
    LeftShiftEqual: 26, 
    RightShiftEqual: 27, 
    Question: 28, 
    Colon: 29, 
    ColonColon: 30, 
    LogicalOr: 31, 
    LogicalAnd: 32, 
    Bar: 33, 
    Hat: 34, 
    Ampersand: 35, 
    EqualEqual: 36, 
    NotEqual: 37, 
    LessThan: 38, 
    LessThanEqual: 39, 
    GreaterThan: 40, 
    GreaterThanEqual: 41, 
    LeftShift: 42, 
    RightShift: 43, 
    Plus: 44, 
    Minus: 45, 
    Splat: 46, 
    Slash: 47, 
    Percent: 48, 
    Tilde: 49, 
    Bang: 50, 
    PlusPlus: 51, 
    MinusMinus: 52, 
    Dot: 53, 
    QuestionQuestion: 54, 
    Unknown: 55, 
  }
);

/* class Microsoft.CSharp.RuntimeBinder.Semantics.OutputContext */ 

(function OutputContext$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.OutputContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "m_pThisPointer", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.LocalVariableSymbol"));

    $.Field({Static:false, Public:true }, "m_pCurrentMethodSymbol", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"));

    $.Field({Static:false, Public:true }, "m_bUnsafeErrorGiven", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.UNSAFESTATES */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.UNSAFESTATES", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    UNSAFESTATES_Unsafe: 0, 
    UNSAFESTATES_Safe: 1, 
    UNSAFESTATES_Unknown: 2, 
  }
);

/* class Microsoft.CSharp.RuntimeBinder.Semantics.BindingContext */ 

(function BindingContext$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.CSharp.RuntimeBinder.Semantics.KAID)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.CSharp.RuntimeBinder.Semantics.CSemanticChecker)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader)) ();
  };








  function BindingContext_get_CheckedConstant () {
    return this.BindingContext$CheckedConstant$value;
  }; 

  function BindingContext_get_CheckedNormal () {
    return this.BindingContext$CheckedNormal$value;
  }; 

  function BindingContext_get_m_aidExternAliasLookupContext () {
    return this.BindingContext$m_aidExternAliasLookupContext$value;
  }; 

  function BindingContext_get_SemanticChecker () {
    return this.BindingContext$SemanticChecker$value;
  }; 

  function BindingContext_get_SymbolLoader () {
    return this.BindingContext$SymbolLoader$value;
  }; 














  function BindingContext_set_CheckedConstant (value) {
    this.BindingContext$CheckedConstant$value = value;
  }; 

  function BindingContext_set_CheckedNormal (value) {
    this.BindingContext$CheckedNormal$value = value;
  }; 

  function BindingContext_set_m_aidExternAliasLookupContext (value) {
    this.BindingContext$m_aidExternAliasLookupContext$value = value;
  }; 

  function BindingContext_set_SemanticChecker (value) {
    this.BindingContext$SemanticChecker$value = value;
  }; 

  function BindingContext_set_SymbolLoader (value) {
    this.BindingContext$SymbolLoader$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.BindingContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 11, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CSemanticChecker"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExprFactory"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.OutputContext"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NameGenerator"), 
          $.Boolean, $.Boolean, 
          $.Boolean, $.Boolean, 
          $.Boolean, $.Boolean, 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.KAID")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "ContainingAgg", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ContextForMemberLookup", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Declaration"))
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Type, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CSemanticChecker"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExprFactory"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.OutputContext"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NameGenerator"), 
          $.Boolean, $.Boolean, 
          $.Boolean, $.Boolean, 
          $.Boolean, $.Boolean, 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.KAID")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:true }, "get_CheckedConstant", 
      JSIL.MethodSignature.Return($.Boolean), 
      BindingContext_get_CheckedConstant
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_CheckedNormal", 
      JSIL.MethodSignature.Return($.Boolean), 
      BindingContext_get_CheckedNormal
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_m_aidExternAliasLookupContext", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.KAID")), 
      BindingContext_get_m_aidExternAliasLookupContext
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_SemanticChecker", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CSemanticChecker")), 
      BindingContext_get_SemanticChecker
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_SymbolLoader", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader")), 
      BindingContext_get_SymbolLoader
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetExprFactory", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExprFactory"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOutputContext", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.OutputContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetThisPointer", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.LocalVariableSymbol"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetUnsafeState", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.UNSAFESTATES"))
    );

    $.ExternalMethod({Static:false, Public:true }, "InAnonymousMethod", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "InConstructor", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "InFieldInitializer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "InMethod", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "InStaticMethod", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsThisPointer", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsUnsafeContext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "ReportUnsafeErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "RespectReadonly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Method({Static:false, Public:true }, "set_CheckedConstant", 
      JSIL.MethodSignature.Action($.Boolean), 
      BindingContext_set_CheckedConstant
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_CheckedNormal", 
      JSIL.MethodSignature.Action($.Boolean), 
      BindingContext_set_CheckedNormal
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_m_aidExternAliasLookupContext", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.KAID")), 
      BindingContext_set_m_aidExternAliasLookupContext
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_SemanticChecker", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CSemanticChecker")), 
      BindingContext_set_SemanticChecker
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_SymbolLoader", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader")), 
      BindingContext_set_SymbolLoader
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "BindingContext$SymbolLoader$value", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:true }, "m_pParentDecl", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Declaration"));

    $.Field({Static:false, Public:false}, "BindingContext$m_aidExternAliasLookupContext$value", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.KAID"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "m_ExprFactory", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExprFactory"));

    $.Field({Static:false, Public:false}, "m_outputContext", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.OutputContext"));

    $.Field({Static:false, Public:false}, "m_pNameGenerator", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NameGenerator"));

    $.Field({Static:false, Public:false}, "m_pInputFile", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.InputFile"));

    $.Field({Static:false, Public:false}, "m_pContainingAgg", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"));

    $.Field({Static:false, Public:false}, "m_pCurrentSwitchType", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));

    $.Field({Static:false, Public:false}, "m_pOriginalConstantField", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.FieldSymbol"));

    $.Field({Static:false, Public:false}, "m_pCurrentFieldSymbol", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.FieldSymbol"));

    $.Field({Static:false, Public:false}, "m_pImplicitlyTypedLocal", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.LocalVariableSymbol"));

    $.Field({Static:false, Public:false}, "m_pOuterScope", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Scope"));

    $.Field({Static:false, Public:false}, "m_pFinallyScope", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Scope"));

    $.Field({Static:false, Public:false}, "m_pTryScope", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Scope"));

    $.Field({Static:false, Public:false}, "m_pCatchScope", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Scope"));

    $.Field({Static:false, Public:false}, "m_pCurrentScope", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Scope"));

    $.Field({Static:false, Public:false}, "m_pSwitchScope", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Scope"));

    $.Field({Static:false, Public:false}, "m_pCurrentBlock", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBLOCK"));

    $.Field({Static:false, Public:false}, "m_ppamis", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBOUNDLAMBDA")]));

    $.Field({Static:false, Public:false}, "m_pamiCurrent", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBOUNDLAMBDA"));

    $.Field({Static:false, Public:false}, "m_UnsafeState", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.UNSAFESTATES"));

    $.Field({Static:false, Public:false}, "m_FinallyNestingCount", $.Int32);

    $.Field({Static:false, Public:false}, "m_bInsideTryOfCatch", $.Boolean);

    $.Field({Static:false, Public:false}, "m_bInFieldInitializer", $.Boolean);

    $.Field({Static:false, Public:false}, "m_bInBaseConstructorCall", $.Boolean);

    $.Field({Static:false, Public:false}, "m_bAllowUnsafeBlocks", $.Boolean);

    $.Field({Static:false, Public:false}, "m_bIsOptimizingSwitchAndArrayInit", $.Boolean);

    $.Field({Static:false, Public:false}, "m_bShowReachability", $.Boolean);

    $.Field({Static:false, Public:false}, "m_bWrapNonExceptionThrows", $.Boolean);

    $.Field({Static:false, Public:false}, "m_bInRefactoring", $.Boolean);

    $.Field({Static:false, Public:false}, "m_bInAttribute", $.Boolean);

    $.Field({Static:false, Public:false}, "m_bflushLocalVariableTypesForEachStatement", $.Boolean);

    $.Field({Static:false, Public:false}, "m_bRespectSemanticsAndReportErrors", $.Boolean);

    $.Field({Static:false, Public:false}, "m_pInitType", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));

    $.Field({Static:false, Public:false}, "m_returnErrorSink", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.IErrorSink"));

    $.Field({Static:false, Public:false}, "BindingContext$SemanticChecker$value", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CSemanticChecker"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "BindingContext$CheckedNormal$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "BindingContext$CheckedConstant$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "SymbolLoader", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"));

    $.Property({Static:false, Public:true }, "m_aidExternAliasLookupContext", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.KAID"));

    $.Property({Static:false, Public:true }, "SemanticChecker", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CSemanticChecker"));

    $.Property({Static:false, Public:true }, "CheckedNormal", $.Boolean);

    $.Property({Static:false, Public:true }, "CheckedConstant", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.CheckedContext */ 

(function CheckedContext$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BindingContext"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.CheckedContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BindingContext"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Type, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BindingContext"), $.Boolean, 
          $.Boolean
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.BindingFlag */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.BindingFlag", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    BIND_RVALUEREQUIRED: 1, 
    BIND_MEMBERSET: 2, 
    BIND_FIXEDVALUE: 16, 
    BIND_ARGUMENTS: 32, 
    BIND_BASECALL: 64, 
    BIND_USINGVALUE: 128, 
    BIND_STMTEXPRONLY: 256, 
    BIND_TYPEOK: 512, 
    BIND_MAYBECONFUSEDNEGATIVECAST: 1024, 
    BIND_METHODNOTOK: 2048, 
    BIND_DECLNOTOK: 4096, 
    BIND_NOPARAMS: 8192, 
    BIND_SPECULATIVELY: 16384, 
  }
);

/* class Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder */ 

(function ExpressionBinder$Members () {
  var $, $thisType;























































































































































































































  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BindingContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AdjustCallArgumentsForParams", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodOrPropertySymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AdjustMemberObject", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymWithType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ambiguousOperatorError", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BadOperatorTypesError", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BadOperatorTypesError", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindArrayIndexCore", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BindingFlag"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "bindAssignment", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindBoolBinOp", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindBoolBitwiseOp", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpFullSig")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindBoolUnaOp", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "bindConstantCast", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ConstCastResult"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEORNAMESPACE"), 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindDecBinOp", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "bindDecimalConstCast", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEORNAMESPACE"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCONSTANT")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindDecUnaOp", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindDelBinOp", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindEnumBinOp", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindEnumUnaOp", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindExplicitConversion", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEORNAMESPACE"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")]), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONVERTTYPE")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindExplicitConversion", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEORNAMESPACE"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")]), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONVERTTYPE")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindExplicitConversion", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEORNAMESPACE"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONVERTTYPE")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "bindFloatOp", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "BindGrpConversion", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMEMGRP"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "BindGrpConversion", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMEMGRP"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL")]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindGrpConversionCore", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst")]), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BindingFlag"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMEMGRP"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")]), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindImplicitConversion", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEORNAMESPACE"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONVERTTYPE")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindImplicitConversion", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEORNAMESPACE"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")]), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONVERTTYPE")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindImplicitConversion", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEORNAMESPACE"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")]), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONVERTTYPE")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindIncOp", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+UnaOpFullSig")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindIncOpCore", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "bindIndexer", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BindingFlag")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindIntBinOp", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindIntegerNeg", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindIntOp", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindIntUnaOp", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindLiftedBoolBitwiseOp", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindLiftedIncOp", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMULTI"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+UnaOpFullSig")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindLiftedStandardBinOp", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpArgInfo"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpFullSig"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindLiftedStandardUnop", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+UnaOpFullSig")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindLiftedUDBinop", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindLiftedUDUnop", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindMethodGroupToArguments", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BindingFlag"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMEMGRP"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindMethodGroupToArgumentsCore", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+GroupToArgsBinderResult")]), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BindingFlag"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMEMGRP"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")]), 
          $.Int32, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindNonliftedIncOp", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMULTI"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+UnaOpFullSig")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindNubNew", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindNubValue", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:false}, "bindNullEqualityComparison", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpArgInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindPredefMethToArgs", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindPtrBinOp", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindPtrCmpOp", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindPtrToArray", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRQUESTIONMARK"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRLOCAL"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:false}, "bindPtrToString", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUNARYOP"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindRealBinOp", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindRealUnaOp", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindRefCmpOp", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindShiftOp", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "bindSimpleCast", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEORNAMESPACE"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "bindSimpleCast", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEORNAMESPACE"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")]), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "BindStandardBinop", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindStandardBinopCore", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpArgInfo"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpFullSig"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "BindStandardUnaryOperator", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.OperatorKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindStrBinOp", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindStrCmpOp", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "bindStringConcat", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindToField", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.FieldWithType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BindingFlag")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindToField", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.FieldWithType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BindingFlag"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindToMethod", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethWithInst"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMEMGRP"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MemLookFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindToProperty", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PropWithType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BindingFlag"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMEMGRP")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindUDBinop", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindUDBinopCall", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindUDConversionCore", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethWithInst")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindUDConversionCore", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethWithInst"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "bindUDUnop", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindUDUnopCall", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindUserBoolOp", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL")])
    );

    $.ExternalMethod({Static:false, Public:false}, "bindUserDefinedBinOp", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpArgInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "bindUserDefinedConversion", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")]), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CalculateExprAndUnaryOpKinds", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.OperatorKind"), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.UnaOpKind")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "canCast", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONVERTTYPE")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "canConvert", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONVERTTYPE")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "canConvert", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "canConvert", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "canConvert", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONVERTTYPE")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CanConvertArg1", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpArgInfo"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.LiftFlags")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CanConvertArg2", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpArgInfo"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.LiftFlags")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "canConvertInstanceParamForExtension", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "canConvertInstanceParamForExtension", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "canExplicitConversionBeBoundInUncheckedContext", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEORNAMESPACE"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONVERTTYPE")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CantConvert", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareDstTypesBased", 
      new JSIL.MethodSignature($.Int32, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $.Boolean, 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareSrcTypesBased", 
      new JSIL.MethodSignature($.Int32, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $.Boolean, 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ContainingAgg", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ContextForMemberLookup", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Declaration"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CountArguments", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateBinopForPredefMethodCall", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateUnaryOpForPredefMethodCall", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUNARYOP"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ekName", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureChecked", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "FillInArgInfoFromArgList", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ArgInfos"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindApplicableSignatures", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.UnaOpMask"), 
          $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+UnaOpFullSig")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindBestMethod", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CandidateFunctionMember"), [
          $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CandidateFunctionMember")]), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ArgInfos"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CandidateFunctionMember")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CandidateFunctionMember")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindBestSignatureInList", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpFullSig")]), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpArgInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindName", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name")]), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FoldConstI4Op", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCONSTANT"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCONSTANT"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FoldConstI8Op", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCONSTANT"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCONSTANT"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FoldIntegerConstants", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GenerateAssignmentConversion", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateOptimizedAssignment", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ErrorContext", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorHandling"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExprFactory", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExprFactory"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SemanticChecker", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CSemanticChecker"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SymbolLoader", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeManager", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_VoidType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetApplicableUserDefinedBinaryOperatorCandidates", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CandidateFunctionMember")]), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetApplicableUserDefinedBinaryOperatorCandidatesInBaseTypes", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), [
          $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CandidateFunctionMember")]), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $.Boolean, 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBinopKindAndFlags", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BinOpKind")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetContext", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BindingContext"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetConvKind", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ConvKind"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDelBinOpSigs", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpFullSig")]), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpArgInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetEnumBinOpSigs", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpFullSig")]), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpArgInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetEnumBinOpType", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetErrorContext", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorHandling"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetExprConstants", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ConstValFactory"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetExprFactory", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExprFactory"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetGlobalSymbols", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BSYMMGR"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOptPDT", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOptPDT", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPtrBinOpSigs", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpFullSig")]), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpArgInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRefEqualSigs", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpFullSig")]), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpArgInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetReqPDT", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetReqPDT", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSemanticChecker", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CSemanticChecker"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSpecialBinopSignatures", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpFullSig")]), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpArgInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStandardAndLiftedBinopSignatures", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpFullSig")]), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpArgInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetStandardLvalueError", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorCode"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CheckLvalueKind")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSymbolLoader", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypes", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUserDefinedBinopArgumentType", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUserDefinedBinopArgumentTypes", 
      new JSIL.MethodSignature($.Int32, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "getVoidType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleAmbiguity", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.UdConvInfo")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "checkLvalue", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CheckLvalueKind")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckLvalueProp", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRPROP"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckPropertyAccess", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethWithType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PropWithType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "checkUnsafe", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "checkUnsafe", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorCode"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrArg")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "chooseArrayIndexType", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:true , Public:false}, "I64", 
      new JSIL.MethodSignature($.Int64, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:false}, "I64", 
      new JSIL.MethodSignature($.Int64, [$.UInt64])
    );

    $.ExternalMethod({Static:false, Public:false}, "InAnonymousMethod", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "InConstructor", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "InFieldInitializer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "InMethod", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "InStaticMethod", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "isConstantInRange", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCONSTANT"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:true , Public:true }, "isConstantInRange", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCONSTANT"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "isConvInTable", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.UdConvInfo")]), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "isDivByZero", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsMatchingStatic", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymWithType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsMethPropCallable", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodOrPropertySymbol"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "isThisPointer", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:false}, "isUnsafeContext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "isUserDefinedConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LiftArgument", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "LScalar", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONSTVAL"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "MarkAsIntermediateConversion", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:false}, "markFieldAssigned", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "mustCast", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "mustCast", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONVERTTYPE")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "mustCastCore", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEORNAMESPACE"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONVERTTYPE")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "mustCastInUncheckedContext", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONVERTTYPE")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "mustConvert", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "mustConvert", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONVERTTYPE")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "mustConvert", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEORNAMESPACE"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONVERTTYPE")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "mustConvertCore", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEORNAMESPACE")])
    );

    $.ExternalMethod({Static:false, Public:true }, "mustConvertCore", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEORNAMESPACE"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONVERTTYPE")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "objectIsLvalue", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PopulateSignatureList", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.UnaryOperatorSignatureFindResult"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.UnaOpKind"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.UnaOpMask"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+UnaOpFullSig")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PostBindMethod", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethWithInst")]), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PostBindProperty", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PropWithType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethWithType")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethWithType")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RearrangeNamedArguments", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ArgInfos")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RecordBinOpSigFromArgs", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpFullSig")]), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpArgInfo")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RecordUnsafeUsage", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "RecordUnsafeUsage", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BindingContext"))
    );

    $.ExternalMethod({Static:true , Public:true }, "RemapToOverride", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymWithType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReportLocalError", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.LocalVariableSymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CheckLvalueKind"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReportReadOnlyError", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFIELD"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CheckLvalueKind"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReportTypeArgsNotAllowedError", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"), $.Int32, 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrArgRef"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrArgRef")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReportUnsafeErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "RespectReadonly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "RETAILVERIFY", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "RoundToFloat", 
      new JSIL.MethodSignature(null, [$.Double, $jsilcore.TypeRef("JSIL.Reference", [$.Single])])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetExternalRef", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "tryConvert", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "tryConvert", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONVERTTYPE")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetExpandedParams", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReportLvalueFailure", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CheckLvalueKind")])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnwrapExpression", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:false}, "UserDefinedBinaryOperatorCanBeLifted", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "UserDefinedBinaryOperatorIsApplicable", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CandidateFunctionMember")]), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "verifyMethodArgs", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyNamedArgumentsAfterFixed", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:true , Public:false}, "VSFAIL", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WhichBofsIsBetter", 
      new JSIL.MethodSignature($.Int32, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpFullSig"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpFullSig"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WhichConversionIsBetter", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BetterType"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WhichConversionIsBetter", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BetterType"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WhichMethodIsBetter", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BetterType"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CandidateFunctionMember"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CandidateFunctionMember"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ArgInfos")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WhichMethodIsBetterTieBreaker", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BetterType"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CandidateFunctionMember"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CandidateFunctionMember"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ArgInfos")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WhichSimpleConversionIsBetter", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BetterType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WhichTypeIsBetter", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BetterType"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WhichTypeIsBetter", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BetterType"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WhichUofsIsBetter", 
      new JSIL.MethodSignature($.Int32, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+UnaOpFullSig"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+UnaOpFullSig"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapShortLivedExpression", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.Constant({Static:true , Public:false}, "ID", $.Byte, 1);

    $.Constant({Static:true , Public:false}, "IMP", $.Byte, 2);

    $.Constant({Static:true , Public:false}, "EXP", $.Byte, 3);

    $.Constant({Static:true , Public:false}, "NO", $.Byte, 5);

    $.Constant({Static:true , Public:false}, "CONV_KIND_MASK", $.Byte, 15);

    $.Constant({Static:true , Public:false}, "UDC", $.Byte, 64);

    $.Constant({Static:true , Public:false}, "XUD", $.Byte, 67);

    $.Constant({Static:true , Public:false}, "IUD", $.Byte, 66);

    $.Field({Static:true , Public:false, ReadOnly:true }, "simpleTypeConversions", $jsilcore.TypeRef("System.Array", [$.Byte, JSIL.ArrayDimensionParameter(2)]));

    $.Constant({Static:true , Public:false}, "NUM_SIMPLE_TYPES", $.Int32, 13);

    $.Constant({Static:true , Public:false}, "NUM_EXT_TYPES", $.Int32, 16);

    $.Constant({Static:true , Public:false}, "same", $.Byte, 0);

    $.Constant({Static:true , Public:false}, "left", $.Byte, 1);

    $.Constant({Static:true , Public:false}, "right", $.Byte, 2);

    $.Constant({Static:true , Public:false}, "neither", $.Byte, 3);

    $.Field({Static:true , Public:false, ReadOnly:true }, "simpleTypeBetter", $jsilcore.TypeRef("System.Array", [$.Byte, JSIL.ArrayDimensionParameter(2)]));

    $.Field({Static:false, Public:false}, "Context", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BindingContext"));

    $.Field({Static:false, Public:false}, "m_nullable", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CNullable"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "rgptIntOp", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "EK2NAME", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedName")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "g_binopSignatures", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpSig")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "g_rguos", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+UnaOpSig")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "betterConversionTable", $jsilcore.TypeRef("System.Array", [$.Byte, JSIL.ArrayDimensionParameter(2)]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ReadOnlyLocalErrors", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorCode")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ReadOnlyErrors", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorCode")]));

    $.Property({Static:false, Public:false}, "SymbolLoader", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"));

    $.Property({Static:false, Public:false}, "SemanticChecker", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CSemanticChecker"));

    $.Property({Static:false, Public:false}, "ErrorContext", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorHandling"));

    $.Property({Static:false, Public:false}, "TypeManager", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager"));

    $.Property({Static:false, Public:false}, "ExprFactory", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExprFactory"));

    $.Property({Static:false, Public:false}, "VoidType", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpArgInfo */ 

(function BinOpArgInfo$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpArgInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidForDelegate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidForEnum", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidForEnumAndUnderlyingType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidForNumberAndPointer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidForPointer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidForPointerAndNumber", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidForUnderlyingTypeAndEnum", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidForVoidPointer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:true }, "arg1", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:true }, "arg2", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:true }, "pt1", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType"));

    $.Field({Static:false, Public:true }, "pt2", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType"));

    $.Field({Static:false, Public:true }, "ptRaw1", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType"));

    $.Field({Static:false, Public:true }, "ptRaw2", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType"));

    $.Field({Static:false, Public:true }, "type1", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));

    $.Field({Static:false, Public:true }, "type2", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));

    $.Field({Static:false, Public:true }, "typeRaw1", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));

    $.Field({Static:false, Public:true }, "typeRaw2", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));

    $.Field({Static:false, Public:true }, "binopKind", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BinOpKind"));

    $.Field({Static:false, Public:true }, "mask", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BinOpMask"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpSig */ 

(function BinOpSig$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpSig", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BinOpMask"), $.Int32, 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+PfnBindBinOp"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.OpSigFlags"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BinOpFuncKind")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AutoLift", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "CanLift", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "ConvertOperandsBeforeBinding", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:true }, "pt1", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType"));

    $.Field({Static:false, Public:true }, "pt2", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType"));

    $.Field({Static:false, Public:true }, "mask", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BinOpMask"));

    $.Field({Static:false, Public:true }, "cbosSkip", $.Int32);

    $.Field({Static:false, Public:true }, "pfn", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+PfnBindBinOp"));

    $.Field({Static:false, Public:true }, "grfos", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.OpSigFlags"));

    $.Field({Static:false, Public:true }, "fnkind", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BinOpFuncKind"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpFullSig */ 

(function BinOpFullSig$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpSig"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpFullSig", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+PfnBindBinOp"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.OpSigFlags"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.LiftFlags"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BinOpFuncKind")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+BinOpSig")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ConvertFirst", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "ConvertSecond", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "FPreDef", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "isLifted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "Type1", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Type2", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"))
    );

    $.Field({Static:false, Public:false}, "grflt", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.LiftFlags"));

    $.Field({Static:false, Public:false}, "type1", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));

    $.Field({Static:false, Public:false}, "type2", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+ConversionFunc */ 

JSIL.MakeDelegate("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+ConversionFunc", false, [], 
  new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [
      $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
      $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEORNAMESPACE"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
      $asm01.TypeRef("System.Boolean"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")]), 
      $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONVERTTYPE")
    ]));

/* class Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+ExplicitConversion */ 

(function ExplicitConversion$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+ExplicitConversion", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEORNAMESPACE"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $.Boolean, 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONVERTTYPE")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Bind", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "bindExplicitConversionBetweenAggregates", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggCastResult"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "bindExplicitConversionBetweenSimpleTypes", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggCastResult"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "bindExplicitConversionFromArrayToArray", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ArrayType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ArrayType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "bindExplicitConversionFromArrayToIList", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "bindExplicitConversionFromDecimalToEnum", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggCastResult"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "bindExplicitConversionFromEnumToAggregate", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggCastResult"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "bindExplicitConversionFromEnumToDecimal", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggCastResult"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "bindExplicitConversionFromIListToArray", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ArrayType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "bindExplicitConversionFromNub", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "bindExplicitConversionFromPointerToInt", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggCastResult"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "bindExplicitConversionFromTypeVarToAggregate", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggCastResult"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "bindExplicitConversionToAggregate", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggCastResult"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "bindExplicitConversionToArray", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ArrayType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "bindExplicitConversionToEnum", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggCastResult"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "bindExplicitConversionToPointer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "bindExplicitConversionToTypeVar", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExprDest", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetExprFactory", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExprFactory"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSymbolLoader", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"))
    );

    $.Field({Static:false, Public:false}, "binder", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder"));

    $.Field({Static:false, Public:false}, "exprSrc", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:false}, "typeSrc", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));

    $.Field({Static:false, Public:false}, "typeDest", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));

    $.Field({Static:false, Public:false}, "exprTypeDest", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEORNAMESPACE"));

    $.Field({Static:false, Public:false}, "m_pDestinationTypeForLambdaErrorReporting", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));

    $.Field({Static:false, Public:false}, "exprDest", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:false}, "needsExprDest", $.Boolean);

    $.Field({Static:false, Public:false}, "flags", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONVERTTYPE"));

    $.Property({Static:false, Public:true }, "ExprDest", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+PfnBindBinOp */ 

JSIL.MakeDelegate("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+PfnBindBinOp", false, [], 
  new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
      $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), 
      $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
    ]));

/* delegate Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+PfnBindUnaOp */ 

JSIL.MakeDelegate("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+PfnBindUnaOp", false, [], 
  new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
      $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), 
      $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
    ]));

/* class Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+GroupToArgsBinder */ 

(function GroupToArgsBinder$Members () {
  var $, $thisType;































  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+GroupToArgsBinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BindingFlag"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMEMGRP"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ArgInfos"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ArgInfos"), $.Boolean, 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddArgumentsForOptionalParameters", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ArgumentsAreConvertible", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "Bind", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "BindCollectionAddArgs", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ConstructExpandedParameters", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyArgInfos", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ArgInfos"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ArgInfos")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DetermineCurrentTypeArgs", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+GroupToArgsBinder+Result"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DoesTypeArgumentsContainErrorSym", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindArgumentWithName", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ArgInfos"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindMostDerivedMethod", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodOrPropertySymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodOrPropertySymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FindMostDerivedMethod", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodOrPropertySymbol"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodOrPropertySymbol"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateOptionalArgument", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExprFactory"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodOrPropertySymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetErrorContext", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorHandling"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNextSym", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CMemberLookupResults+CMethodIterator")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetResultOfBind", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetResultsOfBind", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+GroupToArgsBinderResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSemanticChecker", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CSemanticChecker"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSymbolLoader", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetTypeQualifier", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMEMGRP")])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasOptionalParameters", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "LookForCandidates", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "NamedArgumentNamesAppearInParameterList", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodOrPropertySymbol")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReOrderArgsForNamedArguments", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "ReOrderArgsForNamedArguments", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodOrPropertySymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMEMGRP"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ArgInfos"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExprFactory"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReportErrorsForBestMatching", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReportErrorsForCollectionAdd", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReportErrorsOnFailure", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReportErrorsOnSuccess", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateArguments", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_pExprBinder", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder"));

    $.Field({Static:false, Public:false}, "m_fCandidatesUnsupported", $.Boolean);

    $.Field({Static:false, Public:false}, "m_fBindFlags", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BindingFlag"));

    $.Field({Static:false, Public:false}, "m_pGroup", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMEMGRP"));

    $.Field({Static:false, Public:false}, "m_pArguments", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ArgInfos"));

    $.Field({Static:false, Public:false}, "m_pOriginalArguments", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ArgInfos"));

    $.Field({Static:false, Public:false}, "m_bHasNamedArguments", $.Boolean);

    $.Field({Static:false, Public:false}, "m_pDelegate", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"));

    $.Field({Static:false, Public:false}, "m_pCurrentType", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"));

    $.Field({Static:false, Public:false}, "m_pCurrentSym", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodOrPropertySymbol"));

    $.Field({Static:false, Public:false}, "m_pCurrentTypeArgs", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"));

    $.Field({Static:false, Public:false}, "m_pCurrentParameters", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"));

    $.Field({Static:false, Public:false}, "m_pBestParameters", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"));

    $.Field({Static:false, Public:false}, "m_nArgBest", $.Int32);

    $.Field({Static:false, Public:false}, "m_swtWrongCount", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymWithType")]));

    $.Field({Static:false, Public:false}, "m_nWrongCount", $.Int32);

    $.Field({Static:false, Public:false}, "m_bIterateToEndOfNsList", $.Boolean);

    $.Field({Static:false, Public:false}, "m_bBindingCollectionAddArgs", $.Boolean);

    $.Field({Static:false, Public:false}, "m_results", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+GroupToArgsBinderResult"));

    $.Field({Static:false, Public:false}, "m_methList", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CandidateFunctionMember")]));

    $.Field({Static:false, Public:false}, "m_mpwiParamTypeConstraints", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst"));

    $.Field({Static:false, Public:false}, "m_mpwiBogus", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst"));

    $.Field({Static:false, Public:false}, "m_mpwiCantInferInstArg", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst"));

    $.Field({Static:false, Public:false}, "m_mwtBadArity", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethWithType"));

    $.Field({Static:false, Public:false}, "m_pInvalidSpecifiedName", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"));

    $.Field({Static:false, Public:false}, "m_pNameUsedInPositionalArgument", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"));

    $.Field({Static:false, Public:false}, "m_pDuplicateSpecifiedName", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"));

    $.Field({Static:false, Public:false}, "m_HiddenTypes", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")]));

    $.Field({Static:false, Public:false}, "m_bArgumentsChangedForNamedOrOptionalArguments", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+GroupToArgsBinder+Result */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+GroupToArgsBinder+Result", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Success: 0, 
    Failure_SearchForExpanded: 1, 
    Failure_NoSearchForExpanded: 2, 
  }
);

/* class Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+GroupToArgsBinderResult */ 

(function GroupToArgsBinderResult$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+GroupToArgsBinderResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "AddInconvertibleResult", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAmbiguousResult", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetBestResult", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetInaccessibleResult", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetUninferrableResult", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IsBetterThanCurrent", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsBetterUninferrableResult", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NumberOfErrorTypes", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")])
    );

    $.Field({Static:false, Public:true }, "BestResult", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst"));

    $.Field({Static:false, Public:true }, "AmbiguousResult", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst"));

    $.Field({Static:false, Public:true }, "InaccessibleResult", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst"));

    $.Field({Static:false, Public:true }, "UninferrableResult", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst"));

    $.Field({Static:false, Public:true }, "InconvertibleResult", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst"));

    $.Field({Static:false, Public:false}, "m_inconvertibleResults", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+ImplicitConversion */ 

(function ImplicitConversion$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+ImplicitConversion", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEORNAMESPACE"), 
          $.Boolean, $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONVERTTYPE")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Bind", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "bindImplicitConversionBetweenSimpleTypes", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "bindImplicitConversionFromAgg", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "bindImplicitConversionFromArray", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "bindImplicitConversionFromEnum", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "bindImplicitConversionFromNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "bindImplicitConversionFromNullable", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NullableType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "bindImplicitConversionFromPointer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "bindImplicitConversionFromTypeVar", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "bindImplicitConversionToBase", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "bindImplicitConversionToEnum", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindNubConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NullableType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExprDest", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetErrorContext", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorHandling"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetExprFactory", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExprFactory"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSymbolLoader", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"))
    );

    $.Field({Static:false, Public:false}, "exprDest", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:false}, "binder", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder"));

    $.Field({Static:false, Public:false}, "exprSrc", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:false}, "typeSrc", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));

    $.Field({Static:false, Public:false}, "typeDest", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));

    $.Field({Static:false, Public:false}, "exprTypeDest", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEORNAMESPACE"));

    $.Field({Static:false, Public:false}, "needsExprDest", $.Boolean);

    $.Field({Static:false, Public:false}, "flags", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONVERTTYPE"));

    $.Property({Static:false, Public:true }, "ExprDest", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+UnaOpSig */ 

(function UnaOpSig$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+UnaOpSig", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.UnaOpMask"), 
          $.Int32, $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+PfnBindUnaOp"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.UnaOpFuncKind")
        ])
    );

    $.Field({Static:false, Public:true }, "pt", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType"));

    $.Field({Static:false, Public:true }, "grfuom", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.UnaOpMask"));

    $.Field({Static:false, Public:true }, "cuosSkip", $.Int32);

    $.Field({Static:false, Public:true }, "pfn", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+PfnBindUnaOp"));

    $.Field({Static:false, Public:true }, "fnkind", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.UnaOpFuncKind"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+UnaOpFullSig */ 

(function UnaOpFullSig$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+UnaOpSig"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+UnaOpFullSig", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+PfnBindUnaOp"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.LiftFlags"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.UnaOpFuncKind")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+UnaOpSig")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Convert", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "FPreDef", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "isLifted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "grflt", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.LiftFlags"));

    $.Field({Static:false, Public:false}, "type", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+<>c__DisplayClass101_0 */ 

(function $l$gc__DisplayClass101_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder+<>c__DisplayClass101_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBindArrayIndexCore$gb__0", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.Field({Static:false, Public:true }, "cIndices", $.Int32);

    $.Field({Static:false, Public:true }, "pDestType", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));

    $.Field({Static:false, Public:true }, "pIntType", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.BinOpKind */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.BinOpKind", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Add: 0, 
    Sub: 1, 
    Mul: 2, 
    Shift: 3, 
    Equal: 4, 
    Compare: 5, 
    Bitwise: 6, 
    BitXor: 7, 
    Logical: 8, 
    Lim: 9, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.BinOpMask */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.BinOpMask", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    NumPtr: 1, 
    UnderEnum: 1, 
    Add: 1, 
    Ptr: 2, 
    Sub: 2, 
    PtrNum: 3, 
    EnumUnder: 3, 
    Mul: 4, 
    Shift: 8, 
    Equal: 16, 
    Delegate: 19, 
    Compare: 32, 
    VoidPtr: 48, 
    Real: 55, 
    Bitwise: 64, 
    BitXor: 128, 
    BoolNorm: 144, 
    Enum: 242, 
    Integer: 247, 
    Logical: 256, 
  }
);

/* class Microsoft.CSharp.RuntimeBinder.Semantics.CandidateFunctionMember */ 

(function CandidateFunctionMember$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.CandidateFunctionMember", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), 
          $.Byte, $.Boolean
        ])
    );

    $.Field({Static:false, Public:true }, "mpwi", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst"));

    $.Field({Static:false, Public:true }, "params", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"));

    $.Field({Static:false, Public:true }, "ctypeLift", $.Byte);

    $.Field({Static:false, Public:true }, "fExpanded", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.ConstValKind */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.ConstValKind", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Int: 0, 
    Double: 1, 
    Long: 2, 
    String: 3, 
    Decimal: 4, 
    IntPtr: 5, 
    Float: 6, 
    Boolean: 7, 
    Lim: 8, 
  }
);

/* class Microsoft.CSharp.RuntimeBinder.Semantics.CONSTVAL */ 

(function CONSTVAL$Members () {
  var $, $thisType;

































  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.CONSTVAL", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_boolVal", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_byteVal", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_cVal", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_decVal", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_doubleVal", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_floatVal", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_iVal", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_longVal", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_objectVal", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_sbyteVal", 
      JSIL.MethodSignature.Return($.SByte)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_shortVal", 
      JSIL.MethodSignature.Return($.Int16)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_strVal", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_uiVal", 
      JSIL.MethodSignature.Return($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ulongVal", 
      JSIL.MethodSignature.Return($.UInt64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ushortVal", 
      JSIL.MethodSignature.Return($.UInt16)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsDefault", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsNullRef", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsZero", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ConstValKind")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_boolVal", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_decVal", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_doubleVal", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_floatVal", 
      JSIL.MethodSignature.Action($.Single)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_iVal", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_longVal", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_objectVal", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_strVal", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_uiVal", 
      JSIL.MethodSignature.Action($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ulongVal", 
      JSIL.MethodSignature.Action($.UInt64)
    );

    $.ExternalMethod({Static:false, Public:false}, "SpecialBox", 
      new JSIL.MethodSignature($.Object, ["!!0"], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "SpecialUnbox", 
      new JSIL.MethodSignature("!!0", [$.Object], ["T"])
    );

    $.Field({Static:false, Public:false}, "value", $.Object);

    $.Property({Static:false, Public:true }, "objectVal", $.Object);

    $.Property({Static:false, Public:true }, "boolVal", $.Boolean);

    $.Property({Static:false, Public:true }, "sbyteVal", $.SByte);

    $.Property({Static:false, Public:true }, "byteVal", $.Byte);

    $.Property({Static:false, Public:true }, "shortVal", $.Int16);

    $.Property({Static:false, Public:true }, "ushortVal", $.UInt16);

    $.Property({Static:false, Public:true }, "iVal", $.Int32);

    $.Property({Static:false, Public:true }, "uiVal", $.UInt32);

    $.Property({Static:false, Public:true }, "longVal", $.Int64);

    $.Property({Static:false, Public:true }, "ulongVal", $.UInt64);

    $.Property({Static:false, Public:true }, "floatVal", $.Single);

    $.Property({Static:false, Public:true }, "doubleVal", $.Double);

    $.Property({Static:false, Public:true }, "decVal", $asm01.TypeRef("System.Decimal"));

    $.Property({Static:false, Public:true }, "cVal", $.Char);

    $.Property({Static:false, Public:true }, "strVal", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.ConstValFactory */ 

(function ConstValFactory$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.ConstValFactory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Copy", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONSTVAL"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ConstValKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONSTVAL")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Create", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONSTVAL"), [$asm01.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Create", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONSTVAL"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Create", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONSTVAL"), [$.Single])
    );

    $.ExternalMethod({Static:false, Public:true }, "Create", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONSTVAL"), [$.Double])
    );

    $.ExternalMethod({Static:false, Public:true }, "Create", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONSTVAL"), [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:true }, "Create", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONSTVAL"), [$.UInt64])
    );

    $.ExternalMethod({Static:false, Public:false}, "Create", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONSTVAL"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Create", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONSTVAL"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetBool", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONSTVAL"), [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDefaultValue", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONSTVAL"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ConstValKind")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetInt", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONSTVAL"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetNullRef", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONSTVAL"))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetUInt", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONSTVAL"), [$.UInt32])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.ConvKind */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.ConvKind", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Identity: 1, 
    Implicit: 2, 
    Explicit: 3, 
    Unknown: 4, 
    None: 5, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.CONVERTTYPE */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.CONVERTTYPE", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    NOUDC: 1, 
    STANDARD: 2, 
    STANDARDANDNOUDC: 3, 
    ISEXPLICIT: 4, 
    CHECKOVERFLOW: 8, 
    FORCECAST: 16, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.BetterType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.BetterType", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Same: 0, 
    Left: 1, 
    Right: 2, 
    Neither: 3, 
  }
);

/* class Microsoft.CSharp.RuntimeBinder.Semantics.ListExtensions */ 

(function ListExtensions$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("Microsoft.CSharp.RuntimeBinder.Semantics.ListExtensions", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "Head", 
      new JSIL.MethodSignature("!!0", [$asm01.TypeRef("System.Collections.Generic.List`1", ["!!0"])], ["T"])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "IsEmpty", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Collections.Generic.List`1", ["!!0"])], ["T"])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Tail", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.List`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.List`1", ["!!0"])], ["T"])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.CConversions */ 

(function CConversions$Members () {
  var $, $thisType;








  JSIL.MakeStaticClass("Microsoft.CSharp.RuntimeBinder.Semantics.CConversions", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "FBoxingConv", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FExpRefConv", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FImpRefConv", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FIsSameType", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FUnwrappingConv", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FWrappingConv", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:true , Public:true }, "HasGenericDelegateExplicitReferenceConversion", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.Operators */ 

(function Operators$Members () {
  var $, $thisType;









  JSIL.MakeStaticClass("Microsoft.CSharp.RuntimeBinder.Semantics.Operators", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "GetDisplayName", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.OperatorKind")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetExpressionKind", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.OperatorKind")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetInfo", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Operators+OPINFO"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.OperatorKind")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetMethodName", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedName"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.OperatorKind")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetMethodName", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.NameManager"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.OperatorKind")])
    );

    $.ExternalMethod({Static:true , Public:true }, "HasDisplayName", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.OperatorKind")])
    );

    $.ExternalMethod({Static:true , Public:true }, "HasMethodName", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.OperatorKind")])
    );

    $.ExternalMethod({Static:true , Public:true }, "OperatorOfMethodName", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.OperatorKind"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.NameManager"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "m_rgOpInfo", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.OperatorKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Operators+OPINFO")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.Operators+OPINFO */ 

(function OPINFO$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.Operators+OPINFO", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.TokenKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedName"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $.Int32
        ])
    );

    $.Field({Static:false, Public:true }, "iToken", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.TokenKind"));

    $.Field({Static:false, Public:true }, "methodName", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedName"));

    $.Field({Static:false, Public:true }, "expressionKind", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.UdConvInfo */ 

(function UdConvInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.UdConvInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "mwt", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethWithType"));

    $.Field({Static:false, Public:true }, "fSrcImplicit", $.Boolean);

    $.Field({Static:false, Public:true }, "fDstImplicit", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.ArgInfos */ 

(function ArgInfos$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.ArgInfos", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "carg", $.Int32);

    $.Field({Static:false, Public:true }, "types", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"));

    $.Field({Static:false, Public:true }, "fHasExprs", $.Boolean);

    $.Field({Static:false, Public:true }, "prgexpr", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.BodyType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.BodyType", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    NormalBlock: 0, 
    StatementExpression: 1, 
    ReturnedExpression: 2, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.ConstCastResult */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.ConstCastResult", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Success: 0, 
    Failure: 1, 
    CheckFailure: 2, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.AggCastResult */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.AggCastResult", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Success: 0, 
    Failure: 1, 
    Abort: 2, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.UnaryOperatorSignatureFindResult */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.UnaryOperatorSignatureFindResult", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Match: 0, 
    Continue: 1, 
    Return: 2, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.UnaOpKind */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.UnaOpKind", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Plus: 0, 
    Minus: 1, 
    Tilde: 2, 
    Bang: 3, 
    IncDec: 4, 
    Lim: 5, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.UnaOpMask */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.UnaOpMask", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Plus: 1, 
    Minus: 2, 
    Real: 3, 
    Tilde: 4, 
    Unsigned: 5, 
    Signed: 7, 
    Bool: 8, 
    Bang: 8, 
    IncDec: 16, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.OpSigFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.OpSigFlags", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Reference: 1, 
    Convert: 1, 
    CanLift: 2, 
    BoolBit: 3, 
    AutoLift: 4, 
    Value: 7, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.LiftFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.LiftFlags", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Lift1: 1, 
    Lift2: 2, 
    Convert1: 4, 
    Convert2: 8, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.CheckLvalueKind */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.CheckLvalueKind", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Assignment: 0, 
    OutParameter: 1, 
    Increment: 2, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.BinOpFuncKind */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.BinOpFuncKind", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    BoolBinOp: 0, 
    BoolBitwiseOp: 1, 
    DecBinOp: 2, 
    DelBinOp: 3, 
    EnumBinOp: 4, 
    IntBinOp: 5, 
    PtrBinOp: 6, 
    PtrCmpOp: 7, 
    RealBinOp: 8, 
    RefCmpOp: 9, 
    ShiftOp: 10, 
    StrBinOp: 11, 
    StrCmpOp: 12, 
    None: 13, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.UnaOpFuncKind */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.UnaOpFuncKind", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    BoolUnaOp: 0, 
    DecUnaOp: 1, 
    EnumUnaOp: 2, 
    IntUnaOp: 3, 
    RealUnaOp: 4, 
    LiftedIncOpCore: 5, 
    None: 6, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EK_BLOCK: 0, 
    EK_RETURN: 1, 
    EK_NOOP: 2, 
    EK_StmtLim: 3, 
    EK_BINOP: 3, 
    EK_ExprMin: 3, 
    EK_UNARYOP: 4, 
    EK_ASSIGNMENT: 5, 
    EK_LIST: 6, 
    EK_QUESTIONMARK: 7, 
    EK_ARRAYINDEX: 8, 
    EK_ARRAYLENGTH: 9, 
    EK_ARGUMENTHANDLE: 10, 
    EK_CALL: 11, 
    EK_EVENT: 12, 
    EK_FIELD: 13, 
    EK_LOCAL: 14, 
    EK_THISPOINTER: 15, 
    EK_CONSTANT: 16, 
    EK_TYPEARGUMENTS: 17, 
    EK_TYPEORNAMESPACE: 18, 
    EK_CLASS: 19, 
    EK_ALIAS: 20, 
    EK_FUNCPTR: 21, 
    EK_PROP: 22, 
    EK_MULTI: 23, 
    EK_MULTIGET: 24, 
    EK_WRAP: 25, 
    EK_CONCAT: 26, 
    EK_ARRINIT: 27, 
    EK_CAST: 28, 
    EK_USERDEFINEDCONVERSION: 29, 
    EK_TYPEOF: 30, 
    EK_ZEROINIT: 31, 
    EK_USERLOGOP: 32, 
    EK_MEMGRP: 33, 
    EK_BOUNDLAMBDA: 34, 
    EK_UNBOUNDLAMBDA: 35, 
    EK_HOISTEDLOCALEXPR: 36, 
    EK_FIELDINFO: 37, 
    EK_METHODINFO: 38, 
    EK_PROPERTYINFO: 39, 
    EK_NamedArgumentSpecification: 40, 
    EK_COUNT: 41, 
    EK_TypeLim: 41, 
    EK_EQUALS: 42, 
    EK_FIRSTOP: 42, 
    EK_COMPARE: 43, 
    EK_TRUE: 44, 
    EK_FALSE: 45, 
    EK_INC: 46, 
    EK_DEC: 47, 
    EK_LOGNOT: 48, 
    EK_RELATIONAL_MIN: 49, 
    EK_EQ: 49, 
    EK_NE: 50, 
    EK_LT: 51, 
    EK_LE: 52, 
    EK_GT: 53, 
    EK_GE: 54, 
    EK_RELATIONAL_MAX: 54, 
    EK_ADD: 55, 
    EK_ARITH_MIN: 55, 
    EK_SUB: 56, 
    EK_MUL: 57, 
    EK_DIV: 58, 
    EK_MOD: 59, 
    EK_NEG: 60, 
    EK_ARITH_MAX: 61, 
    EK_UPLUS: 61, 
    EK_BIT_MIN: 62, 
    EK_BITAND: 62, 
    EK_BITOR: 63, 
    EK_BITXOR: 64, 
    EK_BITNOT: 65, 
    EK_BIT_MAX: 65, 
    EK_LSHIFT: 66, 
    EK_RSHIFT: 67, 
    EK_LOGAND: 68, 
    EK_LOGOR: 69, 
    EK_SEQUENCE: 70, 
    EK_SEQREV: 71, 
    EK_SAVE: 72, 
    EK_SWAP: 73, 
    EK_INDIR: 74, 
    EK_ADDR: 75, 
    EK_STRINGEQ: 76, 
    EK_STRINGNE: 77, 
    EK_DELEGATEEQ: 78, 
    EK_DELEGATENE: 79, 
    EK_DELEGATEADD: 80, 
    EK_DELEGATESUB: 81, 
    EK_DECIMALNEG: 82, 
    EK_DECIMALINC: 83, 
    EK_DECIMALDEC: 84, 
    EK_MULTIOFFSET: 85, 
  }
);

/* class Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKindExtensions */ 

(function ExpressionKindExtensions$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKindExtensions", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "isRelational", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "isUnaryOperator", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRExtensions */ 

(function EXPRExtensions$Members () {
  var $, $thisType;





























































  JSIL.MakeStaticClass("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRExtensions", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "asANYLOCAL", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRLOCAL"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "asARRAYINDEX", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRARRAYINDEX"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "asARRINIT", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRARRINIT"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "asBIN", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "asBINOP", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "asCALL", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "asCAST", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCAST"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "asCONSTANT", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCONSTANT"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "asEVENT", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPREVENT"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "asFIELD", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFIELD"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "asFIELDINFO", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFIELDINFO"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "asFUNCPTR", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFUNCPTR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "asLIST", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRLIST"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "asMEMGRP", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMEMGRP"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "asMETHODINFO", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMETHODINFO"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "asNamedArgumentSpecification", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRNamedArgumentSpecification"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "asPROP", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRPROP"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "asPropertyInfo", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRPropertyInfo"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "asRETURN", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRRETURN"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "asSTMT", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRSTMT"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "asTYPEOF", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEOF"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "asUnaryOperator", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUNARYOP"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "asUSERDEFINEDCONVERSION", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUSERDEFINEDCONVERSION"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "asUSERLOGOP", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUSERLOGOP"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "asWRAP", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRWRAP"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "asZEROINIT", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRZEROINIT"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GetConst", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GetSeqVal", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "isANYLOCAL", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "isANYLOCAL_OK", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "isARRAYINDEX", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "isARRINIT", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "isBIN", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "isBOUNDLAMBDA", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "isCALL", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "isCAST", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "isCLASS", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "isCONSTANT", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "isCONSTANT_OK", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "isFIELD", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "isChecked", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "isLIST", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "isLvalue", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "isMEMGRP", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "isMETHODINFO", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "isNamedArgumentSpecification", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "isNull", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "isPROP", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "isRETURN", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "isSTMT", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "isTYPEOF", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "isUnaryOperator", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "isUNBOUNDLAMBDA", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "isUSERDEFINEDCONVERSION", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "isWRAP", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "isZero", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "isZEROINIT", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Map", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExprFactory"), 
          $asm01.TypeRef("System.Func`2", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
        ])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "RETAILVERIFY", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "ToEnumerable", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")]), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm00.Microsoft.CSharp.RuntimeBinder.Semantics.EXPRExtensions_$lToEnumerable$gd__1.__Type__]; })
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRExtensions+<ToEnumerable>d__1 */ 

(function $lToEnumerable$gd__1$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRExtensions+<ToEnumerable>d__1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lMicrosoft.CSharp.RuntimeBinder.Semantics.EXPR$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")]))
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")]), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lMicrosoft.CSharp.RuntimeBinder.Semantics.EXPR$g.get_Current", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")]), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm01.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "expr", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:true }, "$l$g3__expr", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:false}, "$lexprCur$g5__1", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lMicrosoft.CSharp.RuntimeBinder.Semantics.EXPR$g.Current", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")]), 
      /* 3 */ $asm01.TypeRef("System.IDisposable"), 
      /* 4 */ $asm01.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.ExprFactory */ 

(function ExprFactory$Members () {
  var $, $thisType;





































































  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.ExprFactory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.GlobalSymbolContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AppendItemToList", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateAnonymousMethod", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBOUNDLAMBDA"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateArrayIndex", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRARRAYINDEX"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateArrayInit", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRARRINIT"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateArrayLength", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRARRAYLENGTH"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateAssignment", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRASSIGNMENT"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateBinop", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateBlock", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBLOCK"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBLOCK"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRSTMT"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Scope")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateBoolConstant", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCONSTANT"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateCall", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMEMGRP"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethWithInst")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateCast", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCAST"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateCast", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCAST"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEORNAMESPACE"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateClass", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCLASS"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEARGUMENTS")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateConcat", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCONCAT"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateConstant", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCONSTANT"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONSTVAL")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateConstant", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCONSTANT"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONSTVAL"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateConstant", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCONSTANT"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateEvent", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPREVENT"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EventWithType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateField", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFIELD"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $.UInt32, 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.FieldWithType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateFieldInfo", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFIELDINFO"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.FieldSymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateFunctionPointer", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFUNCPTR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethWithInst")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateHoistedLocalInExpression", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRHOISTEDLOCALEXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRLOCAL")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateIntegerConstant", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCONSTANT"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateLambda", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUNBOUNDLAMBDA"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateList", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRLIST"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateList", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRLIST"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateList", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRLIST"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateLocal", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRLOCAL"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.LocalVariableSymbol")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateMemGroup", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMEMGRP"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SYMKIND"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodOrPropertySymbol"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CMemberLookupResults")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateMemGroup", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMEMGRP"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateMethodInfo", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMETHODINFO"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateMethodInfo", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMETHODINFO"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateMulti", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMULTI"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateMultiGet", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMULTIGET"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMULTI")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateNamedArgumentSpecification", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRNamedArgumentSpecification"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateNeg", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUNARYOP"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateNull", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateOperator", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateProperty", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRPROP"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateProperty", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRPROP"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMEMGRP"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PropWithType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethWithType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethWithType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreatePropertyInfo", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRPropertyInfo"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PropertySymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateQuestionMark", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRQUESTIONMARK"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateReturn", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRRETURN"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Scope"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateReturn", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRRETURN"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Scope"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateReverseSequence", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateSave", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRWRAP")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateSequence", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateStringConstant", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCONSTANT"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateThis", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTHISPOINTER"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.LocalVariableSymbol"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateTypeArguments", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEARGUMENTS"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateTypeOf", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEOF"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEORNAMESPACE")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateTypeOf", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEOF"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateUnaryOp", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUNARYOP"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateUserDefinedBinop", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateUserDefinedConversion", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUSERDEFINEDCONVERSION"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethWithInst")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateUserDefinedUnaryOperator", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUNARYOP"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionKind"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateUserLogOp", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUSERLOGOP"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateUserLogOpError", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUSERLOGOP"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateWrap", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRWRAP"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Scope"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateWrapNoAutoFree", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRWRAP"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Scope"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateZeroInit", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateZeroInit", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEORNAMESPACE")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateZeroInit", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEORNAMESPACE"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetExprConstants", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ConstValFactory"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetGlobalSymbols", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BSYMMGR"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypes", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, "MakeClass", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCLASS"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.Field({Static:false, Public:false}, "m_globalSymbolContext", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.GlobalSymbolContext"));

    $.Field({Static:false, Public:false}, "m_constants", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ConstValFactory"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EXF_BINOP: 1, 
    EXF_NEEDSRET: 2, 
    EXF_ISFAULT: 2, 
    EXF_GENERATEDQMARK: 2, 
    EXF_OPENTYPE: 2, 
    EXF_HASHTABLESWITCH: 2, 
    EXF_MEMBERSET: 2, 
    EXF_ARRAYCONST: 2, 
    EXF_CTOR: 2, 
    EXF_ASLEAVE: 2, 
    EXF_LABELREFERENCED: 2, 
    EXF_BOX: 2, 
    EXF_CTORPREAMBLE: 4, 
    EXF_ARRAYALLCONST: 4, 
    EXF_INDEXER: 4, 
    EXF_USERLABEL: 4, 
    EXF_UNBOX: 4, 
    EXF_REMOVEFINALLY: 4, 
    EXF_GOTOCASE: 4, 
    EXF_FINALLYBLOCKED: 8, 
    EXF_OPERATOR: 8, 
    EXF_WRAPASTEMP: 8, 
    EXF_ISPOSTOP: 8, 
    EXF_REFCHECK: 8, 
    EXF_BADGOTO: 16, 
    EXF_INDEXEXPR: 16, 
    EXF_NEWOBJCALL: 16, 
    EXF_REPLACEWRAP: 16, 
    EXF_LITERALCONST: 16, 
    EXF_RETURNISYIELD: 16, 
    EXF_ISFINALLY: 16, 
    EXF_CONSTRAINED: 32, 
    EXF_SIMPLENAME: 32, 
    EXF_UNREALIZEDGOTO: 32, 
    EXF_FORCE_BOX: 32, 
    EXF_ASFINALLYLEAVE: 64, 
    EXF_FORCE_UNBOX: 64, 
    EXF_ADDRNOCONV: 64, 
    EXF_BASECALL: 64, 
    EXF_GOTONOTBLOCKED: 128, 
    EXF_STATIC_CAST: 128, 
    EXF_DELEGATE: 128, 
    EXF_CAST_ALL: 254, 
    EXF_USERCALLABLE: 256, 
    EXF_UNBOXRUNTIME: 256, 
    EXF_NEWSTRUCTASSG: 512, 
    EXF_GENERATEDSTMT: 512, 
    EXF_IMPLICITSTRUCTASSG: 1024, 
    EXF_MARKING: 1024, 
    EXF_UNREACHABLEBEGIN: 2048, 
    EXF_UNREACHABLEEND: 4096, 
    EXF_USEORIGDEBUGINFO: 8192, 
    EXF_LASTBRACEDEBUGINFO: 16384, 
    EXF_NODEBUGINFO: 32768, 
    EXF_IMPLICITTHIS: 65536, 
    EXF_CANTBENULL: 131072, 
    EXF_CHECKOVERFLOW: 262144, 
    EXF_PUSH_OP_FIRST: 1048576, 
    EXF_ASSGOP: 2097152, 
    EXF_LVALUE: 4194304, 
    EXF_SAMENAMETYPE: 8388608, 
    EXF_MASK_ANY: 16250880, 
  }
);

/* class Microsoft.CSharp.RuntimeBinder.Semantics.FileRecord */ 

(function FileRecord$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.FileRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.FUNDTYPE */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.FUNDTYPE", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    FT_NONE: 0, 
    FT_I1: 1, 
    FT_I2: 2, 
    FT_I4: 3, 
    FT_U1: 4, 
    FT_U2: 5, 
    FT_U4: 6, 
    FT_LASTNONLONG: 6, 
    FT_I8: 7, 
    FT_LASTINTEGRAL: 8, 
    FT_U8: 8, 
    FT_R4: 9, 
    FT_LASTNUMERIC: 10, 
    FT_R8: 10, 
    FT_REF: 11, 
    FT_STRUCT: 12, 
    FT_PTR: 13, 
    FT_VAR: 14, 
    FT_COUNT: 15, 
  }
);

/* class Microsoft.CSharp.RuntimeBinder.Semantics.GlobalSymbolContext */ 

(function GlobalSymbolContext$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.CSharp.RuntimeBinder.Semantics.BSYMMGR)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager)) ();
  };



  function GlobalSymbolContext_get_GlobalSymbols () {
    return this.GlobalSymbolContext$GlobalSymbols$value;
  }; 

  function GlobalSymbolContext_get_TypeManager () {
    return this.GlobalSymbolContext$TypeManager$value;
  }; 







  function GlobalSymbolContext_set_GlobalSymbols (value) {
    this.GlobalSymbolContext$GlobalSymbols$value = value;
  }; 

  function GlobalSymbolContext_set_TypeManager (value) {
    this.GlobalSymbolContext$TypeManager$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.GlobalSymbolContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.NameManager"))
    );

    $.Method({Static:false, Public:true }, "get_GlobalSymbols", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BSYMMGR")), 
      GlobalSymbolContext_get_GlobalSymbols
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_TypeManager", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager")), 
      GlobalSymbolContext_get_TypeManager
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetGlobalMiscSymFactory", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MiscSymFactory"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetGlobalSymbolFactory", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymFactory"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetGlobalSymbols", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BSYMMGR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNameManager", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.NameManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetPredefTypes", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PredefinedTypes"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetTypes", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager"))
    );

    $.Method({Static:false, Public:false}, "set_GlobalSymbols", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BSYMMGR")), 
      GlobalSymbolContext_set_GlobalSymbols
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_TypeManager", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager")), 
      GlobalSymbolContext_set_TypeManager
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "m_predefTypes", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PredefinedTypes"));

    $.Field({Static:false, Public:false}, "m_nameManager", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.NameManager"));

    $.Field({Static:false, Public:false}, "GlobalSymbolContext$TypeManager$value", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "GlobalSymbolContext$GlobalSymbols$value", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BSYMMGR"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "TypeManager", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager"));

    $.Property({Static:false, Public:true }, "GlobalSymbols", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BSYMMGR"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.InputFile */ 

(function InputFile$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.FileRecord"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.InputFile", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "AddToAlias", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.KAID"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAssemblyID", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.KAID"))
    );

    $.ExternalMethod({Static:false, Public:true }, "InAlias", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.KAID")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetAssemblyID", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.KAID"))
    );

    $.ExternalMethod({Static:false, Public:true }, "UnionAliasFilter", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("System.Collections.Generic.HashSet`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.KAID")])]))
    );

    $.Field({Static:false, Public:false}, "bsetFilter", $asm04.TypeRef("System.Collections.Generic.HashSet`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.KAID")]));

    $.Field({Static:false, Public:false}, "aid", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.KAID"));

    $.Field({Static:false, Public:true }, "isSource", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.CSemanticChecker */ 

(function CSemanticChecker$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.CSemanticChecker", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ErrorContext", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorHandling"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SymbolLoader", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "getBSymmgr", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BSYMMGR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetErrorContext", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorHandling"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetGlobalMiscSymFactory", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MiscSymFactory"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetGlobalSymbolFactory", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymFactory"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNameManager", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.NameManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, "getPredefTypes", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PredefinedTypes"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSymbolLoader", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetTypeManager", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CheckAccess", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CheckAccess2", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ACCESSERROR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckAccessCore", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ACCESSERROR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CheckBogus", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CheckBogus", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CheckForStaticClass", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorCode")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CheckTypeAccess", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReportAccessError", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymWithType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReportStaticClassError", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorCode")
        ])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "SymbolLoader", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"));

    $.Property({Static:false, Public:false}, "ErrorContext", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorHandling"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.LangCompiler */ 

(function LangCompiler$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CSemanticChecker"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.LangCompiler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.CController"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.NameManager")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ErrorCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SymbolLoader", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetErrorContext", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorHandling"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSymbolLoader", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SubmitError", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.CParameterizedError"))
    );

    $.Field({Static:false, Public:false}, "m_symbolLoader", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"));

    $.Field({Static:false, Public:false}, "pController", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.CController"));

    $.Field({Static:false, Public:false}, "m_errorContext", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorHandling"));

    $.Field({Static:false, Public:false}, "globalSymbolContext", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.GlobalSymbolContext"));

    $.Field({Static:false, Public:false}, "m_userStringBuilder", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.UserStringBuilder"));

    $.Property({Static:false, Public:true , Virtual:true }, "SymbolLoader", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.IErrorSink")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.MemLookFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.MemLookFlags", 
    BaseType: $asm01.TypeRef("System.UInt32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Ctor: 2, 
    Indexer: 4, 
    Operator: 8, 
    NewObj: 16, 
    BaseCall: 64, 
    UserCallable: 256, 
    MustBeInvocable: 536870912, 
    TypeVarsAllowed: 1073741824, 
    ExtensionCall: 2147483648, 
    All: 3758096734, 
  }
);

/* class Microsoft.CSharp.RuntimeBinder.Semantics.MemberLookup */ 

(function MemberLookup$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.MemberLookup", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "FError", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAllTypes", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetErrorContext", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorHandling"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetFlags", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MemLookFlags"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetObject", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetResults", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CMemberLookupResults"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSemanticChecker", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CSemanticChecker"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSourceType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSymbolLoader", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IsDelegateType", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsDynamicMember", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Lookup", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CSemanticChecker"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ParentSymbol"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $.Int32, 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MemLookFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupInClass", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupInInterfaces", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RecordType", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReportBogus", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymWithType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReportBogusForEventsAndProperties", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymWithType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReportErrors", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SearchSingleType", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:true }, "SwtFirst", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymWithType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SwtInaccessible", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymWithType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SymFirst", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"))
    );

    $.Field({Static:false, Public:false}, "m_pSemanticChecker", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CSemanticChecker"));

    $.Field({Static:false, Public:false}, "m_pSymbolLoader", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"));

    $.Field({Static:false, Public:false}, "m_typeSrc", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));

    $.Field({Static:false, Public:false}, "m_obj", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:false}, "m_typeQual", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));

    $.Field({Static:false, Public:false}, "m_symWhere", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ParentSymbol"));

    $.Field({Static:false, Public:false}, "m_name", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"));

    $.Field({Static:false, Public:false}, "m_arity", $.Int32);

    $.Field({Static:false, Public:false}, "m_flags", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MemLookFlags"));

    $.Field({Static:false, Public:false}, "m_results", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CMemberLookupResults"));

    $.Field({Static:false, Public:false}, "m_rgtypeStart", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")]));

    $.Field({Static:false, Public:false}, "m_prgtype", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")]));

    $.Field({Static:false, Public:false}, "m_csym", $.Int32);

    $.Field({Static:false, Public:false}, "m_swtFirst", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymWithType"));

    $.Field({Static:false, Public:false}, "m_methPropWithTypeList", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithType")]));

    $.Field({Static:false, Public:false}, "m_swtAmbig", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymWithType"));

    $.Field({Static:false, Public:false}, "m_swtInaccess", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymWithType"));

    $.Field({Static:false, Public:false}, "m_swtBad", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymWithType"));

    $.Field({Static:false, Public:false}, "m_swtBogus", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymWithType"));

    $.Field({Static:false, Public:false}, "m_swtBadArity", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymWithType"));

    $.Field({Static:false, Public:false}, "m_swtAmbigWarn", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymWithType"));

    $.Field({Static:false, Public:false}, "m_swtOverride", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymWithType"));

    $.Field({Static:false, Public:false}, "m_fMulti", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.CMemberLookupResults */ 

(function CMemberLookupResults$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray)) ();
  };




  function CMemberLookupResults_get_ContainingTypes () {
    return this.CMemberLookupResults$ContainingTypes$value;
  }; 


  function CMemberLookupResults_set_ContainingTypes (value) {
    this.CMemberLookupResults$ContainingTypes$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.CMemberLookupResults", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name")])
    );

    $.Method({Static:false, Public:true }, "get_ContainingTypes", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")), 
      CMemberLookupResults_get_ContainingTypes
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetMethodIterator", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CMemberLookupResults+CMethodIterator"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CSemanticChecker"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Declaration"), $.Boolean, 
          $.Boolean, $.Int32, 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.symbmask_t")
        ])
    );

    $.Method({Static:false, Public:false}, "set_ContainingTypes", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")), 
      CMemberLookupResults_set_ContainingTypes
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "CMemberLookupResults$ContainingTypes$value", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "m_pName", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"));

    $.Property({Static:false, Public:true }, "ContainingTypes", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.CMemberLookupResults+CMethodIterator */ 

(function CMethodIterator$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.CMemberLookupResults+CMethodIterator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 12, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CSemanticChecker"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Declaration"), $.Boolean, 
          $.Boolean, $.Int32, 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.symbmask_t")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AtEnd", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "CanUseCurrentSymbol", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "FindNextMethod", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "FindNextTypeForInstanceMethods", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetCurrentSymbol", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodOrPropertySymbol"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetCurrentType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSemanticChecker", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CSemanticChecker"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSymbolLoader", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "IsCurrentSymbolBogus", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsCurrentSymbolInaccessible", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean, $.Boolean])
    );

    $.Field({Static:false, Public:false}, "m_pSymbolLoader", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"));

    $.Field({Static:false, Public:false}, "m_pSemanticChecker", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CSemanticChecker"));

    $.Field({Static:false, Public:false}, "m_pCurrentType", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"));

    $.Field({Static:false, Public:false}, "m_pCurrentSym", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodOrPropertySymbol"));

    $.Field({Static:false, Public:false}, "m_pContext", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Declaration"));

    $.Field({Static:false, Public:false}, "m_pContainingTypes", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"));

    $.Field({Static:false, Public:false}, "m_pQualifyingType", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));

    $.Field({Static:false, Public:false}, "m_pName", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"));

    $.Field({Static:false, Public:false}, "m_nArity", $.Int32);

    $.Field({Static:false, Public:false}, "m_mask", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.symbmask_t"));

    $.Field({Static:false, Public:false}, "m_flags", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFLAG"));

    $.Field({Static:false, Public:false}, "m_nCurrentTypeCount", $.Int32);

    $.Field({Static:false, Public:false}, "m_bIsCheckingInstanceMethods", $.Boolean);

    $.Field({Static:false, Public:false}, "m_bAtEnd", $.Boolean);

    $.Field({Static:false, Public:false}, "m_bAllowBogusAndInaccessible", $.Boolean);

    $.Field({Static:false, Public:false}, "m_bAllowExtensionMethods", $.Boolean);

    $.Field({Static:false, Public:false}, "m_bCurrentSymIsBogus", $.Boolean);

    $.Field({Static:false, Public:false}, "m_bCurrentSymIsInaccessible", $.Boolean);

    $.Field({Static:false, Public:false}, "m_bcanIncludeExtensionsInResults", $.Boolean);

    $.Field({Static:false, Public:false}, "m_bEndIterationAtCurrentExtensionList", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.mdToken */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.mdToken", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    mdtModule: 0, 
    mdtTypeRef: 16777216, 
    mdtTypeDef: 33554432, 
    mdtFieldDef: 67108864, 
    mdtMethodDef: 100663296, 
    mdtParamDef: 134217728, 
    mdtInterfaceImpl: 150994944, 
    mdtMemberRef: 167772160, 
    mdtCustomAttribute: 201326592, 
    mdtPermission: 234881024, 
    mdtSignature: 285212672, 
    mdtEvent: 335544320, 
    mdtProperty: 385875968, 
    mdtModuleRef: 436207616, 
    mdtTypeSpec: 452984832, 
    mdtAssembly: 536870912, 
    mdtAssemblyRef: 587202560, 
    mdtFile: 637534208, 
    mdtExportedType: 654311424, 
    mdtManifestResource: 671088640, 
    mdtGenericParam: 704643072, 
    mdtMethodSpec: 721420288, 
    mdtGenericParamConstraint: 738197504, 
    mdtString: 1879048192, 
    mdtName: 1895825408, 
    mdtBaseType: 1912602624, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.CorAttributeTargets */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.CorAttributeTargets", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    catAssembly: 1, 
    catModule: 2, 
    catClass: 4, 
    catStruct: 8, 
    catEnum: 16, 
    catConstructor: 32, 
    catMethod: 64, 
    catProperty: 128, 
    catField: 256, 
    catEvent: 512, 
    catInterface: 1024, 
    catParameter: 2048, 
    catDelegate: 4096, 
    catClassMembers: 6140, 
    catGenericParameter: 16384, 
    catAll: 24575, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.MethodKindEnum */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.MethodKindEnum", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Constructor: 1, 
    Destructor: 2, 
    PropAccessor: 3, 
    EventAccessor: 4, 
    ExplicitConv: 5, 
    ImplicitConv: 6, 
    Anonymous: 7, 
    Invoke: 8, 
    BeginInvoke: 9, 
    EndInvoke: 10, 
    AnonymousTypeToString: 11, 
    AnonymousTypeEquals: 12, 
    AnonymousTypeGetHashCode: 13, 
    IteratorDispose: 14, 
    IteratorReset: 15, 
    IteratorGetEnumerator: 16, 
    IteratorGetEnumeratorDelegating: 17, 
    IteratorMoveNext: 18, 
    Latent: 19, 
    Actual: 20, 
    IteratorFinally: 21, 
  }
);

/* class Microsoft.CSharp.RuntimeBinder.Semantics.MethodTypeInferrer */ 

(function MethodTypeInferrer$Members () {
  var $, $thisType;
































































  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.MethodTypeInferrer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ArgInfos"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddExactBound", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddLowerBound", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddUpperBound", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AllFixed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "AnyDependsOn", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "CanInferExtensionObject", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "CanObjectOfExtensionBeInferred", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ArgInfos")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeduceAllDependencies", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DeduceDependencies", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "DependsDirectlyOn", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "DependsOn", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "DependsOnAny", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "DependsTransitivelyOn", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "DoesInputTypeContain", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DoesOutputTypeContain", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DoSecondPhase", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodTypeInferrer+NewInferenceResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ExactArrayInference", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExactConstructedInference", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExactInference", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExactNullableInference", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExactTypeArgumentInference", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExactTypeParameterInference", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Fix", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "FixDependentParameters", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodTypeInferrer+NewInferenceResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "FixNondependentParameters", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodTypeInferrer+NewInferenceResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFixedDelegateParameters", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetGlobalSymbols", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BSYMMGR"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetResults", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSymbolLoader", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeManager", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager"))
    );

    $.ExternalMethod({Static:false, Public:false}, "HasBound", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasUnfixedParamInInputType", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasUnfixedParamInOutputType", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Infer", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ArgInfos"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InferForMethodGroupConversion", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "InferTypeArgs", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "InferTypeArgsFirstPhase", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "InferTypeArgsSecondPhase", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeDependencies", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "IsReallyAType", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsUnfixed", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsUnfixed", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LowerBoundArrayInference", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LowerBoundClassInference", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LowerBoundConstructedInference", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LowerBoundInference", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LowerBoundInterfaceInference", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LowerBoundTypeArgumentInference", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LowerBoundTypeParameterInference", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MakeOutputTypeInferences", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "MethodGroupReturnTypeInference", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OutputTypeInference", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetIndirectsToUnknown", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetUnknownsToNotDependent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateDependenciesAfterFix", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "UpperBoundArrayInference", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpperBoundClassInference", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpperBoundConstructedInference", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpperBoundInference", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpperBoundInterfaceInference", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpperBoundTypeArgumentInference", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpperBoundTypeParameterInference", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.Field({Static:false, Public:false}, "symbolLoader", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"));

    $.Field({Static:false, Public:false}, "binder", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder"));

    $.Field({Static:false, Public:false}, "pMethodTypeParameters", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"));

    $.Field({Static:false, Public:false}, "pClassTypeArguments", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"));

    $.Field({Static:false, Public:false}, "pMethodFormalParameterTypes", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"));

    $.Field({Static:false, Public:false}, "pMethodArguments", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ArgInfos"));

    $.Field({Static:false, Public:false}, "pExactBounds", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])]));

    $.Field({Static:false, Public:false}, "pUpperBounds", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])]));

    $.Field({Static:false, Public:false}, "pLowerBounds", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])]));

    $.Field({Static:false, Public:false}, "pFixedResults", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")]));

    $.Field({Static:false, Public:false}, "ppDependencies", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodTypeInferrer+Dependency"), JSIL.ArrayDimensionParameter(2)]));

    $.Field({Static:false, Public:false}, "dependenciesDirty", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.MethodTypeInferrer+NewInferenceResult */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.MethodTypeInferrer+NewInferenceResult", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    InferenceFailed: 0, 
    MadeProgress: 1, 
    NoProgress: 2, 
    Success: 3, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.MethodTypeInferrer+Dependency */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.MethodTypeInferrer+Dependency", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Unknown: 0, 
    NotDependent: 1, 
    DependsMask: 16, 
    Direct: 17, 
    Indirect: 18, 
  }
);

/* class Microsoft.CSharp.RuntimeBinder.Semantics.NameGenerator */ 

(function NameGenerator$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.NameGenerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.CNullable */ 

(function CNullable$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.CNullable", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorHandling"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExprFactory")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "BindNew", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:true }, "BindValue", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetErrorContext", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorHandling"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetExprFactory", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExprFactory"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSymbolLoader", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"))
    );

    $.ExternalMethod({Static:true , Public:true }, "IsNullableConstructor", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:true , Public:true }, "StripNullableConstructor", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.Field({Static:false, Public:false}, "m_pSymbolLoader", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"));

    $.Field({Static:false, Public:false}, "m_exprFactory", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExprFactory"));

    $.Field({Static:false, Public:false}, "m_pErrorContext", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorHandling"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.NullableCallLiftKind */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.NullableCallLiftKind", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    NotLifted: 0, 
    Operator: 1, 
    EqualityOperator: 2, 
    InequalityOperator: 3, 
    UserDefinedConversion: 4, 
    NullableConversion: 5, 
    NullableConversionConstructor: 6, 
    NullableIntermediateConversion: 7, 
    NotLiftedIntermediateConversion: 8, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.CONSTRESKIND */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.CONSTRESKIND", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ConstTrue: 0, 
    ConstFalse: 1, 
    ConstNotConst: 2, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.LambdaParams */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.LambdaParams", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    FromDelegate: 0, 
    FromLambda: 1, 
    Error: 2, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.TypeOrSimpleNameResolution */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.TypeOrSimpleNameResolution", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Unknown: 0, 
    CType: 1, 
    SimpleName: 2, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.InitializerKind */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.InitializerKind", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    CollectionInitializer: 0, 
    ObjectInitializer: 1, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.ConstantStringConcatenation */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.ConstantStringConcatenation", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    NotAString: 0, 
    NotYetCalculated: 1, 
    Calculated: 2, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.ForeachKind */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.ForeachKind", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Array: 0, 
    String: 1, 
    Enumerator: 2, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFATTR */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFATTR", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    PA_ATTRIBUTEUSAGE: 0, 
    PA_OBSOLETE: 1, 
    PA_CLSCOMPLIANT: 2, 
    PA_CONDITIONAL: 3, 
    PA_REQUIRED: 4, 
    PA_FIXED: 5, 
    PA_DEBUGGABLE: 6, 
    PA_ASSEMBLYFLAGS: 7, 
    PA_ASSEMBLYVERSION: 8, 
    PA_ASSEMBLYCULTURE: 9, 
    PA_NAME: 10, 
    PA_DLLIMPORT: 11, 
    PA_COMIMPORT: 12, 
    PA_GUID: 13, 
    PA_IN: 14, 
    PA_OUT: 15, 
    PA_STRUCTOFFSET: 16, 
    PA_STRUCTLAYOUT: 17, 
    PA_PARAMARRAY: 18, 
    PA_COCLASS: 19, 
    PA_DEFAULTCHARSET: 20, 
    PA_DEFAULTVALUE: 21, 
    PA_UNMANAGEDFUNCTIONPOINTER: 22, 
    PA_COMPILATIONRELAXATIONS: 23, 
    PA_RUNTIMECOMPATIBILITY: 24, 
    PA_FRIENDASSEMBLY: 25, 
    PA_KEYFILE: 26, 
    PA_KEYNAME: 27, 
    PA_DELAYSIGN: 28, 
    PA_DEFAULTMEMBER: 29, 
    PA_TYPEFORWARDER: 30, 
    PA_EXTENSION: 31, 
    PA_COUNT: 32, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    PM_FIRST: 0, 
    PM_ARRAY_GETLENGTH: 1, 
    PM_DECIMAL_OPDECREMENT: 2, 
    PM_DECIMAL_OPDIVISION: 3, 
    PM_DECIMAL_OPEQUALITY: 4, 
    PM_DECIMAL_OPGREATERTHAN: 5, 
    PM_DECIMAL_OPGREATERTHANOREQUAL: 6, 
    PM_DECIMAL_OPINCREMENT: 7, 
    PM_DECIMAL_OPINEQUALITY: 8, 
    PM_DECIMAL_OPLESSTHAN: 9, 
    PM_DECIMAL_OPLESSTHANOREQUAL: 10, 
    PM_DECIMAL_OPMINUS: 11, 
    PM_DECIMAL_OPMODULUS: 12, 
    PM_DECIMAL_OPMULTIPLY: 13, 
    PM_DECIMAL_OPPLUS: 14, 
    PM_DECIMAL_OPUNARYMINUS: 15, 
    PM_DECIMAL_OPUNARYPLUS: 16, 
    PM_DELEGATE_COMBINE: 17, 
    PM_DELEGATE_OPEQUALITY: 18, 
    PM_DELEGATE_OPINEQUALITY: 19, 
    PM_DELEGATE_REMOVE: 20, 
    PM_EXPRESSION_ADD: 21, 
    PM_EXPRESSION_ADD_USER_DEFINED: 22, 
    PM_EXPRESSION_ADDCHECKED: 23, 
    PM_EXPRESSION_ADDCHECKED_USER_DEFINED: 24, 
    PM_EXPRESSION_AND: 25, 
    PM_EXPRESSION_AND_USER_DEFINED: 26, 
    PM_EXPRESSION_ANDALSO: 27, 
    PM_EXPRESSION_ANDALSO_USER_DEFINED: 28, 
    PM_EXPRESSION_ARRAYINDEX: 29, 
    PM_EXPRESSION_ARRAYINDEX2: 30, 
    PM_EXPRESSION_ASSIGN: 31, 
    PM_EXPRESSION_CONDITION: 32, 
    PM_EXPRESSION_CONSTANT_OBJECT_TYPE: 33, 
    PM_EXPRESSION_CONVERT: 34, 
    PM_EXPRESSION_CONVERT_USER_DEFINED: 35, 
    PM_EXPRESSION_CONVERTCHECKED: 36, 
    PM_EXPRESSION_CONVERTCHECKED_USER_DEFINED: 37, 
    PM_EXPRESSION_DIVIDE: 38, 
    PM_EXPRESSION_DIVIDE_USER_DEFINED: 39, 
    PM_EXPRESSION_EQUAL: 40, 
    PM_EXPRESSION_EQUAL_USER_DEFINED: 41, 
    PM_EXPRESSION_EXCLUSIVEOR: 42, 
    PM_EXPRESSION_EXCLUSIVEOR_USER_DEFINED: 43, 
    PM_EXPRESSION_FIELD: 44, 
    PM_EXPRESSION_GREATERTHAN: 45, 
    PM_EXPRESSION_GREATERTHAN_USER_DEFINED: 46, 
    PM_EXPRESSION_GREATERTHANOREQUAL: 47, 
    PM_EXPRESSION_GREATERTHANOREQUAL_USER_DEFINED: 48, 
    PM_EXPRESSION_LAMBDA: 49, 
    PM_EXPRESSION_LEFTSHIFT: 50, 
    PM_EXPRESSION_LEFTSHIFT_USER_DEFINED: 51, 
    PM_EXPRESSION_LESSTHAN: 52, 
    PM_EXPRESSION_LESSTHAN_USER_DEFINED: 53, 
    PM_EXPRESSION_LESSTHANOREQUAL: 54, 
    PM_EXPRESSION_LESSTHANOREQUAL_USER_DEFINED: 55, 
    PM_EXPRESSION_MODULO: 56, 
    PM_EXPRESSION_MODULO_USER_DEFINED: 57, 
    PM_EXPRESSION_MULTIPLY: 58, 
    PM_EXPRESSION_MULTIPLY_USER_DEFINED: 59, 
    PM_EXPRESSION_MULTIPLYCHECKED: 60, 
    PM_EXPRESSION_MULTIPLYCHECKED_USER_DEFINED: 61, 
    PM_EXPRESSION_NOTEQUAL: 62, 
    PM_EXPRESSION_NOTEQUAL_USER_DEFINED: 63, 
    PM_EXPRESSION_OR: 64, 
    PM_EXPRESSION_OR_USER_DEFINED: 65, 
    PM_EXPRESSION_ORELSE: 66, 
    PM_EXPRESSION_ORELSE_USER_DEFINED: 67, 
    PM_EXPRESSION_PARAMETER: 68, 
    PM_EXPRESSION_RIGHTSHIFT: 69, 
    PM_EXPRESSION_RIGHTSHIFT_USER_DEFINED: 70, 
    PM_EXPRESSION_SUBTRACT: 71, 
    PM_EXPRESSION_SUBTRACT_USER_DEFINED: 72, 
    PM_EXPRESSION_SUBTRACTCHECKED: 73, 
    PM_EXPRESSION_SUBTRACTCHECKED_USER_DEFINED: 74, 
    PM_EXPRESSION_UNARYPLUS_USER_DEFINED: 75, 
    PM_EXPRESSION_NEGATE: 76, 
    PM_EXPRESSION_NEGATE_USER_DEFINED: 77, 
    PM_EXPRESSION_NEGATECHECKED: 78, 
    PM_EXPRESSION_NEGATECHECKED_USER_DEFINED: 79, 
    PM_EXPRESSION_CALL: 80, 
    PM_EXPRESSION_NEW: 81, 
    PM_EXPRESSION_NEW_MEMBERS: 82, 
    PM_EXPRESSION_NEW_TYPE: 83, 
    PM_EXPRESSION_QUOTE: 84, 
    PM_EXPRESSION_ARRAYLENGTH: 85, 
    PM_EXPRESSION_NOT: 86, 
    PM_EXPRESSION_NOT_USER_DEFINED: 87, 
    PM_EXPRESSION_NEWARRAYINIT: 88, 
    PM_EXPRESSION_PROPERTY: 89, 
    PM_EXPRESSION_INVOKE: 90, 
    PM_DELEGATE_CREATEDELEGATE_TYPE_OBJ_METHINFO: 91, 
    PM_G_OPTIONAL_CTOR: 92, 
    PM_G_OPTIONAL_GETHASVALUE: 93, 
    PM_G_OPTIONAL_GETVALUE: 94, 
    PM_G_OPTIONAL_GET_VALUE_OR_DEF: 95, 
    PM_STRING_CONCAT_OBJECT_1: 96, 
    PM_STRING_CONCAT_OBJECT_2: 97, 
    PM_STRING_CONCAT_OBJECT_3: 98, 
    PM_STRING_CONCAT_STRING_1: 99, 
    PM_STRING_CONCAT_STRING_2: 100, 
    PM_STRING_CONCAT_STRING_3: 101, 
    PM_STRING_CONCAT_STRING_4: 102, 
    PM_STRING_CONCAT_SZ_OBJECT: 103, 
    PM_STRING_CONCAT_SZ_STRING: 104, 
    PM_STRING_GETCHARS: 105, 
    PM_STRING_GETLENGTH: 106, 
    PM_STRING_OPEQUALITY: 107, 
    PM_STRING_OPINEQUALITY: 108, 
    PM_COUNT: 109, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFPROP */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFPROP", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    PP_FIRST: 0, 
    PP_ARRAY_LENGTH: 1, 
    PP_G_OPTIONAL_VALUE: 2, 
    PP_COUNT: 3, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.MethodRequiredEnum */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.MethodRequiredEnum", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Required: 0, 
    Optional: 1, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.MethodCallingConventionEnum */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.MethodCallingConventionEnum", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Static: 0, 
    Virtual: 1, 
    Instance: 2, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.MethodSignatureEnum */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.MethodSignatureEnum", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SIG_CLASS_TYVAR: 140, 
    SIG_METH_TYVAR: 141, 
    SIG_SZ_ARRAY: 142, 
    SIG_REF: 143, 
    SIG_OUT: 144, 
  }
);

/* class Microsoft.CSharp.RuntimeBinder.Semantics.PredefinedMethodInfo */ 

(function PredefinedMethodInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.PredefinedMethodInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodRequiredEnum"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedName"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodCallingConventionEnum"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ACCESS"), 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Int32])
        ])
    );

    $.Field({Static:false, Public:true }, "method", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH"));

    $.Field({Static:false, Public:true }, "type", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType"));

    $.Field({Static:false, Public:true }, "$name", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedName"));

    $.Field({Static:false, Public:true }, "callingConvention", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodCallingConventionEnum"));

    $.Field({Static:false, Public:true }, "access", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ACCESS"));

    $.Field({Static:false, Public:true }, "cTypeVars", $.Int32);

    $.Field({Static:false, Public:true }, "signature", $jsilcore.TypeRef("System.Array", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.PredefinedPropertyInfo */ 

(function PredefinedPropertyInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.PredefinedPropertyInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFPROP"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodRequiredEnum"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedName"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH")
        ])
    );

    $.Field({Static:false, Public:true }, "property", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFPROP"));

    $.Field({Static:false, Public:true }, "$name", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedName"));

    $.Field({Static:false, Public:true }, "getter", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH"));

    $.Field({Static:false, Public:true }, "setter", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.PredefinedMembers */ 

(function PredefinedMembers$Members () {
  var $, $thisType;












































  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.PredefinedMembers", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureMethod", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureProperty", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PropertySymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFPROP")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindDelegateConstructor", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), $jsilcore.TypeRef("System.Array", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindDelegateConstructor", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol")])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindDelegateConstructor", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "getBSymmgr", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BSYMMGR"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetErrorContext", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorHandling"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethAccess", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ACCESS"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetMethInfo", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PredefinedMethodInfo"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMethName", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetMethod", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMethParent", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethPredefName", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedName"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethPredefType", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethSignature", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int32]), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethTyVars", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNameManager", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.NameManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOptionalMethod", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOptPredefAgg", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPredefName", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedName")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetProperty", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PropertySymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFPROP")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPropGetter", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFPROP")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPropInfo", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PredefinedPropertyInfo"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFPROP")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPropName", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFPROP")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPropPredefName", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedName"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFPROP")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPropPredefType", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFPROP")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPropSetter", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFPROP")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSymbolLoader", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeManager", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IsMethStatic", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsMethVirtual", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadMethod", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $.Int32, $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ACCESS"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadMethod", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadProperty", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PropertySymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFPROP")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadProperty", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PropertySymbol"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFPROP"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadTypeArrayFromSignature", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), [
          $jsilcore.TypeRef("System.Array", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadTypeFromSignature", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), [
          $jsilcore.TypeRef("System.Array", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupMethodWhileLoading", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), $.Int32, 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ACCESS"), 
          $.Boolean, $.Boolean, 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReportError", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReportError", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReportError", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFPROP"))
    );

    $.ExternalMethod({Static:true , Public:false}, "RETAILVERIFY", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "m_loader", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"));

    $.Field({Static:false, Public:false}, "RuntimeBinderSymbolTable", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.SymbolTable"));

    $.Field({Static:false, Public:false}, "m_methods", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol")]));

    $.Field({Static:false, Public:false}, "m_properties", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PropertySymbol")]));

    $.Field({Static:true , Public:false}, "g_DelegateCtorSignature1", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:true , Public:false}, "g_DelegateCtorSignature2", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:true , Public:false}, "g_predefinedProperties", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PredefinedPropertyInfo")]));

    $.Field({Static:true , Public:false}, "g_predefinedMethods", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PredefinedMethodInfo")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.ACCESSERROR */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.ACCESSERROR", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ACCESSERROR_NOACCESS: 0, 
    ACCESSERROR_NOACCESSTHRU: 1, 
    ACCESSERROR_NOERROR: 2, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.SubstTypeFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.SubstTypeFlags", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    NormNone: 0, 
    NormClass: 1, 
    NormMeth: 2, 
    NormAll: 3, 
    DenormClass: 4, 
    DenormMeth: 8, 
    DenormAll: 12, 
    NoRefOutDifference: 16, 
  }
);

/* class Microsoft.CSharp.RuntimeBinder.Semantics.SubstContext */ 

(function SubstContext$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.SubstContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SubstTypeFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SubstTypeFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")]), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")]), $.Int32, 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SubstTypeFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "FNop", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "Init", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SubstTypeFlags")
        ])
    );

    $.Field({Static:false, Public:true }, "prgtypeCls", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")]));

    $.Field({Static:false, Public:true }, "ctypeCls", $.Int32);

    $.Field({Static:false, Public:true }, "prgtypeMeth", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")]));

    $.Field({Static:false, Public:true }, "ctypeMeth", $.Int32);

    $.Field({Static:false, Public:true }, "grfst", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SubstTypeFlags"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.CheckConstraintsFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.CheckConstraintsFlags", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Outer: 1, 
    NoDupErrors: 2, 
    NoErrors: 4, 
  }
);

/* class Microsoft.CSharp.RuntimeBinder.Semantics.TypeBind */ 

(function TypeBind$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("Microsoft.CSharp.RuntimeBinder.Semantics.TypeBind", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "CheckConstraints", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CSemanticChecker"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorHandling"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CheckConstraintsFlags")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckConstraintsCore", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CSemanticChecker"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorHandling"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CheckConstraintsFlags")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CheckMethConstraints", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CSemanticChecker"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorHandling"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethWithInst")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckSingleConstraint", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CSemanticChecker"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorHandling"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CheckConstraintsFlags")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SatisfiesBound", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CSemanticChecker"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.UtilityTypeExtensions */ 

(function UtilityTypeExtensions$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("Microsoft.CSharp.RuntimeBinder.Semantics.UtilityTypeExtensions", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "AllConstraintInterfaces", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")]), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm00.Microsoft.CSharp.RuntimeBinder.Semantics.UtilityTypeExtensions_$lAllConstraintInterfaces$gd__1.__Type__]; })
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AllPossibleInterfaces", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")]), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm00.Microsoft.CSharp.RuntimeBinder.Semantics.UtilityTypeExtensions_$lAllPossibleInterfaces$gd__4.__Type__]; })
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "InterfaceAndBases", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")]), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm00.Microsoft.CSharp.RuntimeBinder.Semantics.UtilityTypeExtensions_$lInterfaceAndBases$gd__0.__Type__]; })
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TypeAndBaseClasses", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")]), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm00.Microsoft.CSharp.RuntimeBinder.Semantics.UtilityTypeExtensions_$lTypeAndBaseClasses$gd__2.__Type__]; })
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TypeAndBaseClassInterfaces", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")]), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm00.Microsoft.CSharp.RuntimeBinder.Semantics.UtilityTypeExtensions_$lTypeAndBaseClassInterfaces$gd__3.__Type__]; })
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.UtilityTypeExtensions+<InterfaceAndBases>d__0 */ 

(function $lInterfaceAndBases$gd__0$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.UtilityTypeExtensions+<InterfaceAndBases>d__0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lMicrosoft.CSharp.RuntimeBinder.Semantics.AggregateType$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")]))
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")]), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lMicrosoft.CSharp.RuntimeBinder.Semantics.AggregateType$g.get_Current", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"))
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")]), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm01.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "type", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"));

    $.Field({Static:false, Public:true }, "$l$g3__type", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap2", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lMicrosoft.CSharp.RuntimeBinder.Semantics.AggregateType$g.Current", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")]), 
      /* 3 */ $asm01.TypeRef("System.IDisposable"), 
      /* 4 */ $asm01.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.UtilityTypeExtensions+<AllConstraintInterfaces>d__1 */ 

(function $lAllConstraintInterfaces$gd__1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.UtilityTypeExtensions+<AllConstraintInterfaces>d__1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lMicrosoft.CSharp.RuntimeBinder.Semantics.AggregateType$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")]))
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")]), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lMicrosoft.CSharp.RuntimeBinder.Semantics.AggregateType$g.get_Current", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"))
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")]), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm01.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "constraints", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"));

    $.Field({Static:false, Public:true }, "$l$g3__constraints", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap2", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g7__wrap3", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lMicrosoft.CSharp.RuntimeBinder.Semantics.AggregateType$g.Current", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")]), 
      /* 3 */ $asm01.TypeRef("System.IDisposable"), 
      /* 4 */ $asm01.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.UtilityTypeExtensions+<TypeAndBaseClasses>d__2 */ 

(function $lTypeAndBaseClasses$gd__2$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.UtilityTypeExtensions+<TypeAndBaseClasses>d__2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lMicrosoft.CSharp.RuntimeBinder.Semantics.AggregateType$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")]))
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")]), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lMicrosoft.CSharp.RuntimeBinder.Semantics.AggregateType$g.get_Current", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"))
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")]), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm01.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "type", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"));

    $.Field({Static:false, Public:true }, "$l$g3__type", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"));

    $.Field({Static:false, Public:false}, "$lt$g5__1", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lMicrosoft.CSharp.RuntimeBinder.Semantics.AggregateType$g.Current", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")]), 
      /* 3 */ $asm01.TypeRef("System.IDisposable"), 
      /* 4 */ $asm01.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.UtilityTypeExtensions+<TypeAndBaseClassInterfaces>d__3 */ 

(function $lTypeAndBaseClassInterfaces$gd__3$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.UtilityTypeExtensions+<TypeAndBaseClassInterfaces>d__3", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lMicrosoft.CSharp.RuntimeBinder.Semantics.AggregateType$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")]))
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")]), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lMicrosoft.CSharp.RuntimeBinder.Semantics.AggregateType$g.get_Current", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"))
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")]), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm01.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "type", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"));

    $.Field({Static:false, Public:true }, "$l$g3__type", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap2", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap3", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lMicrosoft.CSharp.RuntimeBinder.Semantics.AggregateType$g.Current", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")]), 
      /* 3 */ $asm01.TypeRef("System.IDisposable"), 
      /* 4 */ $asm01.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.UtilityTypeExtensions+<AllPossibleInterfaces>d__4 */ 

(function $lAllPossibleInterfaces$gd__4$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.UtilityTypeExtensions+<AllPossibleInterfaces>d__4", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally3", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lMicrosoft.CSharp.RuntimeBinder.Semantics.CType$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")]))
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")]), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lMicrosoft.CSharp.RuntimeBinder.Semantics.CType$g.get_Current", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"))
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")]), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm01.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "type", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));

    $.Field({Static:false, Public:true }, "$l$g3__type", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lMicrosoft.CSharp.RuntimeBinder.Semantics.CType$g.Current", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")]), 
      /* 3 */ $asm01.TypeRef("System.IDisposable"), 
      /* 4 */ $asm01.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.SymWithType */ 

(function SymWithType$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.SymWithType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Event", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EventSymbol"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Field", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.FieldSymbol"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Ats", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Sym", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Meth", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"))
    );

    $.ExternalMethod({Static:false, Public:true }, "MethProp", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodOrPropertySymbol"))
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "Prop", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PropertySymbol"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Set", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.Field({Static:false, Public:false}, "ats", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"));

    $.Field({Static:false, Public:false}, "sym", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"));

    $.Property({Static:false, Public:true }, "Ats", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"));

    $.Property({Static:false, Public:true }, "Sym", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithType */ 

(function MethPropWithType$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymWithType"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodOrPropertySymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.MethWithType */ 

(function MethWithType$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithType"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.MethWithType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.PropWithType */ 

(function PropWithType$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithType"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.PropWithType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PropertySymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymWithType"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EventWithType */ 

(function EventWithType$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymWithType"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EventWithType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EventSymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.FieldWithType */ 

(function FieldWithType$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymWithType"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.FieldWithType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.FieldSymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst */ 

(function MethPropWithInst$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray)) ();
  };






  function MethPropWithInst_get_TypeArgs () {
    return this.MethPropWithInst$TypeArgs$value;
  }; 


  function MethPropWithInst_set_TypeArgs (value) {
    this.MethPropWithInst$TypeArgs$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithType"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodOrPropertySymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodOrPropertySymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:true }, "get_TypeArgs", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")), 
      MethPropWithInst_get_TypeArgs
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Set", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodOrPropertySymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")
        ])
    );

    $.Method({Static:false, Public:false}, "set_TypeArgs", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")), 
      MethPropWithInst_set_TypeArgs
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "MethPropWithInst$TypeArgs$value", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "TypeArgs", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.MethWithInst */ 

(function MethWithInst$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.MethWithInst", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.Symbol */ 

(function Symbol$Members () {
  var $, $thisType;




































  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.Symbol", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "computeCurrentBogusState", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_isStatic", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAccess", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ACCESS"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAssembly", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Reflection.Assembly"))
    );

    $.ExternalMethod({Static:false, Public:true }, "getBogus", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "getInputFile", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.InputFile"))
    );

    $.ExternalMethod({Static:false, Public:true }, "getKind", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SYMKIND"))
    );

    $.ExternalMethod({Static:false, Public:true }, "getType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "hasBogus", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "checkBogus", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "initBogus", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "InternalsVisibleTo", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.Assembly")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsAggregateDeclaration", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsAggregateSymbol", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsEventSymbol", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsFieldSymbol", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsFMETHSYM", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsHideByName", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsLocalVariableSymbol", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsMethodOrPropertySymbol", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsMethodSymbol", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsNamespaceDeclaration", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsNamespaceSymbol", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsOverride", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsPropertySymbol", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsTypeParameterSymbol", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "isUserCallable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsVirtual", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "mask", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.symbmask_t"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SameAssemOrFriend", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetAccess", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ACCESS"))
    );

    $.ExternalMethod({Static:false, Public:true }, "setBogus", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "setKind", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SYMKIND"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SymBaseVirtual", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.Field({Static:false, Public:false}, "kind", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SYMKIND"));

    $.Field({Static:false, Public:false}, "isBogus", $.Boolean);

    $.Field({Static:false, Public:false}, "checkedBogus", $.Boolean);

    $.Field({Static:false, Public:false}, "access", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ACCESS"));

    $.Field({Static:false, Public:true }, "$name", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"));

    $.Field({Static:false, Public:true }, "parent", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ParentSymbol"));

    $.Field({Static:false, Public:true }, "nextChild", $.Type);

    $.Field({Static:false, Public:true }, "nextSameName", $.Type);

    $.Property({Static:false, Public:true }, "isStatic", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.ParentSymbol */ 

(function ParentSymbol$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.ParentSymbol", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "AddToChildList", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"))
    );

    $.Field({Static:false, Public:true }, "firstChild", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"));

    $.Field({Static:false, Public:false}, "lastChild", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.Declaration */ 

(function Declaration$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ParentSymbol"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.Declaration", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "bag", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NamespaceOrAggregateSymbol"));

    $.Field({Static:false, Public:true }, "declNext", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.AggregateDeclaration */ 

(function AggregateDeclaration$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Declaration"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.AggregateDeclaration", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Agg", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAssembly", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Reflection.Assembly"))
    );

    $.ExternalMethod({Static:false, Public:true }, "getInputFile", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.InputFile"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.GlobalAttributeDeclaration */ 

(function GlobalAttributeDeclaration$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.GlobalAttributeDeclaration", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.NamespaceDeclaration */ 

(function NamespaceDeclaration$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Declaration"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.NamespaceDeclaration", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Bag", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NamespaceSymbol"))
    );

    $.ExternalMethod({Static:false, Public:true }, "NameSpace", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NamespaceSymbol"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Microsoft.CSharp.RuntimeBinder.Semantics.ITypeOrNamespace */ 

JSIL.MakeInterface(
  "Microsoft.CSharp.RuntimeBinder.Semantics.ITypeOrNamespace", false, [], function ($) {
    $.Method({}, "IsType", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "IsNamespace", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "AsNamespace", JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AssemblyQualifiedNamespaceSymbol")));
    $.Method({}, "AsType", JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")));
  }, []);

/* class Microsoft.CSharp.RuntimeBinder.Semantics.NamespaceOrAggregateSymbol */ 

(function NamespaceOrAggregateSymbol$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ParentSymbol"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.NamespaceOrAggregateSymbol", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "AddDecl", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Declaration"))
    );

    $.ExternalMethod({Static:false, Public:true }, "DeclFirst", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Declaration"))
    );

    $.Field({Static:false, Public:false}, "declFirst", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Declaration"));

    $.Field({Static:false, Public:false}, "declLast", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Declaration"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol */ 

(function AggregateSymbol$Members () {
  var $, $thisType;





































































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NamespaceOrAggregateSymbol"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "AggKind", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggKindEnum"))
    );

    $.ExternalMethod({Static:false, Public:true }, "DeclFirst", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:true }, "DeclOnly", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:true }, "FindBaseAgg", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parent", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NamespaceOrAggregateSymbol"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAssemblyID", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.KAID"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetBaseAgg", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetBaseClass", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetFirstUDConversion", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetIfaces", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetIfacesAll", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetModuleID", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.KAID"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOuterAgg", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetPredefType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "getThisType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetTypeManager", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetTypeVars", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetTypeVarsAll", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetUnderlyingType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "HasConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "HasExternReference", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "HasPubNoArgCtor", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "InAlias", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.KAID")])
    );

    $.ExternalMethod({Static:false, Public:true }, "InitFromInfile", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.InputFile"))
    );

    $.ExternalMethod({Static:false, Public:true }, "InternalsVisibleTo", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.Assembly")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsAbstract", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsAnonymousType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsClass", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsDelegate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsEnum", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsInterface", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsKnownManagedStructStatus", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsLayoutError", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsManagedStruct", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "isNested", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "isPredefAgg", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsPredefined", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsRefType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsSealed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsSkipUDOps", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsSource", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsStatic", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsStruct", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsUnmanagedStruct", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsUnresolved", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsValueType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetAbstract", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetAggKind", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggKindEnum"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetAnonymousType", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetBaseClass", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetComImport", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetFirstUDConversion", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetHasConversion", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "SetHasExternReference", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetHasPubNoArgCtor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetIfaces", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetIfacesAll", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetLayoutError", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetManagedStruct", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetPredefined", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetPredefType", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetSealed", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetSkipUDOps", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetTypeManager", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetTypeVars", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetUnderlyingType", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetUnmanagedStruct", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:true }, "AssociatedSystemType", $asm01.TypeRef("System.Type"));

    $.Field({Static:false, Public:true }, "AssociatedAssembly", $asm01.TypeRef("System.Reflection.Assembly"));

    $.Field({Static:false, Public:false}, "infile", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.InputFile"));

    $.Field({Static:false, Public:false}, "atsInst", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"));

    $.Field({Static:false, Public:false}, "m_pBaseClass", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"));

    $.Field({Static:false, Public:false}, "m_pUnderlyingType", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"));

    $.Field({Static:false, Public:false}, "m_ifaces", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"));

    $.Field({Static:false, Public:false}, "m_ifacesAll", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"));

    $.Field({Static:false, Public:false}, "m_typeVarsThis", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"));

    $.Field({Static:false, Public:false}, "m_typeVarsAll", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"));

    $.Field({Static:false, Public:false}, "m_pTypeManager", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager"));

    $.Field({Static:false, Public:false}, "m_pConvFirst", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"));

    $.Field({Static:false, Public:false}, "aggKind", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggKindEnum"));

    $.Field({Static:false, Public:false}, "m_isLayoutError", $.Boolean);

    $.Field({Static:false, Public:false}, "m_isSource", $.Boolean);

    $.Field({Static:false, Public:false}, "m_isPredefined", $.Boolean);

    $.Field({Static:false, Public:false}, "m_iPredef", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType"));

    $.Field({Static:false, Public:false}, "m_isAbstract", $.Boolean);

    $.Field({Static:false, Public:false}, "m_isSealed", $.Boolean);

    $.Field({Static:false, Public:false}, "m_isUnmanagedStruct", $.Boolean);

    $.Field({Static:false, Public:false}, "m_isManagedStruct", $.Boolean);

    $.Field({Static:false, Public:false}, "m_hasPubNoArgCtor", $.Boolean);

    $.Field({Static:false, Public:false}, "m_hasExternReference", $.Boolean);

    $.Field({Static:false, Public:false}, "m_isSkipUDOps", $.Boolean);

    $.Field({Static:false, Public:false}, "m_isComImport", $.Boolean);

    $.Field({Static:false, Public:false}, "isAnonymousType", $.Boolean);

    $.Field({Static:false, Public:false}, "m_hasConversion", $asm01.TypeRef("System.Nullable`1", [$.Boolean]));

    $.Property({Static:false, Public:true }, "Parent", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NamespaceOrAggregateSymbol"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.AssemblyQualifiedNamespaceSymbol */ 

(function AssemblyQualifiedNamespaceSymbol$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ParentSymbol"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.AssemblyQualifiedNamespaceSymbol", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AsNamespace", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AsType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNS", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NamespaceSymbol"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNamespace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ITypeOrNamespace")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EventSymbol */ 

(function EventSymbol$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Boolean)) ();
  };




  function EventSymbol_get_IsWindowsRuntimeEvent () {
    return this.EventSymbol$IsWindowsRuntimeEvent$value;
  }; 

  function EventSymbol_set_IsWindowsRuntimeEvent (value) {
    this.EventSymbol$IsWindowsRuntimeEvent$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EventSymbol", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "containingDeclaration", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateDeclaration"))
    );

    $.Method({Static:false, Public:true }, "get_IsWindowsRuntimeEvent", 
      JSIL.MethodSignature.Return($.Boolean), 
      EventSymbol_get_IsWindowsRuntimeEvent
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_IsWindowsRuntimeEvent", 
      JSIL.MethodSignature.Action($.Boolean), 
      EventSymbol_set_IsWindowsRuntimeEvent
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:true }, "AssociatedEventInfo", $asm01.TypeRef("System.Reflection.EventInfo"));

    $.Field({Static:false, Public:true }, "isStatic", $.Boolean);

    $.Field({Static:false, Public:true }, "isOverride", $.Boolean);

    $.Field({Static:false, Public:true }, "type", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));

    $.Field({Static:false, Public:true }, "methAdd", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"));

    $.Field({Static:false, Public:true }, "methRemove", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"));

    $.Field({Static:false, Public:true }, "declaration", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateDeclaration"));

    $.Field({Static:false, Public:false}, "EventSymbol$IsWindowsRuntimeEvent$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "IsWindowsRuntimeEvent", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.VariableSymbol */ 

(function VariableSymbol$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.VariableSymbol", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "type", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.FieldSymbol */ 

(function FieldSymbol$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.VariableSymbol"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.FieldSymbol", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "containingDeclaration", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:true }, "getClass", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"))
    );

    $.ExternalMethod({Static:false, Public:true }, "getEvent", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EventSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetType", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"))
    );

    $.Field({Static:false, Public:true }, "isStatic", $.Boolean);

    $.Field({Static:false, Public:true }, "isReadOnly", $.Boolean);

    $.Field({Static:false, Public:true }, "isEvent", $.Boolean);

    $.Field({Static:false, Public:true }, "isAssigned", $.Boolean);

    $.Field({Static:false, Public:true }, "AssociatedFieldInfo", $asm01.TypeRef("System.Reflection.FieldInfo"));

    $.Field({Static:false, Public:true }, "declaration", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateDeclaration"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.MethodOrPropertySymbol */ 

(function MethodOrPropertySymbol$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.CSharp.RuntimeBinder.Syntax.Name))) ();
  };




  function MethodOrPropertySymbol_get_ParameterNames () {
    return this.MethodOrPropertySymbol$ParameterNames$value;
  }; 














  function MethodOrPropertySymbol_set_ParameterNames (value) {
    this.MethodOrPropertySymbol$ParameterNames$value = value;
  }; 







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ParentSymbol"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.MethodOrPropertySymbol", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "containingDeclaration", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateDeclaration"))
    );

    $.Method({Static:false, Public:true }, "get_ParameterNames", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name")])), 
      MethodOrPropertySymbol_get_ParameterNames
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Params", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"))
    );

    $.ExternalMethod({Static:false, Public:true }, "getClass", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDefaultParameterValue", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONSTVAL"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDefaultParameterValueConstValType", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetMarshalAsParameterValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Runtime.InteropServices.UnmanagedType"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "HasDefaultParameterValue", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "HasOptionalParameters", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsDispatchConstantParameter", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsExpImpl", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsMarshalAsParameter", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsParameterOptional", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsUnknownConstantParameter", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "MarshalAsObject", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.Method({Static:false, Public:false}, "set_ParameterNames", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name")])), 
      MethodOrPropertySymbol_set_ParameterNames
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Params", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetDefaultParameterValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONSTVAL")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetDispatchConstantParameter", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetMarshalAsParameter", 
      new JSIL.MethodSignature(null, [$.Int32, $asm01.TypeRef("System.Runtime.InteropServices.UnmanagedType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetOptionalParameter", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetUnknownConstantParameter", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:true }, "modOptCount", $.UInt32);

    $.Field({Static:false, Public:true }, "isStatic", $.Boolean);

    $.Field({Static:false, Public:true }, "isOverride", $.Boolean);

    $.Field({Static:false, Public:true }, "useMethInstead", $.Boolean);

    $.Field({Static:false, Public:true }, "isOperator", $.Boolean);

    $.Field({Static:false, Public:true }, "isParamArray", $.Boolean);

    $.Field({Static:false, Public:true }, "isHideByName", $.Boolean);

    $.Field({Static:false, Public:false}, "MethodOrPropertySymbol$ParameterNames$value", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name")]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "optionalParameterIndex", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:false}, "defaultParameterIndex", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:false}, "defaultParameters", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONSTVAL")]));

    $.Field({Static:false, Public:false}, "defaultParameterConstValTypes", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")]));

    $.Field({Static:false, Public:false}, "dispatchConstantParameterIndex", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:false}, "unknownConstantParameterIndex", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:false}, "marshalAsIndex", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:false}, "marshalAsBuffer", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Runtime.InteropServices.UnmanagedType")]));

    $.Field({Static:false, Public:true }, "swtSlot", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymWithType"));

    $.Field({Static:false, Public:true }, "errExpImpl", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ErrorType"));

    $.Field({Static:false, Public:true }, "RetType", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));

    $.Field({Static:false, Public:false}, "_Params", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"));

    $.Field({Static:false, Public:true }, "declaration", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateDeclaration"));

    $.Field({Static:false, Public:true }, "MetadataToken", $.Int32);

    $.Property({Static:false, Public:true }, "ParameterNames", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name")]));

    $.Property({Static:false, Public:true }, "Params", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.PropertySymbol */ 

(function PropertySymbol$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodOrPropertySymbol"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.PropertySymbol", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "AsIndexerSymbol", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.IndexerSymbol"))
    );

    $.ExternalMethod({Static:false, Public:true }, "isIndexer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:true }, "methGet", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"));

    $.Field({Static:false, Public:true }, "methSet", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"));

    $.Field({Static:false, Public:true }, "AssociatedPropertyInfo", $asm01.TypeRef("System.Reflection.PropertyInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.IndexerSymbol */ 

(function IndexerSymbol$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PropertySymbol"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.IndexerSymbol", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.LabelSymbol */ 

(function LabelSymbol$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.LabelSymbol", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.LocalVariableSymbol */ 

(function LocalVariableSymbol$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.VariableSymbol"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.LocalVariableSymbol", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetType", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"))
    );

    $.Field({Static:false, Public:true }, "wrap", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRWRAP"));

    $.Field({Static:false, Public:true }, "isThis", $.Boolean);

    $.Field({Static:false, Public:true }, "fUsedInAnonMeth", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol */ 

(function MethodSymbol$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodOrPropertySymbol"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ConvNext", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "getEvent", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EventSymbol"))
    );

    $.ExternalMethod({Static:false, Public:true }, "getProperty", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PropertySymbol"))
    );

    $.ExternalMethod({Static:false, Public:true }, "InferenceMustFail", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "isAnyAccessor", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsConstructor", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "isConversionOperator", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsDestructor", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "isEventAccessor", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "isExplicit", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsExtension", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "isImplicit", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "isInvoke", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsNullableConstructor", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "isPropertyAccessor", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "isSetAccessor", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "isUserCallable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "MethKind", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodKindEnum"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetConvNext", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetEvent", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EventSymbol"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetMethKind", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodKindEnum"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetProperty", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PropertySymbol"))
    );

    $.Field({Static:false, Public:false}, "methKind", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodKindEnum"));

    $.Field({Static:false, Public:false}, "inferenceMustFail", $.Boolean);

    $.Field({Static:false, Public:false}, "checkedInfMustFail", $.Boolean);

    $.Field({Static:false, Public:false}, "m_convNext", $.Type);

    $.Field({Static:false, Public:false}, "m_prop", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PropertySymbol"));

    $.Field({Static:false, Public:false}, "m_evt", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EventSymbol"));

    $.Field({Static:false, Public:true }, "isExtension", $.Boolean);

    $.Field({Static:false, Public:true }, "isExternal", $.Boolean);

    $.Field({Static:false, Public:true }, "isVirtual", $.Boolean);

    $.Field({Static:false, Public:true }, "isAbstract", $.Boolean);

    $.Field({Static:false, Public:true }, "isVarargs", $.Boolean);

    $.Field({Static:false, Public:true }, "AssociatedMemberInfo", $asm01.TypeRef("System.Reflection.MemberInfo"));

    $.Field({Static:false, Public:true }, "typeVars", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.InterfaceImplementationMethodSymbol */ 

(function InterfaceImplementationMethodSymbol$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.InterfaceImplementationMethodSymbol", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.IteratorFinallyMethodSymbol */ 

(function IteratorFinallyMethodSymbol$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.IteratorFinallyMethodSymbol", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.SymFactoryBase */ 

(function SymFactoryBase$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.SymFactoryBase", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SYMTBL"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.NameManager")])
    );

    $.ExternalMethod({Static:false, Public:false}, "newBasicSym", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SYMKIND"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ParentSymbol")
        ])
    );

    $.Field({Static:false, Public:false}, "m_pSymTable", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SYMTBL"));

    $.Field({Static:false, Public:false}, "m_pMissingNameNode", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"));

    $.Field({Static:false, Public:false}, "m_pMissingNameSym", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.MiscSymFactory */ 

(function MiscSymFactory$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymFactoryBase"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.MiscSymFactory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SYMTBL"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateIndexer", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.IndexerSymbol"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ParentSymbol"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateDeclaration")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateMDInfile", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.InputFile"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.mdToken")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateScope", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Scope"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Scope")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.NamespaceSymbol */ 

(function NamespaceSymbol$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NamespaceOrAggregateSymbol"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.NamespaceSymbol", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "AddAid", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.KAID"))
    );

    $.ExternalMethod({Static:false, Public:true }, "DeclAdded", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NamespaceDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:true }, "InAlias", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.KAID")])
    );

    $.Field({Static:false, Public:false}, "bsetFilter", $asm04.TypeRef("System.Collections.Generic.HashSet`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.KAID")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.Scope */ 

(function Scope$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ParentSymbol"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.Scope", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "nestingOrder", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.KAID */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.KAID", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    kaidNil: -1, 
    kaidGlobal: 0, 
    kaidErrorAssem: 1, 
    kaidThisAssembly: 2, 
    kaidUnresolved: 3, 
    kaidStartAssigning: 4, 
    kaidMinModule: 268435456, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.ACCESS */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.ACCESS", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ACC_UNKNOWN: 0, 
    ACC_PRIVATE: 1, 
    ACC_INTERNAL: 2, 
    ACC_PROTECTED: 3, 
    ACC_INTERNALPROTECTED: 4, 
    ACC_PUBLIC: 5, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.AggKindEnum */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.AggKindEnum", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Unknown: 0, 
    Class: 1, 
    Delegate: 2, 
    Interface: 3, 
    Struct: 4, 
    Enum: 5, 
    Lim: 6, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.ARRAYMETHOD */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.ARRAYMETHOD", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ARRAYMETH_LOAD: 0, 
    ARRAYMETH_LOADADDR: 1, 
    ARRAYMETH_STORE: 2, 
    ARRAYMETH_CTOR: 3, 
    ARRAYMETH_GETAT: 4, 
    ARRAYMETH_COUNT: 5, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.SpecCons */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.SpecCons", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    New: 1, 
    Ref: 2, 
    Val: 4, 
  }
);

/* class Microsoft.CSharp.RuntimeBinder.Semantics.SymbolExtensions */ 

(function SymbolExtensions$Members () {
  var $, $thisType;

















  JSIL.MakeStaticClass("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolExtensions", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AsAggregateDeclaration", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateDeclaration"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "AsAggregateSymbol", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "AsAssemblyQualifiedNamespaceSymbol", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AssemblyQualifiedNamespaceSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "AsEventSymbol", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EventSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "AsFieldSymbol", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.FieldSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "AsFMETHSYM", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "AsLocalVariableSymbol", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.LocalVariableSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "AsMethodOrPropertySymbol", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodOrPropertySymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "AsMethodSymbol", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "AsNamespaceDeclaration", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NamespaceDeclaration"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "AsNamespaceOrAggregateSymbol", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NamespaceOrAggregateSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "AsNamespaceSymbol", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NamespaceSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "AsPropertySymbol", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PropertySymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "AsScope", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Scope"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "AsTypeParameterSymbol", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Children", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol")]), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ParentSymbol")])
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm00.Microsoft.CSharp.RuntimeBinder.Semantics.SymbolExtensions_$lChildren$gd__0.__Type__]; })
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.SymbolExtensions+<Children>d__0 */ 

(function $lChildren$gd__0$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.SymbolExtensions+<Children>d__0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lMicrosoft.CSharp.RuntimeBinder.Semantics.Symbol$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol")]))
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol")]), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lMicrosoft.CSharp.RuntimeBinder.Semantics.Symbol$g.get_Current", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"))
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol")]), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm01.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "symbol", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ParentSymbol"));

    $.Field({Static:false, Public:true }, "$l$g3__symbol", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ParentSymbol"));

    $.Field({Static:false, Public:false}, "$lcurrent$g5__1", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lMicrosoft.CSharp.RuntimeBinder.Semantics.Symbol$g.Current", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol")]), 
      /* 3 */ $asm01.TypeRef("System.IDisposable"), 
      /* 4 */ $asm01.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.SymFactory */ 

(function SymFactory$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymFactoryBase"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.SymFactory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SYMTBL"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.NameManager")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateAggregate", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NamespaceOrAggregateSymbol"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.InputFile"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateAggregateDecl", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateDeclaration"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Declaration")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateClassTypeParameter", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterSymbol"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateEvent", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EventSymbol"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ParentSymbol"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateDeclaration")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateLocalVar", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.LocalVariableSymbol"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ParentSymbol"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateMemberVar", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.FieldSymbol"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ParentSymbol"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateDeclaration"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateMethod", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ParentSymbol"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateDeclaration")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateMethodTypeParameter", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterSymbol"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateNamespace", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NamespaceSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NamespaceSymbol")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateNamespaceAid", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AssemblyQualifiedNamespaceSymbol"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ParentSymbol"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.KAID")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateProperty", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PropertySymbol"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ParentSymbol"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateDeclaration")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateUnresolvedAggregate", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ParentSymbol"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.SYMKIND */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.SYMKIND", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SK_NamespaceSymbol: 0, 
    SK_NamespaceDeclaration: 1, 
    SK_AssemblyQualifiedNamespaceSymbol: 2, 
    SK_AggregateSymbol: 3, 
    SK_AggregateDeclaration: 4, 
    SK_TypeParameterSymbol: 5, 
    SK_FieldSymbol: 6, 
    SK_LocalVariableSymbol: 7, 
    SK_MethodSymbol: 8, 
    SK_PropertySymbol: 9, 
    SK_EventSymbol: 10, 
    SK_TransparentIdentifierMemberSymbol: 11, 
    SK_AliasSymbol: 12, 
    SK_ExternalAliasDefinitionSymbol: 13, 
    SK_Scope: 14, 
    SK_CachedNameSymbol: 15, 
    SK_LabelSymbol: 16, 
    SK_GlobalAttributeDeclaration: 17, 
    SK_LambdaScope: 18, 
    SK_UnresolvedAggregateSymbol: 19, 
    SK_InterfaceImplementationMethodSymbol: 20, 
    SK_IndexerSymbol: 21, 
    SK_ParentSymbol: 22, 
    SK_IteratorFinallyMethodSymbol: 23, 
    SK_LIM: 24, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.SynthAggKind */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.SynthAggKind", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    NotSynthesized: 0, 
    AnonymousMethodDisplayClass: 1, 
    IteratorClass: 2, 
    FixedBufferStruct: 3, 
    Lim: 4, 
  }
);

/* class Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader */ 

(function SymbolLoader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.CSharp.RuntimeBinder.Errors.ErrorHandling)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.CSharp.RuntimeBinder.Semantics.GlobalSymbolContext)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.CSharp.RuntimeBinder.Semantics.PredefinedMembers)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.CSharp.RuntimeBinder.SymbolTable)) ();
  };





  function SymbolLoader_get_ErrorContext () {
    return this.SymbolLoader$ErrorContext$value;
  }; 

  function SymbolLoader_get_GlobalSymbolContext () {
    return this.SymbolLoader$GlobalSymbolContext$value;
  }; 

  function SymbolLoader_get_PredefinedMembers () {
    return this.SymbolLoader$PredefinedMembers$value;
  }; 

  function SymbolLoader_get_RuntimeBinderSymbolTable () {
    return this.SymbolLoader$RuntimeBinderSymbolTable$value;
  }; 








































  function SymbolLoader_set_ErrorContext (value) {
    this.SymbolLoader$ErrorContext$value = value;
  }; 

  function SymbolLoader_set_GlobalSymbolContext (value) {
    this.SymbolLoader$GlobalSymbolContext$value = value;
  }; 

  function SymbolLoader_set_PredefinedMembers (value) {
    this.SymbolLoader$PredefinedMembers$value = value;
  }; 

  function SymbolLoader_set_RuntimeBinderSymbolTable (value) {
    this.SymbolLoader$RuntimeBinderSymbolTable$value = value;
  }; 


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.GlobalSymbolContext"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.UserStringBuilder"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorHandling")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AreTypesEqualForConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "FCanLift", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Method({Static:false, Public:true }, "get_ErrorContext", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorHandling")), 
      SymbolLoader_get_ErrorContext
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_GlobalSymbolContext", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.GlobalSymbolContext")), 
      SymbolLoader_get_GlobalSymbolContext
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_PredefinedMembers", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PredefinedMembers")), 
      SymbolLoader_get_PredefinedMembers
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_RuntimeBinderSymbolTable", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.SymbolTable")), 
      SymbolLoader_get_RuntimeBinderSymbolTable
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_TypeManager", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAggTypeSym", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "getBSymmgr", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BSYMMGR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetErrorContext", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorHandling"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetGlobalMiscSymFactory", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MiscSymFactory"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetGlobalSymbolContext", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.GlobalSymbolContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetGlobalSymbolFactory", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymFactory"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNameManager", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.NameManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOptPredefAgg", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOptPredefAgg", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOptPredefType", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOptPredefType", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOptPredefTypeErr", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "getPredefinedMembers", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PredefinedMembers"))
    );

    $.ExternalMethod({Static:false, Public:true }, "getPredefTypes", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PredefinedTypes"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetReqPredefType", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetReqPredefType", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetTypeManager", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager"))
    );

    $.ExternalMethod({Static:false, Public:false}, "HasAnyBaseInterfaceConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasArrayConversionToInterface", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ArrayType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "HasBaseConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasCovariantArrayConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ArrayType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ArrayType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasDelegateConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "HasIdentityOrImplicitReferenceConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "HasImplicitBoxingConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasImplicitBoxingTypeParameterConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "HasImplicitReferenceConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasImplicitReferenceTypeParameterConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasImplicitTypeParameterBaseConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasInterfaceConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasVariantConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsBaseAggregate", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsBaseClass", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsBaseClassOfClass", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsBaseInterface", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "isManagedType", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "LookupAggMember", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.symbmask_t")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "LookupInvokeMeth", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol")])
    );

    $.ExternalMethod({Static:false, Public:true }, "LookupNextSym", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ParentSymbol"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.symbmask_t")
        ])
    );

    $.Method({Static:false, Public:false}, "set_ErrorContext", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorHandling")), 
      SymbolLoader_set_ErrorContext
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_GlobalSymbolContext", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.GlobalSymbolContext")), 
      SymbolLoader_set_GlobalSymbolContext
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_PredefinedMembers", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PredefinedMembers")), 
      SymbolLoader_set_PredefinedMembers
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_RuntimeBinderSymbolTable", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.SymbolTable")), 
      SymbolLoader_set_RuntimeBinderSymbolTable
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SetSymbolTable", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.SymbolTable"))
    );

    $.Field({Static:false, Public:false}, "m_nameManager", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.NameManager"));

    $.Field({Static:false, Public:false}, "SymbolLoader$PredefinedMembers$value", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PredefinedMembers"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SymbolLoader$GlobalSymbolContext$value", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.GlobalSymbolContext"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SymbolLoader$ErrorContext$value", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorHandling"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SymbolLoader$RuntimeBinderSymbolTable$value", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.SymbolTable"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "PredefinedMembers", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PredefinedMembers"));

    $.Property({Static:false, Public:true }, "GlobalSymbolContext", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.GlobalSymbolContext"));

    $.Property({Static:false, Public:true }, "ErrorContext", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorHandling"));

    $.Property({Static:false, Public:true }, "RuntimeBinderSymbolTable", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.SymbolTable"));

    $.Property({Static:false, Public:true }, "TypeManager", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.CSharp.RuntimeBinder.Semantics.AidContainer */ 

(function AidContainer$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.AidContainer", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.FileRecord"))
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "NullAidContainer", $.Type);

    $.Field({Static:false, Public:false}, "m_value", $.Object);


    function AidContainer__cctor () {
      $thisType.NullAidContainer = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      AidContainer__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.AidContainer+Kind */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.AidContainer+Kind", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    File: 1, 
    ExternAlias: 2, 
  }
);

/* class Microsoft.CSharp.RuntimeBinder.Semantics.BSYMMGR */ 

(function BSYMMGR$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.BSYMMGR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.NameManager"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager")])
    );

    $.ExternalMethod({Static:false, Public:true }, "AidAlloc", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.KAID"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.InputFile")])
    );

    $.ExternalMethod({Static:false, Public:true }, "AllocParams", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), [$.Int32, $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "AllocParams", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), [
          $.Int32, $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AllocParams", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])])
    )
      .Parameter(0, "types", function (_) {
          _.Attribute($asm01.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "CompareTypes", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BetterType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ConcatParams", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")]), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "ConcatParams", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")])
    );

    $.ExternalMethod({Static:true , Public:true }, "EmptyTypeArray", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetMiscSymFactory", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MiscSymFactory"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNameFromPtrs", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNameManager", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.NameManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNsAid", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AssemblyQualifiedNamespaceSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NamespaceSymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.KAID")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetRootNS", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NamespaceSymbol"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetRootNsAid", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AssemblyQualifiedNamespaceSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.KAID")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSymbolTable", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SYMTBL"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSymFactory", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymFactory"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Init", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "InitPreLoad", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "LookupAggMember", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.symbmask_t")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "LookupGlobalSymCore", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ParentSymbol"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.symbmask_t")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "LookupNextSym", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ParentSymbol"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.symbmask_t")
        ])
    );

    $.Field({Static:false, Public:false}, "bsetGlobalAssemblies", $asm04.TypeRef("System.Collections.Generic.HashSet`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.KAID")]));

    $.Field({Static:false, Public:true }, "propNubValue", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PropertySymbol"));

    $.Field({Static:false, Public:true }, "methNubCtor", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"));

    $.Field({Static:false, Public:false}, "symFactory", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymFactory"));

    $.Field({Static:false, Public:false}, "miscSymFactory", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MiscSymFactory"));

    $.Field({Static:false, Public:false}, "rootNS", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NamespaceSymbol"));

    $.Field({Static:false, Public:false}, "ssetAssembly", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AidContainer")]));

    $.Field({Static:false, Public:false}, "m_nameTable", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.NameManager"));

    $.Field({Static:false, Public:false}, "tableGlobal", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SYMTBL"));

    $.Field({Static:false, Public:false}, "tableTypeArrays", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BSYMMGR+TypeArrayKey"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")]));

    $.Field({Static:false, Public:false}, "m_infileUnres", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.InputFile"));

    $.Constant({Static:true , Public:false}, "LOG2_SYMTBL_INITIAL_BUCKET_CNT", $.Int32, 13);

    $.Field({Static:true , Public:false, ReadOnly:true }, "taEmpty", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.CSharp.RuntimeBinder.Semantics.BSYMMGR+TypeArrayKey */ 

(function TypeArrayKey$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.BSYMMGR+TypeArrayKey", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "types", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")]));

    $.Field({Static:false, Public:false}, "hashCode", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IEquatable`1", [$.Type])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.symbmask_t */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.symbmask_t", 
    BaseType: $asm01.TypeRef("System.Int64"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    MASK_ALL: -1, 
    MASK_NamespaceSymbol: 1, 
    MASK_NamespaceDeclaration: 2, 
    MASK_AssemblyQualifiedNamespaceSymbol: 4, 
    MASK_AggregateSymbol: 8, 
    MASK_AggregateDeclaration: 16, 
    MASK_TypeParameterSymbol: 32, 
    MASK_FieldSymbol: 64, 
    MASK_LocalVariableSymbol: 128, 
    MASK_MethodSymbol: 256, 
    MASK_PropertySymbol: 512, 
    LOOKUPMASK: 964, 
    MASK_EventSymbol: 1024, 
    MASK_TransparentIdentifierMemberSymbol: 2048, 
    MASK_Scope: 16384, 
    MASK_CachedNameSymbol: 32768, 
    MASK_LabelSymbol: 65536, 
    MASK_GlobalAttributeDeclaration: 131072, 
    MASK_LambdaScope: 262144, 
  }
);

/* class Microsoft.CSharp.RuntimeBinder.Semantics.SYMTBL */ 

(function SYMTBL$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.SYMTBL", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "FindCorrectKind", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.symbmask_t")])
    );

    $.ExternalMethod({Static:false, Public:true }, "InsertChild", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ParentSymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InsertChildNoGrow", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"))
    );

    $.ExternalMethod({Static:false, Public:true }, "LookupSym", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ParentSymbol"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.symbmask_t")
        ])
    );

    $.Field({Static:false, Public:false}, "dictionary", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SYMTBL+Key"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.SYMTBL+Key */ 

(function Key$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.SYMTBL+Key", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ParentSymbol")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "$name", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "parent", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ParentSymbol"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.TransparentIdentifierMemberSymbol */ 

(function TransparentIdentifierMemberSymbol$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.TransparentIdentifierMemberSymbol", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterSymbol */ 

(function TypeParameterSymbol$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterSymbol", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Invariant", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetBounds", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEffectiveBaseClass", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetIndexInOwnParameters", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetIndexInTotalParameters", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetInterfaceBounds", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetTypeParameterType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "HasNewConstraint", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "HasRefConstraint", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "HasValConstraint", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsMethodTypeParameter", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsNonNullableValueType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsReferenceType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsValueType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetBounds", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetConstraints", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SpecCons"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetIndexInOwnParameters", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetIndexInTotalParameters", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetIsMethodTypeParameter", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetTypeParameterType", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterType"))
    );

    $.Field({Static:false, Public:false}, "m_bIsMethodTypeParameter", $.Boolean);

    $.Field({Static:false, Public:false}, "m_bHasRefBound", $.Boolean);

    $.Field({Static:false, Public:false}, "m_bHasValBound", $.Boolean);

    $.Field({Static:false, Public:false}, "m_constraints", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SpecCons"));

    $.Field({Static:false, Public:false}, "m_pTypeParameterType", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterType"));

    $.Field({Static:false, Public:false}, "m_nIndexInOwnParameters", $.Int32);

    $.Field({Static:false, Public:false}, "m_nIndexInTotalParameters", $.Int32);

    $.Field({Static:false, Public:false}, "m_pBounds", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"));

    $.Field({Static:false, Public:false}, "m_pInterfaceBounds", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"));

    $.Field({Static:false, Public:false}, "m_pEffectiveBaseClass", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"));

    $.Field({Static:false, Public:false}, "m_pDeducedBaseClass", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));

    $.Field({Static:false, Public:true }, "Covariant", $.Boolean);

    $.Field({Static:false, Public:true }, "Contravariant", $.Boolean);

    $.Property({Static:false, Public:true }, "Invariant", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.UnresolvedAggregateSymbol */ 

(function UnresolvedAggregateSymbol$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.UnresolvedAggregateSymbol", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRARRAYINDEX */ 

(function EXPRARRAYINDEX$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRARRAYINDEX", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetArray", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetIndex", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetArray", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetIndex", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.Field({Static:false, Public:false}, "Array", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:false}, "Index", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRARRINIT */ 

(function EXPRARRINIT$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRARRINIT", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOptionalArgumentDimensions", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOptionalArguments", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetOptionalArgumentDimensions", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetOptionalArguments", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.Field({Static:false, Public:false}, "OptionalArguments", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:false}, "OptionalArgumentDimensions", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:true }, "dimSizes", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:true }, "dimSize", $.Int32);

    $.Field({Static:false, Public:true }, "GeneratedForParamArray", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRARRAYLENGTH */ 

(function EXPRARRAYLENGTH$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRARRAYLENGTH", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetArray", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetArray", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.Field({Static:false, Public:false}, "Array", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRASSIGNMENT */ 

(function EXPRASSIGNMENT$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRASSIGNMENT", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetLHS", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetRHS", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetLHS", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetRHS", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.Field({Static:false, Public:false}, "LHS", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:false}, "RHS", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP */ 

(function EXPRBINOP$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOptionalLeftChild", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOptionalRightChild", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOptionalUserDefinedCall", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetUserDefinedCallMethod", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetOptionalLeftChild", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetOptionalRightChild", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetOptionalUserDefinedCall", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetUserDefinedCallMethod", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst"))
    );

    $.Field({Static:false, Public:false}, "OptionalLeftChild", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:false}, "OptionalRightChild", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:false}, "OptionalUserDefinedCall", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:true }, "predefinedMethodToCall", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethWithInst"));

    $.Field({Static:false, Public:true }, "isLifted", $.Boolean);

    $.Field({Static:false, Public:false}, "UserDefinedCallMethod", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRSTMT */ 

(function EXPRSTMT$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRSTMT", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOptionalNextStatement", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetOptionalNextStatement", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.Field({Static:false, Public:false}, "NextStatement", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBLOCK */ 

(function EXPRBLOCK$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRSTMT"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBLOCK", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOptionalStatements", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRSTMT"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetOptionalStatements", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRSTMT"))
    );

    $.Field({Static:false, Public:false}, "OptionalStatements", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRSTMT"));

    $.Field({Static:false, Public:true }, "OptionalScopeSymbol", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Scope"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBOUNDLAMBDA */ 

(function EXPRBOUNDLAMBDA$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBOUNDLAMBDA", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ArgumentScope", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Scope"))
    );

    $.ExternalMethod({Static:false, Public:true }, "DelegateType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Initialize", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Scope"))
    );

    $.Field({Static:false, Public:true }, "OptionalBody", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBLOCK"));

    $.Field({Static:false, Public:false}, "argumentScope", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Scope"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL */ 

(function EXPRCALL$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetMemberGroup", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMEMGRP"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOptionalArguments", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetMemberGroup", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMEMGRP"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetOptionalArguments", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.Field({Static:false, Public:false}, "OptionalArguments", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:false}, "MemberGroup", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMEMGRP"));

    $.Field({Static:false, Public:true }, "mwi", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethWithInst"));

    $.Field({Static:false, Public:true }, "PredefinedMethod", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH"));

    $.Field({Static:false, Public:true }, "nubLiftKind", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NullableCallLiftKind"));

    $.Field({Static:false, Public:true }, "pConversions", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:true }, "castOfNonLiftedResultToLiftedType", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCAST */ 

(function EXPRCAST$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCAST", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetArgument", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDestinationType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEORNAMESPACE"))
    );

    $.ExternalMethod({Static:false, Public:true }, "IsBoxingCast", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetArgument", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetDestinationType", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEORNAMESPACE"))
    );

    $.Field({Static:false, Public:true }, "Argument", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:true }, "DestinationType", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEORNAMESPACE"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEORNAMESPACE */ 

(function EXPRTYPEORNAMESPACE$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEORNAMESPACE", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "TypeOrNamespace", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ITypeOrNamespace"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCLASS */ 

(function EXPRCLASS$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEORNAMESPACE"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCLASS", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMULTIGET */ 

(function EXPRMULTIGET$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMULTIGET", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOptionalMulti", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMULTI"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetOptionalMulti", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMULTI"))
    );

    $.Field({Static:false, Public:true }, "OptionalMulti", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMULTI"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMULTI */ 

(function EXPRMULTI$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMULTI", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetLeft", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOperator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetLeft", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetOperator", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.Field({Static:false, Public:true }, "Left", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:true }, "Operator", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCONCAT */ 

(function EXPRCONCAT$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCONCAT", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetFirstArgument", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSecondArgument", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetFirstArgument", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetSecondArgument", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.Field({Static:false, Public:true }, "FirstArgument", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:true }, "SecondArgument", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRQUESTIONMARK */ 

(function EXPRQUESTIONMARK$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRQUESTIONMARK", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetConsequence", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetTestExpression", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetConsequence", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetTestExpression", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.Field({Static:false, Public:true }, "TestExpression", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:true }, "Consequence", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCONSTANT */ 

(function EXPRCONSTANT$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCONSTANT", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_I64Value", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsZero", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Val", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONSTVAL"))
    );

    $.ExternalMethod({Static:false, Public:true }, "getI64Value", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOptionalConstructorCall", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "getU64Value", 
      JSIL.MethodSignature.Return($.UInt64)
    );

    $.ExternalMethod({Static:false, Public:true }, "getVal", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONSTVAL"))
    );

    $.ExternalMethod({Static:false, Public:true }, "isZero", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Val", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONSTVAL"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetOptionalConstructorCall", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "setVal", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONSTVAL"))
    );

    $.Field({Static:false, Public:true }, "OptionalConstructorCall", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:false}, "val", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONSTVAL"));

    $.Property({Static:false, Public:true }, "IsZero", $.Boolean);

    $.Property({Static:false, Public:true }, "Val", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CONSTVAL"));

    $.Property({Static:false, Public:true }, "I64Value", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPREVENT */ 

(function EXPREVENT$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPREVENT", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "OptionalObject", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:true }, "ewt", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EventWithType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionIterator */ 

(function ExpressionIterator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionIterator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AtEnd", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "Count", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Current", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_pList", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRLIST"));

    $.Field({Static:false, Public:false}, "m_pCurrent", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFIELD */ 

(function EXPRFIELD$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFIELD", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOptionalObject", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetOptionalObject", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.Field({Static:false, Public:true }, "OptionalObject", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:true }, "fwt", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.FieldWithType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFIELDINFO */ 

(function EXPRFIELDINFO$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFIELDINFO", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Field", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.FieldSymbol"))
    );

    $.ExternalMethod({Static:false, Public:true }, "FieldType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Init", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.FieldSymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.Field({Static:false, Public:false}, "field", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.FieldSymbol"));

    $.Field({Static:false, Public:false}, "fieldType", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRHOISTEDLOCALEXPR */ 

(function EXPRHOISTEDLOCALEXPR$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRHOISTEDLOCALEXPR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRLIST */ 

(function EXPRLIST$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRLIST", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOptionalElement", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOptionalNextListNode", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetOptionalElement", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetOptionalNextListNode", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.Field({Static:false, Public:true }, "OptionalElement", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:true }, "OptionalNextListNode", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRLOCAL */ 

(function EXPRLOCAL$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRLOCAL", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "local", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.LocalVariableSymbol"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMEMGRP */ 

(function EXPRMEMGRP$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMEMGRP", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetMemberLookupResults", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CMemberLookupResults"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOptionalLHS", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOptionalObject", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetParentType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "isDelegate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetMemberLookupResults", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CMemberLookupResults"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetOptionalLHS", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetOptionalObject", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetParentType", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"))
    );

    $.Field({Static:false, Public:true }, "$name", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"));

    $.Field({Static:false, Public:true }, "typeArgs", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"));

    $.Field({Static:false, Public:true }, "sk", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SYMKIND"));

    $.Field({Static:false, Public:true }, "OptionalObject", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:true }, "OptionalLHS", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:true }, "MemberLookupResults", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CMemberLookupResults"));

    $.Field({Static:false, Public:true }, "ParentType", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMETHODINFO */ 

(function EXPRMETHODINFO$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMETHODINFO", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "Method", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethWithInst"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFUNCPTR */ 

(function EXPRFUNCPTR$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFUNCPTR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "SetOptionalObject", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.Field({Static:false, Public:true }, "mwi", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethWithInst"));

    $.Field({Static:false, Public:true }, "OptionalObject", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRNamedArgumentSpecification */ 

(function EXPRNamedArgumentSpecification$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRNamedArgumentSpecification", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "Name", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"));

    $.Field({Static:false, Public:true }, "Value", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRPROP */ 

(function EXPRPROP$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRPROP", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetMemberGroup", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMEMGRP"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOptionalArguments", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOptionalObjectThrough", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "isBaseCall", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetMemberGroup", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMEMGRP"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetOptionalArguments", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetOptionalObjectThrough", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.Field({Static:false, Public:true }, "OptionalArguments", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:true }, "MemberGroup", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMEMGRP"));

    $.Field({Static:false, Public:true }, "OptionalObjectThrough", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:true }, "pwtSlot", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PropWithType"));

    $.Field({Static:false, Public:true }, "mwtSet", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethWithType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRPropertyInfo */ 

(function EXPRPropertyInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRPropertyInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "Property", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PropWithType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRRETURN */ 

(function EXPRRETURN$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRSTMT"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRRETURN", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOptionalObject", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetOptionalObject", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.Field({Static:false, Public:true }, "OptionalObject", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRWRAP */ 

(function EXPRWRAP$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRWRAP", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOptionalExpression", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetOptionalExpression", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.Field({Static:false, Public:true }, "OptionalExpression", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTHISPOINTER */ 

(function EXPRTHISPOINTER$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRLOCAL"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTHISPOINTER", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEARGUMENTS */ 

(function EXPRTYPEARGUMENTS$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEARGUMENTS", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOptionalElements", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetOptionalElements", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"))
    );

    $.Field({Static:false, Public:true }, "OptionalElements", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEOF */ 

(function EXPRTYPEOF$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEOF", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSourceType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEORNAMESPACE"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetSourceType", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEORNAMESPACE"))
    );

    $.Field({Static:false, Public:true }, "SourceType", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEORNAMESPACE"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUNARYOP */ 

(function EXPRUNARYOP$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUNARYOP", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "Child", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:true }, "OptionalUserDefinedCall", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:true }, "predefinedMethodToCall", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethWithInst"));

    $.Field({Static:false, Public:true }, "UserDefinedCallMethod", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUNBOUNDLAMBDA */ 

(function EXPRUNBOUNDLAMBDA$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUNBOUNDLAMBDA", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUSERDEFINEDCONVERSION */ 

(function EXPRUSERDEFINEDCONVERSION$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUSERDEFINEDCONVERSION", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "Argument", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:true }, "UserDefinedCall", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:true }, "UserDefinedCallMethod", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethWithInst"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUSERLOGOP */ 

(function EXPRUSERLOGOP$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUSERLOGOP", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "TrueFalseCall", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:true }, "OperatorCall", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL"));

    $.Field({Static:false, Public:true }, "FirstOperandToExamine", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.EXPRZEROINIT */ 

(function EXPRZEROINIT$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.EXPRZEROINIT", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "OptionalArgument", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:true }, "OptionalConstructorCall", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"));

    $.Field({Static:false, Public:true }, "IsConstructor", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionTreeRewriter */ 

(function ExpressionTreeRewriter$Members () {
  var $, $thisType;
































































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExprVisitorBase"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionTreeRewriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExprFactory"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateTypeOf", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEOF"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateWraps", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBOUNDLAMBDA")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DestroyWraps", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBOUNDLAMBDA"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispatch", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FixLiftedUserDefinedBinaryOperators", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateArgsList", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateBuiltInBinaryOperator", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateBuiltInUnaryOperator", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUNARYOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateBuiltInUnaryOperator", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateCall", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateCall", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateCall", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateCall", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateConstant", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateConstructor", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateConversion", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateConversionWithSource", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateDelegateConstructor", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateDelegateInvoke", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateIndexList", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateMembersArray", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRARRINIT"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateParameter", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$.String, $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateParamsArray", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRARRINIT"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateQuestionMarkOperand", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateUserDefinedBinaryOperator", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateUserDefinedComparisonOperator", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateUserDefinedConversion", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethWithInst")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateUserDefinedConversion", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethWithInst")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateUserDefinedConversion", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUSERDEFINEDCONVERSION"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateUserDefinedUnaryOperator", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUNARYOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateValueAccessConversion", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetExprFactory", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExprFactory"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPreDefMethod", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PREDEFMETH")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSymbolLoader", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IsDelegateConstructorCall", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:true , Public:false}, "isEnumToDecimalConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsNullableValueAccess", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsNullableValueType", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Rewrite", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExprFactory"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteLambdaBody", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBOUNDLAMBDA")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteLambdaParameters", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBOUNDLAMBDA")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitARRAYINDEX", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRARRAYINDEX")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitARRAYLENGTH", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRARRAYLENGTH")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitARRINIT", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRARRINIT")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitASSIGNMENT", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRASSIGNMENT")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBINOP", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBINOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBOUNDLAMBDA", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBOUNDLAMBDA")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitCALL", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCALL")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitCAST", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCAST")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitCONCAT", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCONCAT")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitCONSTANT", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCONSTANT")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitFIELD", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRFIELD")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLOCAL", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRLOCAL")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMULTI", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMULTI")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMULTIGET", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRMULTIGET")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitPROP", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRPROP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitQUESTIONMARK", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRQUESTIONMARK")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitTHISPOINTER", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTHISPOINTER")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitTYPEOF", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRTYPEOF")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitUNARYOP", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUNARYOP")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitUSERDEFINEDCONVERSION", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRUSERDEFINEDCONVERSION")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitZEROINIT", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPR"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRZEROINIT")])
    );

    $.Field({Static:false, Public:false}, "expressionFactory", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ExprFactory"));

    $.Field({Static:false, Public:false}, "symbolLoader", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader"));

    $.Field({Static:false, Public:false}, "currentAnonMeth", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EXPRBOUNDLAMBDA"));

    $.Field({Static:false, Public:false}, "alwaysRewrite", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.CType */ 

(function CType$Members () {
  var $, $thisType;
















































































  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.CType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "AsAggregateType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AsArrayType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ArrayType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AsErrorType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ErrorType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AsNamespace", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AssemblyQualifiedNamespaceSymbol"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AsNullableType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NullableType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AsParameterModifierType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ParameterModifierType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AsPointerType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PointerType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AsType", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "AsTypeParameterType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterType"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CalculateAssociatedSystemType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "CalculateAssociatedSystemTypeForAggregate", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "computeCurrentBogusState", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "computeManagedType", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "constValKind", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ConstValKind"))
    );

    $.ExternalMethod({Static:false, Public:true }, "fundType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.FUNDTYPE"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssociatedSystemType", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsGenericParameter", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "getAggregate", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetBaseOrParameterOrElementType", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "getBogus", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDelegateTypeOfPossibleExpression", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNakedAgg", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNakedAgg", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNakedType", 
      new JSIL.MethodSignature($.Type, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetName", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"))
    );

    $.ExternalMethod({Static:false, Public:true }, "getPredefType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetTypeKind", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeKind"))
    );

    $.ExternalMethod({Static:false, Public:true }, "hasBogus", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "HasErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "checkBogus", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "InitFromParent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "IsAggregateType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsArrayType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsBoundLambdaType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "isClassType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsCollectionType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "isDelegateType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "isEnumType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsErrorType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "isInterfaceType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsMethodGroupType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNamespace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsNeverSameType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsNonNubValType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsNullableType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsNullType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "isNumericType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsOpenTypePlaceholderType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsParameterModifierType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "isPointerLike", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsPointerType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "isPredefined", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "isPredefType", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsRefType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "isSimpleOrEnum", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "isSimpleOrEnumOrString", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "isSimpleType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "isSpecialByRefType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "isStaticClass", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "isStructOrEnum", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "isStructType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsTypeParameterType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsUnresolved", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "isUnsafe", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "isUnsigned", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsValType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsVoidType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsWindowsRuntimeType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "setBogus", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetErrors", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetName", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetTypeKind", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeKind"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetUnresolved", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "StripNubs", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "StripNubs", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:true }, "underlyingEnumType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "underlyingType", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.Field({Static:false, Public:false}, "m_typeKind", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeKind"));

    $.Field({Static:false, Public:false}, "m_pName", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"));

    $.Field({Static:false, Public:false}, "fHasErrors", $.Boolean);

    $.Field({Static:false, Public:false}, "fUnres", $.Boolean);

    $.Field({Static:false, Public:false}, "isBogus", $.Boolean);

    $.Field({Static:false, Public:false}, "checkedBogus", $.Boolean);

    $.Field({Static:false, Public:false}, "_associatedSystemType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "IsGenericParameter", $.Boolean);

    $.Property({Static:false, Public:true }, "AssociatedSystemType", $asm01.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ITypeOrNamespace")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType */ 

(function AggregateType$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "AreAllTypeArgumentsUnitTypes", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetBaseClass", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDelegateParameters", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDelegateReturnType", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetIfacesAll", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOwningAggregate", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetTypeArgsAll", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetTypeArgsThis", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetWinRTCollectionIfacesAll", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymbolLoader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetOwningAggregate", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetTypeArgsAll", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetTypeArgsThis", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"))
    );

    $.Field({Static:false, Public:false}, "m_pTypeArgsThis", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"));

    $.Field({Static:false, Public:false}, "m_pTypeArgsAll", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"));

    $.Field({Static:false, Public:false}, "m_pOwningAggregate", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"));

    $.Field({Static:false, Public:false}, "baseType", $.Type);

    $.Field({Static:false, Public:false}, "ifacesAll", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"));

    $.Field({Static:false, Public:false}, "winrtifacesAll", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"));

    $.Field({Static:false, Public:true }, "fConstraintsChecked", $.Boolean);

    $.Field({Static:false, Public:true }, "fConstraintError", $.Boolean);

    $.Field({Static:false, Public:true }, "fAllHidden", $.Boolean);

    $.Field({Static:false, Public:true }, "fDiffHidden", $.Boolean);

    $.Field({Static:false, Public:true }, "outerType", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.ArgumentListType */ 

(function ArgumentListType$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.ArgumentListType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.ArrayType */ 

(function ArrayType$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.ArrayType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetBaseElementType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetElementType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetElementType", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"))
    );

    $.Field({Static:false, Public:true }, "rank", $.Int32);

    $.Field({Static:false, Public:false}, "m_pElementType", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.BoundLambdaType */ 

(function BoundLambdaType$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.BoundLambdaType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.ErrorType */ 

(function ErrorType$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.ErrorType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNSParent", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AssemblyQualifiedNamespaceSymbol"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetTypeParent", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "HasNSParent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "HasParent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "HasTypeParent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetNSParent", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AssemblyQualifiedNamespaceSymbol"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetTypeParent", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"))
    );

    $.Field({Static:false, Public:true }, "nameText", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"));

    $.Field({Static:false, Public:true }, "typeArgs", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"));

    $.Field({Static:false, Public:false}, "m_pParentType", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));

    $.Field({Static:false, Public:false}, "m_pParentNS", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AssemblyQualifiedNamespaceSymbol"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.MethodGroupType */ 

(function MethodGroupType$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.MethodGroupType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.NullableType */ 

(function NullableType$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.NullableType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAts", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorHandling")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetUnderlyingType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetUnderlyingType", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"))
    );

    $.Field({Static:false, Public:true }, "ats", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"));

    $.Field({Static:false, Public:true }, "symmgr", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BSYMMGR"));

    $.Field({Static:false, Public:true }, "typeManager", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager"));

    $.Field({Static:false, Public:true }, "UnderlyingType", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.NullType */ 

(function NullType$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.NullType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.OpenTypePlaceholderType */ 

(function OpenTypePlaceholderType$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.OpenTypePlaceholderType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.ParameterModifierType */ 

(function ParameterModifierType$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.ParameterModifierType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetParameterType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetParameterType", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"))
    );

    $.Field({Static:false, Public:true }, "isOut", $.Boolean);

    $.Field({Static:false, Public:false}, "m_pParameterType", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.PointerType */ 

(function PointerType$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.PointerType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetReferentType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetReferentType", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"))
    );

    $.Field({Static:false, Public:false}, "m_pReferentType", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.CorElementType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.CorElementType", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ELEMENT_TYPE_U1: 0, 
    ELEMENT_TYPE_I2: 1, 
    ELEMENT_TYPE_I4: 2, 
    ELEMENT_TYPE_I8: 3, 
    ELEMENT_TYPE_R4: 4, 
    ELEMENT_TYPE_R8: 5, 
    ELEMENT_TYPE_CHAR: 6, 
    ELEMENT_TYPE_BOOLEAN: 7, 
    ELEMENT_TYPE_I1: 8, 
    ELEMENT_TYPE_U2: 9, 
    ELEMENT_TYPE_U4: 10, 
    ELEMENT_TYPE_U8: 11, 
    ELEMENT_TYPE_I: 12, 
    ELEMENT_TYPE_U: 13, 
    ELEMENT_TYPE_OBJECT: 14, 
    ELEMENT_TYPE_STRING: 15, 
    ELEMENT_TYPE_TYPEDBYREF: 16, 
    ELEMENT_TYPE_CLASS: 17, 
    ELEMENT_TYPE_VALUETYPE: 18, 
    ELEMENT_TYPE_END: 19, 
  }
);

/* class Microsoft.CSharp.RuntimeBinder.Semantics.PredefinedTypes */ 

(function PredefinedTypes$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.PredefinedTypes", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BSYMMGR"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DelayLoadPredefSym", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindPredefinedType", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorHandling"), $.String, 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.KAID"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggKindEnum"), 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindPredefinedTypeCore", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NamespaceOrAggregateSymbol"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.KAID"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggKindEnum"), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFullName", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetNiceName", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetNiceName", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOptPredefAgg", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetReqPredefAgg", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Init", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorHandling"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.SymbolTable")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitializePredefinedType", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")])
    );

    $.ExternalMethod({Static:true , Public:true }, "isRequired", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReportMissingPredefTypeError", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorHandling"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")])
    );

    $.Field({Static:false, Public:false}, "runtimeBinderSymbolTable", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.SymbolTable"));

    $.Field({Static:false, Public:false}, "pBSymmgr", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BSYMMGR"));

    $.Field({Static:false, Public:false}, "predefSyms", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol")]));

    $.Field({Static:false, Public:false}, "aidMsCorLib", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.KAID"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "nameSeparators", $jsilcore.TypeRef("System.Array", [$.Char]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.PredefinedTypeFacts */ 

(function PredefinedTypeFacts$Members () {
  var $, $thisType;










  JSIL.MakeStaticClass("Microsoft.CSharp.RuntimeBinder.Semantics.PredefinedTypeFacts", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GetAssociatedSystemType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFundType", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.FUNDTYPE"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetName", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNiceName", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPredefTypeIndex", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNumericType", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsPredefinedType", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsRequired", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSimpleType", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "pdTypeNames", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "pdTypes", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PredefinedTypeFacts+PredefinedTypeInfo")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.PredefinedTypeFacts+PredefinedTypeInfo */ 

(function PredefinedTypeInfo$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.PredefinedTypeFacts+PredefinedTypeInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType"), $asm01.TypeRef("System.Type"), 
          $.String, $.Boolean, 
          $.Int32, $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggKindEnum"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.FUNDTYPE"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType"), $asm01.TypeRef("System.Type"), 
          $.String, $.Boolean, 
          $.Int32, $.Boolean
        ])
    );

    $.Field({Static:false, Public:false}, "type", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType"));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "required", $.Boolean);

    $.Field({Static:false, Public:false}, "fundType", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.FUNDTYPE"));

    $.Field({Static:false, Public:false}, "AssociatedSystemType", $asm01.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray */ 

(function TypeArray$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyItems", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EyeTim", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "HasErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "Item", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "ItemAsTypeParameterType", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterType"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")]))
    );

    $.Field({Static:false, Public:false}, "items", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")]));

    $.Property({Static:false, Public:true }, "Size", $.Int32);

    $.Property({Static:false, Public:true }, "size", $.Int32);

    $.Property({Static:false, Public:true }, "EyeTim", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));

    $.Property({Static:false, Public:true }, "Count", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["EyeTim"]; });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.TypeFactory */ 

(function TypeFactory$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.TypeFactory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateAggregateType", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateAnonMethod", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BoundLambdaType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateArgList", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ArgumentListType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateArray", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ArrayType"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateError", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ErrorType"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AssemblyQualifiedNamespaceSymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateMethodGroup", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodGroupType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateNull", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NullType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateNullable", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NullableType"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BSYMMGR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateParameterModifier", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ParameterModifierType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreatePointer", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PointerType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateTypeParameter", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterSymbol")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateUnit", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.OpenTypePlaceholderType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateVoid", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.VoidType"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.CSharp.RuntimeBinder.Semantics.TypeKind */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Semantics.TypeKind", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    TK_AggregateType: 0, 
    TK_VoidType: 1, 
    TK_NullType: 2, 
    TK_OpenTypePlaceholderType: 3, 
    TK_BoundLambdaType: 4, 
    TK_UnboundLambdaType: 5, 
    TK_MethodGroupType: 6, 
    TK_ErrorType: 7, 
    TK_NaturalIntegerType: 8, 
    TK_ArgumentListType: 9, 
    TK_ArrayType: 10, 
    TK_PointerType: 11, 
    TK_ParameterModifierType: 12, 
    TK_NullableType: 13, 
    TK_TypeParameterType: 14, 
  }
);

/* class Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager */ 

(function TypeManager$Members () {
  var $, $thisType;

























































  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ConcatenateTypeArrays", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateArrayOfUnitTypes", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAggregate", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAggregate", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAnonMethType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BoundLambdaType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetArgListType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ArgumentListType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetArray", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ArrayType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBestAccessibleType", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CSemanticChecker"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BindingContext"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetErrorSym", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ErrorType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetErrorType", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ErrorType"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AssemblyQualifiedNamespaceSymbol"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetMethGrpType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodGroupType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNubFromNullable", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NullableType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNullable", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NullableType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNullable", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNullType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NullType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOptPredefAgg", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetParameterModifier", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ParameterModifierType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetPointer", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PointerType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetReqPredefAgg", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetStdClsTypeVar", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterType"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetStdMethTypeVar", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterType"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetStdMethTyVarArray", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetTypeParameter", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterSymbol")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetUnitType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.OpenTypePlaceholderType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetVoid", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.VoidType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BSYMMGR"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PredefinedTypes")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitType", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "InitTypeFactory", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.SymbolTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalsVisibleTo", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.Assembly"), $asm01.TypeRef("System.Reflection.Assembly")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ParametersContainTyVar", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReportMissingPredefTypeError", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorHandling"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SubstEqualTypeArrays", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SubstTypeFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "SubstEqualTypes", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SubstTypeFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "SubstEqualTypes", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "SubstEqualTypes", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "SubstEqualTypesCore", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SubstContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "SubstType", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SubstTypeFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "SubstType", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SubstType", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "SubstType", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SubstContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SubstType", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SubstType", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "SubstType", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "SubstTypeArray", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SubstContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SubstTypeArray", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SubstTypeFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "SubstTypeArray", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "SubstTypeArray", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SubstTypeArray", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "SubstTypeArray", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SubstTypeCore", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SubstContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryArrayVarianceAdjustmentToGetAccessibleType", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CSemanticChecker"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BindingContext"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ArrayType"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryVarianceAdjustmentToGetAccessibleType", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CSemanticChecker"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BindingContext"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "TypeContainsAnonymousTypes", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:true , Public:true }, "TypeContainsType", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:true , Public:true }, "TypeContainsTyVars", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")])
    );

    $.Field({Static:false, Public:false}, "m_BSymmgr", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BSYMMGR"));

    $.Field({Static:false, Public:false}, "m_predefTypes", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PredefinedTypes"));

    $.Field({Static:false, Public:false}, "m_typeFactory", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeFactory"));

    $.Field({Static:false, Public:false}, "m_typeTable", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeTable"));

    $.Field({Static:false, Public:false}, "m_symbolTable", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.SymbolTable"));

    $.Field({Static:false, Public:false}, "voidType", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.VoidType"));

    $.Field({Static:false, Public:false}, "nullType", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NullType"));

    $.Field({Static:false, Public:false}, "typeUnit", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.OpenTypePlaceholderType"));

    $.Field({Static:false, Public:false}, "typeAnonMeth", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BoundLambdaType"));

    $.Field({Static:false, Public:false}, "typeMethGrp", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodGroupType"));

    $.Field({Static:false, Public:false}, "argListType", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ArgumentListType"));

    $.Field({Static:false, Public:false}, "errorType", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ErrorType"));

    $.Field({Static:false, Public:false}, "stvcMethod", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager+StdTypeVarColl"));

    $.Field({Static:false, Public:false}, "stvcClass", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager+StdTypeVarColl"));

    $.Field({Static:false, Public:false}, "internalsVisibleToCalculated", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Tuple`2", [$asm01.TypeRef("System.Reflection.Assembly"), $asm01.TypeRef("System.Reflection.Assembly")]), $.Boolean]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager+StdTypeVarColl */ 

(function StdTypeVarColl$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager+StdTypeVarColl", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetTypeVarSym", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterType"), [
          $.Int32, $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager"), 
          $.Boolean
        ])
    );

    $.Field({Static:false, Public:true }, "prgptvs", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterType")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager+<>c__DisplayClass71_0 */ 

(function $l$gc__DisplayClass71_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager+<>c__DisplayClass71_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lInternalsVisibleTo$gb__1", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.AssemblyName")])
    );

    $.Field({Static:false, Public:true }, "assyName", $asm01.TypeRef("System.Reflection.AssemblyName"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lInternalsVisibleTo$gb__71_0", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.AssemblyName"), [$asm01.TypeRef("System.Runtime.CompilerServices.InternalsVisibleToAttribute")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__71_0", $asm01.TypeRef("System.Func`2", [$asm01.TypeRef("System.Runtime.CompilerServices.InternalsVisibleToAttribute"), $asm01.TypeRef("System.Reflection.AssemblyName")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterType */ 

(function TypeParameterType$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "DependsOn", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Contravariant", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Covariant", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Invariant", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetBounds", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEffectiveBaseClass", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetIndexInOwnParameters", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetIndexInTotalParameters", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetInterfaceBounds", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOwningSymbol", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ParentSymbol"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetTypeParameterSymbol", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterSymbol"))
    );

    $.ExternalMethod({Static:false, Public:true }, "HasNewConstraint", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "HasRefConstraint", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "HasValConstraint", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsMethodTypeParameter", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsNonNullableValueType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsReferenceType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsValueType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetTypeParameterSymbol", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterSymbol"))
    );

    $.Field({Static:false, Public:false}, "m_pTypeParameterSymbol", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterSymbol"));

    $.Property({Static:false, Public:true }, "Covariant", $.Boolean);

    $.Property({Static:false, Public:true }, "Invariant", $.Boolean);

    $.Property({Static:false, Public:true }, "Contravariant", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.CSharp.RuntimeBinder.Semantics.KeyPair`2 */ 

(function KeyPair$b2$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.KeyPair`2", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["Key1", "Key2"], 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("Key1"), $.GenericParameter("Key2")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.KeyPair`2", [$.GenericParameter("Key1"), $.GenericParameter("Key2")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "m_pKey1", $.GenericParameter("Key1"));

    $.Field({Static:false, Public:false}, "m_pKey2", $.GenericParameter("Key2"));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IEquatable`1", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.KeyPair`2", [$.GenericParameter("Key1"), $.GenericParameter("Key2")])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.TypeTable */ 

(function TypeTable$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.TypeTable", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "InsertAggregate", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "InsertArray", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ArrayType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "InsertError", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ErrorType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "InsertError", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AssemblyQualifiedNamespaceSymbol"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ErrorType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "InsertNullable", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NullableType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "InsertParameterModifier", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ParameterModifierType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "InsertPointer", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PointerType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "InsertTypeParameter", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterSymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "LookupAggregate", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol")])
    );

    $.ExternalMethod({Static:false, Public:true }, "LookupArray", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ArrayType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "LookupError", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ErrorType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "LookupError", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ErrorType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AssemblyQualifiedNamespaceSymbol")])
    );

    $.ExternalMethod({Static:false, Public:true }, "LookupNullable", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NullableType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "LookupParameterModifier", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ParameterModifierType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "LookupPointer", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PointerType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "LookupTypeParameter", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterType"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterSymbol")])
    );

    $.Field({Static:false, Public:false}, "m_pAggregateTable", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.KeyPair`2", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateSymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name")]), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType")]));

    $.Field({Static:false, Public:false}, "m_pErrorWithTypeParentTable", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.KeyPair`2", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name")]), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ErrorType")]));

    $.Field({Static:false, Public:false}, "m_pErrorWithNamespaceParentTable", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.KeyPair`2", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AssemblyQualifiedNamespaceSymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name")]), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ErrorType")]));

    $.Field({Static:false, Public:false}, "m_pArrayTable", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.KeyPair`2", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name")]), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ArrayType")]));

    $.Field({Static:false, Public:false}, "m_pParameterModifierTable", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.KeyPair`2", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name")]), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.ParameterModifierType")]));

    $.Field({Static:false, Public:false}, "m_pPointerTable", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PointerType")]));

    $.Field({Static:false, Public:false}, "m_pNullableTable", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.NullableType")]));

    $.Field({Static:false, Public:false}, "m_pTypeParameterTable", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterSymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeParameterType")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Semantics.VoidType */ 

(function VoidType$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Semantics.VoidType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Errors.CError */ 

(function CError$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Errors.CError", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ComputeString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorCode"), $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Text", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Initialize", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorCode"), $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.Field({Static:false, Public:false}, "m_text", $.String);

    $.Property({Static:false, Public:true }, "Text", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Errors.CParameterizedError */ 

(function CParameterizedError$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Errors.CParameterizedError", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetErrorNumber", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorCode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetParameter", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrArg"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetParameterCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Initialize", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorCode"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrArg")])])
    );

    $.Field({Static:false, Public:false}, "m_errorNumber", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorCode"));

    $.Field({Static:false, Public:false}, "m_arguments", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrArg")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.CSharp.RuntimeBinder.Errors.ErrorCode */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Errors.ErrorCode", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ERR_BadBinaryOps: 19, 
    ERR_IntDivByZero: 20, 
    ERR_BadIndexLHS: 21, 
    ERR_BadIndexCount: 22, 
    ERR_BadUnaryOp: 23, 
    ERR_NoImplicitConv: 29, 
    ERR_NoExplicitConv: 30, 
    ERR_ConstOutOfRange: 31, 
    ERR_AmbigBinaryOps: 34, 
    ERR_AmbigUnaryOp: 35, 
    ERR_ValueCantBeNull: 37, 
    ERR_WrongNestedThis: 38, 
    ERR_NoSuchMember: 117, 
    ERR_ObjectRequired: 120, 
    ERR_AmbigCall: 121, 
    ERR_BadAccess: 122, 
    ERR_MethDelegateMismatch: 123, 
    ERR_AssgLvalueExpected: 131, 
    ERR_NoConstructors: 143, 
    ERR_BadDelegateConstructor: 148, 
    ERR_PropertyLacksGet: 154, 
    ERR_ObjectProhibited: 176, 
    ERR_AssgReadonly: 191, 
    ERR_RefReadonly: 192, 
    ERR_AssgReadonlyStatic: 198, 
    ERR_RefReadonlyStatic: 199, 
    ERR_AssgReadonlyProp: 200, 
    ERR_AbstractBaseCall: 205, 
    ERR_RefProperty: 206, 
    ERR_ManagedAddr: 208, 
    ERR_FixedNotNeeded: 213, 
    ERR_UnsafeNeeded: 214, 
    ERR_BadBoolOp: 217, 
    ERR_MustHaveOpTF: 218, 
    ERR_CheckedOverflow: 220, 
    ERR_ConstOutOfRangeChecked: 221, 
    ERR_AmbigMember: 229, 
    ERR_SizeofUnsafe: 233, 
    ERR_FieldInitRefNonstatic: 236, 
    ERR_CallingFinalizeDepracated: 245, 
    ERR_CallingBaseFinalizeDeprecated: 250, 
    ERR_BadCastInFixed: 254, 
    ERR_NoImplicitConvCast: 266, 
    ERR_InaccessibleGetter: 271, 
    ERR_InaccessibleSetter: 272, 
    ERR_BadArity: 305, 
    ERR_BadTypeArgument: 306, 
    ERR_TypeArgsNotAllowed: 307, 
    ERR_HasNoTypeVars: 308, 
    ERR_NewConstraintNotSatisfied: 310, 
    ERR_GenericConstraintNotSatisfiedRefType: 311, 
    ERR_GenericConstraintNotSatisfiedNullableEnum: 312, 
    ERR_GenericConstraintNotSatisfiedNullableInterface: 313, 
    ERR_GenericConstraintNotSatisfiedTyVar: 314, 
    ERR_GenericConstraintNotSatisfiedValType: 315, 
    ERR_TypeVarCantBeNull: 403, 
    ERR_BadRetType: 407, 
    ERR_CantInferMethTypeArgs: 411, 
    ERR_MethGrpToNonDel: 428, 
    ERR_RefConstraintNotSatisfied: 452, 
    ERR_ValConstraintNotSatisfied: 453, 
    ERR_CircularConstraint: 454, 
    ERR_BaseConstraintConflict: 455, 
    ERR_ConWithValCon: 456, 
    ERR_AmbigUDConv: 457, 
    ERR_PredefinedTypeNotFound: 518, 
    ERR_PredefinedTypeBadType: 520, 
    ERR_BindToBogus: 570, 
    ERR_CantCallSpecialMethod: 571, 
    ERR_BogusType: 648, 
    ERR_MissingPredefinedMember: 656, 
    ERR_LiteralDoubleCast: 664, 
    ERR_UnifyingInterfaceInstantiations: 695, 
    ERR_ConvertToStaticClass: 716, 
    ERR_GenericArgIsStaticClass: 718, 
    ERR_PartialMethodToDelegate: 762, 
    ERR_IncrementLvalueExpected: 1059, 
    ERR_NoSuchMemberOrExtension: 1061, 
    ERR_ValueTypeExtDelegate: 1113, 
    ERR_BadArgCount: 1501, 
    ERR_BadArgTypes: 1502, 
    ERR_BadArgType: 1503, 
    ERR_RefLvalueExpected: 1510, 
    ERR_BadProtectedAccess: 1540, 
    ERR_BindToBogusProp2: 1545, 
    ERR_BindToBogusProp1: 1546, 
    ERR_BadDelArgCount: 1593, 
    ERR_BadDelArgTypes: 1594, 
    ERR_AssgReadonlyLocal: 1604, 
    ERR_RefReadonlyLocal: 1605, 
    ERR_ReturnNotLValue: 1612, 
    ERR_BadArgExtraRef: 1615, 
    ERR_BadArgRef: 1620, 
    ERR_AssgReadonly2: 1648, 
    ERR_RefReadonly2: 1649, 
    ERR_AssgReadonlyStatic2: 1650, 
    ERR_RefReadonlyStatic2: 1651, 
    ERR_AssgReadonlyLocalCause: 1656, 
    ERR_RefReadonlyLocalCause: 1657, 
    ERR_ThisStructNotInAnonMeth: 1673, 
    ERR_DelegateOnNullable: 1728, 
    ERR_BadCtorArgCount: 1729, 
    ERR_BadExtensionArgTypes: 1928, 
    ERR_BadInstanceArgType: 1929, 
    ERR_BadArgTypesForCollectionAdd: 1950, 
    ERR_InitializerAddHasParamModifiers: 1954, 
    ERR_NonInvocableMemberCalled: 1955, 
    ERR_NamedArgumentSpecificationBeforeFixedArgument: 5002, 
    ERR_BadNamedArgument: 5003, 
    ERR_BadNamedArgumentForDelegateInvoke: 5004, 
    ERR_DuplicateNamedArgument: 5005, 
    ERR_NamedArgumentUsedInPositional: 5006, 
  }
);

/* class Microsoft.CSharp.RuntimeBinder.Errors.CErrorFactory */ 

(function CErrorFactory$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Errors.CErrorFactory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateError", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.CError"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorCode"), $jsilcore.TypeRef("System.Array", [$.String])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm01.TypeRef("System.ParamArrayAttribute"))
        });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Errors.ErrorFacts */ 

(function ErrorFacts$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.CSharp.RuntimeBinder.Errors.ErrorFacts", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "GetMessage", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorCode")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetMessage", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.MessageID")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.CSharp.RuntimeBinder.Errors.ErrArgKind */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Errors.ErrArgKind", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Int: 0, 
    Hresult: 1, 
    Ids: 2, 
    SymKind: 3, 
    Sym: 4, 
    Type: 5, 
    Name: 6, 
    Str: 7, 
    PredefName: 8, 
    LocNode: 9, 
    Ptr: 10, 
    SymWithType: 11, 
    MethWithInst: 12, 
    Expr: 13, 
    Lim: 14, 
  }
);

/* enum Microsoft.CSharp.RuntimeBinder.Errors.ErrArgFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Errors.ErrArgFlags", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Ref: 1, 
    NoStr: 2, 
    RefOnly: 3, 
    Unique: 4, 
    UseGetErrorInfo: 8, 
  }
);

/* class Microsoft.CSharp.RuntimeBinder.Errors.SymWithTypeMemo */ 

(function SymWithTypeMemo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Errors.SymWithTypeMemo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "sym", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"));

    $.Field({Static:false, Public:true }, "ats", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Errors.MethPropWithInstMemo */ 

(function MethPropWithInstMemo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Errors.MethPropWithInstMemo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "sym", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"));

    $.Field({Static:false, Public:true }, "ats", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.AggregateType"));

    $.Field({Static:false, Public:true }, "typeArgs", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Errors.ErrArg */ 

(function ErrArg$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Errors.ErrArg", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SYMKIND"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrArgFlags")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrArgFlags")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymWithType"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst"))
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SYMKIND")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedName")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymWithType")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst")])
    );

    $.Field({Static:false, Public:true }, "eak", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrArgKind"));

    $.Field({Static:false, Public:true }, "eaf", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrArgFlags"));

    $.Field({Static:false, Public:false}, "ids", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.MessageID"));

    $.Field({Static:false, Public:false}, "n", $.Int32);

    $.Field({Static:false, Public:false}, "sk", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SYMKIND"));

    $.Field({Static:false, Public:false}, "pdn", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.PredefinedName"));

    $.Field({Static:false, Public:false}, "$name", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"));

    $.Field({Static:false, Public:false}, "sym", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"));

    $.Field({Static:false, Public:false}, "psz", $.String);

    $.Field({Static:false, Public:false}, "pType", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"));

    $.Field({Static:false, Public:false}, "mpwiMemo", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.MethPropWithInstMemo"));

    $.Field({Static:false, Public:false}, "swtMemo", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.SymWithTypeMemo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Errors.ErrArgRef */ 

(function ErrArgRef$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrArg"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Errors.ErrArgRef", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymWithType"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrArgFlags")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SymWithType")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethPropWithInst")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Errors.ErrArgRefOnly */ 

(function ErrArgRefOnly$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrArgRef"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Errors.ErrArgRefOnly", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Errors.ErrArgNoRef */ 

(function ErrArgNoRef$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrArgRef"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Errors.ErrArgNoRef", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Errors.ErrArgIds */ 

(function ErrArgIds$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrArgRef"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Errors.ErrArgIds", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.MessageID"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Errors.ErrArgSymKind */ 

(function ErrArgSymKind$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrArgRef"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Errors.ErrArgSymKind", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Errors.ErrorHandling */ 

(function ErrorHandling$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Errors.ErrorHandling", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.UserStringBuilder"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.IErrorSink"), 
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.CErrorFactory")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddRelatedSymLoc", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.CParameterizedError"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddRelatedTypeLoc", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.CParameterizedError"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateError", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.CError"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorCode"), $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Error", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorCode"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrArg")])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm01.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "ErrorRef", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorCode"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrArgRef")])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm01.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "ErrorTreeArgs", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorCode"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrArg")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "MakeError", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.CParameterizedError")]), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorCode"), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrArg")])
        ])
    )
      .Parameter(2, "args", function (_) {
          _.Attribute($asm01.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "MakeErrorLocArgs", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.CParameterizedError")]), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorCode"), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrArg")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "MakeErrorTreeArgs", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.CParameterizedError")]), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrorCode"), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrArg")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "RealizeError", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.CError"), [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.CParameterizedError")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SubmitError", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.CParameterizedError"))
    );

    $.Field({Static:false, Public:false}, "m_errorSink", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.IErrorSink"));

    $.Field({Static:false, Public:false}, "m_userStringBuilder", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.UserStringBuilder"));

    $.Field({Static:false, Public:false}, "m_errorFactory", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.CErrorFactory"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Microsoft.CSharp.RuntimeBinder.Errors.IErrorSink */ 

JSIL.MakeInterface(
  "Microsoft.CSharp.RuntimeBinder.Errors.IErrorSink", false, [], function ($) {
    $.Method({}, "SubmitError", JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.CParameterizedError")));
    $.Method({}, "ErrorCount", JSIL.MethodSignature.Return($.Int32));
  }, []);

/* enum Microsoft.CSharp.RuntimeBinder.Errors.MessageID */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.CSharp.RuntimeBinder.Errors.MessageID", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SK_METHOD: 0, 
    SK_CLASS: 1, 
    SK_NAMESPACE: 2, 
    SK_FIELD: 3, 
    SK_PROPERTY: 4, 
    SK_UNKNOWN: 5, 
    SK_VARIABLE: 6, 
    SK_EVENT: 7, 
    SK_TYVAR: 8, 
    SK_ALIAS: 9, 
    ERRORSYM: 10, 
    NULL: 11, 
    GlobalNamespace: 12, 
    MethodGroup: 13, 
    AnonMethod: 14, 
    Lambda: 15, 
    AnonymousType: 16, 
  }
);

/* class Microsoft.CSharp.RuntimeBinder.Errors.UserStringBuilder */ 

(function UserStringBuilder$Members () {
  var $, $thisType;


































  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Errors.UserStringBuilder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.GlobalSymbolContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginString", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EndString", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "ErrAppendEvent", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.EventSymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SubstContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ErrAppendChar", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true }, "ErrAppendId", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.MessageID"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ErrAppendIndexer", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.IndexerSymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SubstContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ErrAppendMethod", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SubstContext"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ErrAppendMethodParentSym", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.MethodSymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SubstContext"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ErrAppendName", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ErrAppendParamList", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ErrAppendParentCore", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SubstContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ErrAppendParentSym", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SubstContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ErrAppendParentType", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SubstContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ErrAppendPrintf", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm01.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "ErrAppendProperty", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.PropertySymbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SubstContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ErrAppendString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "ErrAppendSym", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SubstContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ErrAppendSym", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.Symbol"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SubstContext"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ErrAppendType", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SubstContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ErrAppendType", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SubstContext"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ErrAppendTypeParameters", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray"), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SubstContext"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ErrArgToString", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.ErrArg"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ErrId", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.String]), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Errors.MessageID")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ErrSK", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.String]), $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.SYMKIND")])
    );

    $.ExternalMethod({Static:false, Public:false}, "getBSymmgr", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.BSYMMGR"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNameManager", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.NameManager"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeID", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.CType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeManager", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.TypeManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, "HadUndisplayableString", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckDisplayableName", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IsDisplayableName", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Syntax.Name")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ResetUndisplayableStringFlag", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "fHadUndisplayableStringInError", $.Boolean);

    $.Field({Static:false, Public:false}, "m_buildingInProgress", $.Boolean);

    $.Field({Static:false, Public:false}, "m_globalSymbols", $asm00.TypeRef("Microsoft.CSharp.RuntimeBinder.Semantics.GlobalSymbolContext"));

    $.Field({Static:false, Public:false}, "m_strBuilder", $asm01.TypeRef("System.Text.StringBuilder"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.RuntimeBinder.Errors.SRDescriptionAttribute */ 

(function SRDescriptionAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ComponentModel.DescriptionAttribute"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Errors.SRDescriptionAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.All]; });

})();

/* class Microsoft.CSharp.RuntimeBinder.Errors.SRCategoryAttribute */ 

(function SRCategoryAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ComponentModel.CategoryAttribute"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Errors.SRCategoryAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocalizedString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.All]; });

})();

/* class Microsoft.CSharp.RuntimeBinder.Errors.SR */ 

(function SR$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.RuntimeBinder.Errors.SR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm01.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.Field({Static:true , Public:false}, "loader", $.Type);

    $.Field({Static:false, Public:false}, "resources", $asm01.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm01.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm01.TypeRef("System.Resources.ResourceManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class <PrivateImplementationDetails> */ 

(function $lPrivateImplementationDetails$g$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "<PrivateImplementationDetails>", 
      IsPublic: false, 
      IsReferenceType: true, 
    }, function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class __DynamicallyInvokableAttribute */ 

(function __DynamicallyInvokableAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Attribute"), 
      Name: "__DynamicallyInvokableAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.All]; });

})();

